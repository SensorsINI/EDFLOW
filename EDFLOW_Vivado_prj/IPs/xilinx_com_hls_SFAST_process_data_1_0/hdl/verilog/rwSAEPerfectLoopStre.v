// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rwSAEPerfectLoopStre (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        xStream_V_V_dout,
        xStream_V_V_empty_n,
        xStream_V_V_read,
        yStream_V_V_dout,
        yStream_V_V_empty_n,
        yStream_V_V_read,
        polStream_V_V_dout,
        polStream_V_V_empty_n,
        polStream_V_V_read,
        tsStream_V_V_dout,
        tsStream_V_V_empty_n,
        tsStream_V_V_read,
        idxStream_V_V_dout,
        idxStream_V_V_empty_n,
        idxStream_V_V_read,
        outputDataStream_V_V_din,
        outputDataStream_V_V_full_n,
        outputDataStream_V_V_write,
        sizeStreamOut2_V_out_din,
        sizeStreamOut2_V_out_full_n,
        sizeStreamOut2_V_out_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;
parameter    ap_const_lv96_2F1E0EFEEFE0E1F202122120 = 96'd14582134052080475801946038560;
















input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [9:0] xStream_V_V_dout;
input   xStream_V_V_empty_n;
output   xStream_V_V_read;
input  [9:0] yStream_V_V_dout;
input   yStream_V_V_empty_n;
output   yStream_V_V_read;
input  [0:0] polStream_V_V_dout;
input   polStream_V_V_empty_n;
output   polStream_V_V_read;
input  [31:0] tsStream_V_V_dout;
input   tsStream_V_V_empty_n;
output   tsStream_V_V_read;
input  [1:0] idxStream_V_V_dout;
input   idxStream_V_V_empty_n;
output   idxStream_V_V_read;
output  [47:0] outputDataStream_V_V_din;
input   outputDataStream_V_V_full_n;
output   outputDataStream_V_V_write;
output  [4:0] sizeStreamOut2_V_out_din;
input   sizeStreamOut2_V_out_full_n;
output   sizeStreamOut2_V_out_write;
output  [4:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xStream_V_V_read;
reg yStream_V_V_read;
reg polStream_V_V_read;
reg tsStream_V_V_read;
reg idxStream_V_V_read;
reg outputDataStream_V_V_write;
reg sizeStreamOut2_V_out_write;
reg[4:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_i_44_fu_505_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg   [0:0] tmp_i_reg_1595;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg   [0:0] tmp_i_44_reg_1624;
reg   [0:0] tmp_i_44_reg_1624_pp0_iter4_reg;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] glPLSFASTSliceScale2_3_address0;
reg    glPLSFASTSliceScale2_3_ce0;
wire   [127:0] glPLSFASTSliceScale2_3_q0;
reg   [8:0] glPLSFASTSliceScale2_3_address1;
reg    glPLSFASTSliceScale2_3_ce1;
reg    glPLSFASTSliceScale2_3_we1;
reg   [127:0] glPLSFASTSliceScale2_3_d1;
wire   [127:0] glPLSFASTSliceScale2_3_q1;
reg   [8:0] glPLSFASTSliceScale2_2_address0;
reg    glPLSFASTSliceScale2_2_ce0;
wire   [127:0] glPLSFASTSliceScale2_2_q0;
reg   [8:0] glPLSFASTSliceScale2_2_address1;
reg    glPLSFASTSliceScale2_2_ce1;
reg    glPLSFASTSliceScale2_2_we1;
reg   [127:0] glPLSFASTSliceScale2_2_d1;
wire   [127:0] glPLSFASTSliceScale2_2_q1;
reg   [8:0] glPLSFASTSliceScale2_1_address0;
reg    glPLSFASTSliceScale2_1_ce0;
wire   [127:0] glPLSFASTSliceScale2_1_q0;
reg   [8:0] glPLSFASTSliceScale2_1_address1;
reg    glPLSFASTSliceScale2_1_ce1;
reg    glPLSFASTSliceScale2_1_we1;
reg   [127:0] glPLSFASTSliceScale2_1_d1;
wire   [127:0] glPLSFASTSliceScale2_1_q1;
reg   [8:0] glPLSFASTSliceScale2_address0;
reg    glPLSFASTSliceScale2_ce0;
wire   [127:0] glPLSFASTSliceScale2_q0;
reg   [8:0] glPLSFASTSliceScale2_address1;
reg    glPLSFASTSliceScale2_ce1;
reg    glPLSFASTSliceScale2_we1;
reg   [127:0] glPLSFASTSliceScale2_d1;
wire   [127:0] glPLSFASTSliceScale2_q1;
reg   [9:0] resetCnt_V;
reg    xStream_V_V_blk_n;
wire    ap_block_pp0_stage0;
reg    yStream_V_V_blk_n;
reg    polStream_V_V_blk_n;
reg    idxStream_V_V_blk_n;
reg    tsStream_V_V_blk_n;
reg    outputDataStream_V_V_blk_n;
reg    sizeStreamOut2_V_out_blk_n;
reg   [4:0] p_4_i_reg_400;
reg   [4:0] sizeStreamOut1_V_wri_reg_429;
reg   [47:0] tmp_V_s_reg_443;
wire   [0:0] tmp_i_fu_483_p2;
reg   [0:0] tmp_i_reg_1595_pp0_iter1_reg;
reg   [0:0] tmp_i_reg_1595_pp0_iter2_reg;
reg   [0:0] tmp_i_reg_1595_pp0_iter3_reg;
reg   [0:0] tmp_i_reg_1595_pp0_iter4_reg;
reg   [3:0] p_Result_57_i_reg_1599;
wire   [4:0] i_V_fu_499_p2;
reg   [4:0] i_V_reg_1619;
reg   [0:0] tmp_i_44_reg_1624_pp0_iter1_reg;
reg   [0:0] tmp_i_44_reg_1624_pp0_iter2_reg;
reg   [0:0] tmp_i_44_reg_1624_pp0_iter3_reg;
wire   [4:0] tmp_36_cast_i_fu_913_p2;
reg   [4:0] tmp_36_cast_i_reg_1628;
wire   [4:0] tmp_51_cast_i_fu_995_p2;
reg   [4:0] tmp_51_cast_i_reg_1656;
reg   [4:0] tmp_51_cast_i_reg_1656_pp0_iter2_reg;
reg   [4:0] tmp_51_cast_i_reg_1656_pp0_iter3_reg;
wire   [10:0] tmp_37_fu_1029_p2;
reg   [10:0] tmp_37_reg_1664;
reg   [10:0] tmp_37_reg_1664_pp0_iter2_reg;
reg   [1:0] tmp_V_12_reg_1669;
reg   [1:0] tmp_V_12_reg_1669_pp0_iter2_reg;
reg   [4:0] xNewIdxSFASTScale2_V_reg_1674;
reg   [8:0] glPLSFASTSliceScale2_4_reg_1682;
reg   [8:0] glPLSFASTSliceScale2_4_reg_1682_pp0_iter2_reg;
reg   [8:0] glPLSFASTSliceScale2_5_reg_1688;
reg   [8:0] glPLSFASTSliceScale2_5_reg_1688_pp0_iter2_reg;
reg   [8:0] glPLSFASTSliceScale2_6_reg_1694;
reg   [8:0] glPLSFASTSliceScale2_6_reg_1694_pp0_iter2_reg;
reg   [8:0] glPLSFASTSliceScale2_7_reg_1700;
reg   [8:0] glPLSFASTSliceScale2_7_reg_1700_pp0_iter2_reg;
wire   [0:0] tmp_31_i_fu_1095_p2;
reg   [0:0] tmp_31_i_reg_1706;
reg   [0:0] tmp_31_i_reg_1706_pp0_iter2_reg;
reg   [0:0] tmp_31_i_reg_1706_pp0_iter3_reg;
reg   [0:0] tmp_31_i_reg_1706_pp0_iter4_reg;
wire   [1:0] tmp_33_i_fu_1119_p2;
reg   [1:0] tmp_33_i_reg_1711;
reg   [1:0] tmp_33_i_reg_1711_pp0_iter3_reg;
wire   [0:0] tmp_132_fu_1150_p3;
reg   [0:0] tmp_132_reg_1716;
reg   [0:0] tmp_132_reg_1716_pp0_iter3_reg;
reg   [0:0] tmp_132_reg_1716_pp0_iter4_reg;
wire   [0:0] tmp_133_fu_1169_p3;
reg   [0:0] tmp_133_reg_1721;
reg   [0:0] tmp_133_reg_1721_pp0_iter3_reg;
reg   [0:0] tmp_133_reg_1721_pp0_iter4_reg;
wire   [0:0] tmp_134_fu_1188_p3;
reg   [0:0] tmp_134_reg_1726;
reg   [0:0] tmp_134_reg_1726_pp0_iter3_reg;
reg   [0:0] tmp_134_reg_1726_pp0_iter4_reg;
wire   [0:0] tmp_135_fu_1207_p3;
reg   [0:0] tmp_135_reg_1731;
reg   [0:0] tmp_135_reg_1731_pp0_iter3_reg;
reg   [0:0] tmp_135_reg_1731_pp0_iter4_reg;
reg   [127:0] tmp_111_fu_1406_p4;
reg   [127:0] tmp_111_reg_1736;
wire   [0:0] tmp_140_fu_1475_p3;
reg   [0:0] tmp_140_reg_1764;
wire   [0:0] tmp_141_fu_1494_p3;
reg   [0:0] tmp_141_reg_1769;
wire   [0:0] tmp_142_fu_1513_p3;
reg   [0:0] tmp_142_reg_1774;
wire   [0:0] tmp_143_fu_1532_p3;
reg   [0:0] tmp_143_reg_1779;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [4:0] ap_phi_mux_p_4_i_phi_fu_404_p6;
reg   [4:0] ap_phi_mux_p_0768_2_i_phi_fu_474_p4;
reg   [47:0] ap_phi_mux_tmp_V_8_phi_fu_461_p4;
wire   [47:0] ap_phi_reg_pp0_iter5_tmp_V_8_reg_457;
wire   [47:0] p_Result_68_1_i_fu_1550_p10;
wire   [4:0] p_i_fu_1565_p3;
wire   [4:0] ap_phi_reg_pp0_iter5_p_0768_2_i_reg_470;
wire   [63:0] tmp_54_cast_fu_953_p1;
wire   [63:0] tmp_49_cast_fu_1087_p1;
wire   [63:0] tmp_57_cast_fu_1416_p1;
wire   [63:0] tmp_39_fu_1431_p1;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] tmp_30_i_fu_1439_p2;
reg   [9:0] tmp_V_fu_184;
reg   [9:0] tmp_V_1_fu_188;
reg   [1:0] tmp_V_2_fu_192;
wire   [7:0] p_Result_60_i_fu_517_p3;
wire   [31:0] index_assign_9_i_fu_524_p1;
wire   [7:0] p_Result_60_1_i_fu_536_p3;
wire   [31:0] index_assign_9_1_i_fu_543_p1;
wire   [7:0] p_Result_60_2_i_fu_555_p3;
wire   [31:0] index_assign_9_2_i_fu_562_p1;
wire   [7:0] p_Result_60_3_i_fu_574_p3;
wire   [31:0] index_assign_9_3_i_fu_581_p1;
wire   [0:0] tmp_115_fu_585_p3;
wire   [0:0] tmp_114_fu_566_p3;
wire   [0:0] tmp_113_fu_547_p3;
wire   [0:0] tmp_112_fu_528_p3;
wire   [7:0] p_Result_60_4_i_fu_605_p3;
wire   [31:0] index_assign_9_4_i_fu_612_p1;
wire   [7:0] p_Result_60_5_i_fu_624_p3;
wire   [31:0] index_assign_9_5_i_fu_631_p1;
wire   [7:0] p_Result_60_6_i_fu_643_p3;
wire   [31:0] index_assign_9_6_i_fu_650_p1;
wire   [7:0] p_Result_60_7_i_fu_662_p3;
wire   [31:0] index_assign_9_7_i_fu_669_p1;
wire   [0:0] tmp_119_fu_673_p3;
wire   [0:0] tmp_118_fu_654_p3;
wire   [0:0] tmp_117_fu_635_p3;
wire   [0:0] tmp_116_fu_616_p3;
wire   [7:0] p_Result_60_8_i_fu_693_p3;
wire   [31:0] index_assign_9_8_i_fu_700_p1;
wire   [7:0] p_Result_60_9_i_fu_712_p3;
wire   [31:0] index_assign_9_9_i_fu_719_p1;
wire   [7:0] p_Result_60_i_42_fu_731_p3;
wire   [31:0] index_assign_9_i_43_fu_738_p1;
wire   [7:0] p_Result_60_10_i_fu_750_p3;
wire   [31:0] index_assign_9_10_i_fu_757_p1;
wire   [0:0] tmp_123_fu_761_p3;
wire   [0:0] tmp_122_fu_742_p3;
wire   [0:0] tmp_121_fu_723_p3;
wire   [0:0] tmp_120_fu_704_p3;
wire   [7:0] p_Result_60_11_i_fu_781_p3;
wire   [31:0] index_assign_9_11_i_fu_788_p1;
wire   [7:0] p_Result_60_12_i_fu_800_p3;
wire   [31:0] index_assign_9_12_i_fu_807_p1;
wire   [7:0] p_Result_60_13_i_fu_819_p3;
wire   [31:0] index_assign_9_13_i_fu_826_p1;
wire   [7:0] p_Result_60_14_i_fu_838_p3;
wire   [31:0] index_assign_9_14_i_fu_845_p1;
wire   [7:0] tmp_29_i_fu_857_p4;
wire  signed [3:0] tmp_14_i_fu_593_p5;
wire  signed [9:0] tmp_41_i_fu_881_p1;
wire   [9:0] tmp_35_fu_867_p1;
wire   [3:0] tmp_19_i_fu_681_p5;
wire   [7:0] tmp_32_i_fu_871_p4;
wire  signed [4:0] tmp_fu_899_p1;
wire   [4:0] tmp_1_fu_903_p4;
wire   [9:0] tmp_42_i_fu_885_p2;
wire   [4:0] tmp_130_fu_919_p4;
wire  signed [8:0] tmp_128_fu_891_p1;
wire   [8:0] tmp_129_fu_895_p1;
wire   [8:0] tmp_131_fu_933_p2;
wire   [10:0] tmp_53_cast_fu_939_p3;
wire   [10:0] tmp_47_i_cast_fu_929_p1;
wire   [10:0] tmp_36_fu_947_p2;
wire  signed [3:0] tmp_24_i_fu_769_p5;
wire  signed [9:0] tmp_41_1_i_fu_961_p1;
wire   [0:0] tmp_127_fu_849_p3;
wire   [0:0] tmp_126_fu_830_p3;
wire   [0:0] tmp_125_fu_811_p3;
wire   [0:0] tmp_124_fu_792_p3;
wire   [3:0] p_Result_63_1_i_fu_971_p5;
wire  signed [4:0] tmp_2_fu_991_p1;
wire   [9:0] tmp_42_1_i_fu_965_p2;
wire   [4:0] tmp_138_fu_1001_p4;
wire  signed [8:0] tmp_136_fu_983_p1;
wire   [8:0] tmp_137_fu_987_p1;
wire   [8:0] tmp_139_fu_1015_p2;
wire   [10:0] tmp_56_cast_fu_1021_p3;
wire   [10:0] tmp_47_1_i_cast_fu_1011_p1;
wire   [2:0] tmp_99_fu_1055_p4;
wire   [7:0] ySFASTScale2_V_fu_1035_p4;
wire   [9:0] tmp_33_fu_1069_p3;
wire   [10:0] tmp_48_cast_fu_1077_p1;
wire   [10:0] tmp_3_i_i_cast_fu_1065_p1;
wire   [10:0] tmp_34_fu_1081_p2;
wire   [1:0] tmp_6_fu_1125_p5;
wire   [6:0] tmp_7_fu_1139_p3;
wire   [127:0] tmp_6_fu_1125_p6;
wire   [31:0] index_assign_11_0_i_fu_1146_p1;
wire   [6:0] tmp_8_fu_1158_p3;
wire   [31:0] index_assign_11_0_1_s_fu_1165_p1;
wire   [6:0] tmp_9_fu_1177_p3;
wire   [31:0] index_assign_11_0_2_s_fu_1184_p1;
wire   [6:0] tmp_10_fu_1196_p3;
wire   [31:0] index_assign_11_0_3_s_fu_1203_p1;
wire   [6:0] tmp_s_fu_1228_p3;
wire   [127:0] tmpDataSFASTScale2_V_fu_1215_p6;
wire   [31:0] index_assign_1_i_i_fu_1235_p1;
wire   [6:0] tmp_3_fu_1247_p3;
wire   [31:0] index_assign_1_1_i_i_fu_1254_p1;
wire   [6:0] tmp_4_fu_1266_p3;
wire   [31:0] index_assign_1_2_i_i_fu_1273_p1;
wire   [6:0] tmp_5_fu_1285_p3;
wire   [31:0] index_assign_1_3_i_i_fu_1292_p1;
wire   [0:0] tmp_103_fu_1296_p3;
wire   [0:0] tmp_102_fu_1277_p3;
wire   [0:0] tmp_101_fu_1258_p3;
wire   [0:0] tmp_100_fu_1239_p3;
wire   [3:0] p_Result_13_3_i_i_fu_1304_p5;
wire   [0:0] cmpFlgSFASTScale2_V_fu_1316_p2;
wire   [3:0] tmp_9_i_i_fu_1322_p1;
wire   [3:0] tmpTmpDataSFASTScale_fu_1326_p2;
wire   [0:0] tmp_104_fu_1332_p1;
wire   [63:0] p_Repl2_5_i_i_fu_1336_p1;
wire   [0:0] tmp_106_fu_1350_p3;
reg   [127:0] tmp_105_fu_1340_p4;
wire   [63:0] p_Repl2_5_1_i_i_fu_1358_p1;
wire   [0:0] tmp_108_fu_1372_p3;
reg   [127:0] tmp_107_fu_1362_p4;
wire   [63:0] p_Repl2_5_2_i_i_fu_1380_p1;
wire   [0:0] tmp_110_fu_1394_p3;
reg   [127:0] tmp_109_fu_1384_p4;
wire   [63:0] p_Repl2_5_3_i_i_fu_1402_p1;
wire   [8:0] tmp_144_fu_1427_p1;
wire   [6:0] tmp_12_fu_1464_p3;
wire   [127:0] tmp_11_fu_1451_p6;
wire   [31:0] index_assign_11_1_i_fu_1471_p1;
wire   [6:0] tmp_13_fu_1483_p3;
wire   [31:0] index_assign_11_1_1_s_fu_1490_p1;
wire   [6:0] tmp_14_fu_1502_p3;
wire   [31:0] index_assign_11_1_2_s_fu_1509_p1;
wire   [6:0] tmp_15_fu_1521_p3;
wire   [31:0] index_assign_11_1_3_s_fu_1528_p1;
wire   [39:0] tmp_38_fu_1540_p4;
reg   [4:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_166;
reg    ap_condition_358;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 resetCnt_V = 10'd0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_return_preg = 5'd0;
end

rwSAEPerfectLoopSIfE #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
glPLSFASTSliceScale2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(glPLSFASTSliceScale2_3_address0),
    .ce0(glPLSFASTSliceScale2_3_ce0),
    .q0(glPLSFASTSliceScale2_3_q0),
    .address1(glPLSFASTSliceScale2_3_address1),
    .ce1(glPLSFASTSliceScale2_3_ce1),
    .we1(glPLSFASTSliceScale2_3_we1),
    .d1(glPLSFASTSliceScale2_3_d1),
    .q1(glPLSFASTSliceScale2_3_q1)
);

rwSAEPerfectLoopSIfE #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
glPLSFASTSliceScale2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(glPLSFASTSliceScale2_2_address0),
    .ce0(glPLSFASTSliceScale2_2_ce0),
    .q0(glPLSFASTSliceScale2_2_q0),
    .address1(glPLSFASTSliceScale2_2_address1),
    .ce1(glPLSFASTSliceScale2_2_ce1),
    .we1(glPLSFASTSliceScale2_2_we1),
    .d1(glPLSFASTSliceScale2_2_d1),
    .q1(glPLSFASTSliceScale2_2_q1)
);

rwSAEPerfectLoopSIfE #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
glPLSFASTSliceScale2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(glPLSFASTSliceScale2_1_address0),
    .ce0(glPLSFASTSliceScale2_1_ce0),
    .q0(glPLSFASTSliceScale2_1_q0),
    .address1(glPLSFASTSliceScale2_1_address1),
    .ce1(glPLSFASTSliceScale2_1_ce1),
    .we1(glPLSFASTSliceScale2_1_we1),
    .d1(glPLSFASTSliceScale2_1_d1),
    .q1(glPLSFASTSliceScale2_1_q1)
);

rwSAEPerfectLoopSIfE #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
glPLSFASTSliceScale2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(glPLSFASTSliceScale2_address0),
    .ce0(glPLSFASTSliceScale2_ce0),
    .q0(glPLSFASTSliceScale2_q0),
    .address1(glPLSFASTSliceScale2_address1),
    .ce1(glPLSFASTSliceScale2_ce1),
    .we1(glPLSFASTSliceScale2_we1),
    .d1(glPLSFASTSliceScale2_d1),
    .q1(glPLSFASTSliceScale2_q1)
);

SFAST_process_datMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 128 ))
SFAST_process_datMgi_U20(
    .din0(glPLSFASTSliceScale2_3_q0),
    .din1(glPLSFASTSliceScale2_2_q0),
    .din2(glPLSFASTSliceScale2_1_q0),
    .din3(glPLSFASTSliceScale2_q0),
    .din4(tmp_6_fu_1125_p5),
    .dout(tmp_6_fu_1125_p6)
);

SFAST_process_datMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 128 ))
SFAST_process_datMgi_U21(
    .din0(glPLSFASTSliceScale2_3_q0),
    .din1(glPLSFASTSliceScale2_2_q0),
    .din2(glPLSFASTSliceScale2_1_q0),
    .din3(glPLSFASTSliceScale2_q0),
    .din4(tmp_V_12_reg_1669),
    .dout(tmpDataSFASTScale2_V_fu_1215_p6)
);

SFAST_process_datMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 128 ))
SFAST_process_datMgi_U22(
    .din0(glPLSFASTSliceScale2_3_q1),
    .din1(glPLSFASTSliceScale2_2_q1),
    .din2(glPLSFASTSliceScale2_1_q1),
    .din3(glPLSFASTSliceScale2_q1),
    .din4(tmp_33_i_reg_1711_pp0_iter3_reg),
    .dout(tmp_11_fu_1451_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 5'd0;
    end else begin
        if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_return_preg <= ap_phi_mux_p_0768_2_i_phi_fu_474_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_44_reg_1624 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_4_i_reg_400 <= i_V_reg_1619;
    end else if ((((tmp_i_44_reg_1624 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_4_i_reg_400 <= 5'd30;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sizeStreamOut1_V_wri_reg_429 <= ap_phi_mux_p_0768_2_i_phi_fu_474_p4;
    end else if ((((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        sizeStreamOut1_V_wri_reg_429 <= 5'd12;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_s_reg_443 <= ap_phi_mux_tmp_V_8_phi_fu_461_p4;
    end else if ((((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_V_s_reg_443 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1595 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        glPLSFASTSliceScale2_4_reg_1682 <= tmp_49_cast_fu_1087_p1;
        glPLSFASTSliceScale2_5_reg_1688 <= tmp_49_cast_fu_1087_p1;
        glPLSFASTSliceScale2_6_reg_1694 <= tmp_49_cast_fu_1087_p1;
        glPLSFASTSliceScale2_7_reg_1700 <= tmp_49_cast_fu_1087_p1;
        tmp_31_i_reg_1706 <= tmp_31_i_fu_1095_p2;
        tmp_V_12_reg_1669 <= idxStream_V_V_dout;
        xNewIdxSFASTScale2_V_reg_1674 <= {{xStream_V_V_dout[6:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        glPLSFASTSliceScale2_4_reg_1682_pp0_iter2_reg <= glPLSFASTSliceScale2_4_reg_1682;
        glPLSFASTSliceScale2_5_reg_1688_pp0_iter2_reg <= glPLSFASTSliceScale2_5_reg_1688;
        glPLSFASTSliceScale2_6_reg_1694_pp0_iter2_reg <= glPLSFASTSliceScale2_6_reg_1694;
        glPLSFASTSliceScale2_7_reg_1700_pp0_iter2_reg <= glPLSFASTSliceScale2_7_reg_1700;
        tmp_132_reg_1716_pp0_iter3_reg <= tmp_132_reg_1716;
        tmp_132_reg_1716_pp0_iter4_reg <= tmp_132_reg_1716_pp0_iter3_reg;
        tmp_133_reg_1721_pp0_iter3_reg <= tmp_133_reg_1721;
        tmp_133_reg_1721_pp0_iter4_reg <= tmp_133_reg_1721_pp0_iter3_reg;
        tmp_134_reg_1726_pp0_iter3_reg <= tmp_134_reg_1726;
        tmp_134_reg_1726_pp0_iter4_reg <= tmp_134_reg_1726_pp0_iter3_reg;
        tmp_135_reg_1731_pp0_iter3_reg <= tmp_135_reg_1731;
        tmp_135_reg_1731_pp0_iter4_reg <= tmp_135_reg_1731_pp0_iter3_reg;
        tmp_31_i_reg_1706_pp0_iter2_reg <= tmp_31_i_reg_1706;
        tmp_31_i_reg_1706_pp0_iter3_reg <= tmp_31_i_reg_1706_pp0_iter2_reg;
        tmp_31_i_reg_1706_pp0_iter4_reg <= tmp_31_i_reg_1706_pp0_iter3_reg;
        tmp_33_i_reg_1711_pp0_iter3_reg <= tmp_33_i_reg_1711;
        tmp_37_reg_1664_pp0_iter2_reg <= tmp_37_reg_1664;
        tmp_51_cast_i_reg_1656_pp0_iter2_reg <= tmp_51_cast_i_reg_1656;
        tmp_51_cast_i_reg_1656_pp0_iter3_reg <= tmp_51_cast_i_reg_1656_pp0_iter2_reg;
        tmp_V_12_reg_1669_pp0_iter2_reg <= tmp_V_12_reg_1669;
        tmp_i_44_reg_1624_pp0_iter2_reg <= tmp_i_44_reg_1624_pp0_iter1_reg;
        tmp_i_44_reg_1624_pp0_iter3_reg <= tmp_i_44_reg_1624_pp0_iter2_reg;
        tmp_i_44_reg_1624_pp0_iter4_reg <= tmp_i_44_reg_1624_pp0_iter3_reg;
        tmp_i_reg_1595_pp0_iter2_reg <= tmp_i_reg_1595_pp0_iter1_reg;
        tmp_i_reg_1595_pp0_iter3_reg <= tmp_i_reg_1595_pp0_iter2_reg;
        tmp_i_reg_1595_pp0_iter4_reg <= tmp_i_reg_1595_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_V_reg_1619 <= i_V_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_483_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_57_i_reg_1599 <= {{ap_phi_mux_p_4_i_phi_fu_404_p6[4:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        resetCnt_V <= tmp_30_i_fu_1439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1595_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_111_reg_1736 <= tmp_111_fu_1406_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1595_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_132_reg_1716 <= tmp_132_fu_1150_p3;
        tmp_133_reg_1721 <= tmp_133_fu_1169_p3;
        tmp_134_reg_1726 <= tmp_134_fu_1188_p3;
        tmp_135_reg_1731 <= tmp_135_fu_1207_p3;
        tmp_33_i_reg_1711 <= tmp_33_i_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1595_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_140_reg_1764 <= tmp_140_fu_1475_p3;
        tmp_141_reg_1769 <= tmp_141_fu_1494_p3;
        tmp_142_reg_1774 <= tmp_142_fu_1513_p3;
        tmp_143_reg_1779 <= tmp_143_fu_1532_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1595 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_36_cast_i_reg_1628 <= tmp_36_cast_i_fu_913_p2;
        tmp_37_reg_1664 <= tmp_37_fu_1029_p2;
        tmp_51_cast_i_reg_1656 <= tmp_51_cast_i_fu_995_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_1_fu_188 <= yStream_V_V_dout;
        tmp_V_2_fu_192 <= idxStream_V_V_dout;
        tmp_V_fu_184 <= xStream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_44_reg_1624 <= tmp_i_44_fu_505_p2;
        tmp_i_44_reg_1624_pp0_iter1_reg <= tmp_i_44_reg_1624;
        tmp_i_reg_1595 <= tmp_i_fu_483_p2;
        tmp_i_reg_1595_pp0_iter1_reg <= tmp_i_reg_1595;
    end
end

always @ (*) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((tmp_i_reg_1595_pp0_iter4_reg == 1'd0)) begin
            ap_phi_mux_p_0768_2_i_phi_fu_474_p4 = sizeStreamOut1_V_wri_reg_429;
        end else if ((tmp_i_reg_1595_pp0_iter4_reg == 1'd1)) begin
            ap_phi_mux_p_0768_2_i_phi_fu_474_p4 = p_i_fu_1565_p3;
        end else begin
            ap_phi_mux_p_0768_2_i_phi_fu_474_p4 = ap_phi_reg_pp0_iter5_p_0768_2_i_reg_470;
        end
    end else begin
        ap_phi_mux_p_0768_2_i_phi_fu_474_p4 = ap_phi_reg_pp0_iter5_p_0768_2_i_reg_470;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((tmp_i_44_reg_1624 == 1'd0)) begin
            ap_phi_mux_p_4_i_phi_fu_404_p6 = 5'd30;
        end else if ((tmp_i_44_reg_1624 == 1'd1)) begin
            ap_phi_mux_p_4_i_phi_fu_404_p6 = i_V_reg_1619;
        end else begin
            ap_phi_mux_p_4_i_phi_fu_404_p6 = p_4_i_reg_400;
        end
    end else begin
        ap_phi_mux_p_4_i_phi_fu_404_p6 = p_4_i_reg_400;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((tmp_i_reg_1595_pp0_iter4_reg == 1'd0)) begin
            ap_phi_mux_tmp_V_8_phi_fu_461_p4 = p_Result_68_1_i_fu_1550_p10;
        end else if ((tmp_i_reg_1595_pp0_iter4_reg == 1'd1)) begin
            ap_phi_mux_tmp_V_8_phi_fu_461_p4 = tmp_V_s_reg_443;
        end else begin
            ap_phi_mux_tmp_V_8_phi_fu_461_p4 = ap_phi_reg_pp0_iter5_tmp_V_8_reg_457;
        end
    end else begin
        ap_phi_mux_tmp_V_8_phi_fu_461_p4 = ap_phi_reg_pp0_iter5_tmp_V_8_reg_457;
    end
end

always @ (*) begin
    if (((tmp_i_44_fu_505_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_return = ap_phi_mux_p_0768_2_i_phi_fu_474_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((tmp_i_reg_1595 == 1'd1)) begin
            glPLSFASTSliceScale2_1_address0 = tmp_49_cast_fu_1087_p1;
        end else if ((tmp_i_reg_1595 == 1'd0)) begin
            glPLSFASTSliceScale2_1_address0 = tmp_54_cast_fu_953_p1;
        end else begin
            glPLSFASTSliceScale2_1_address0 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3))) begin
            glPLSFASTSliceScale2_1_address1 = tmp_39_fu_1431_p1;
        end else if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2))) begin
            glPLSFASTSliceScale2_1_address1 = glPLSFASTSliceScale2_6_reg_1694_pp0_iter2_reg;
        end else if ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0)) begin
            glPLSFASTSliceScale2_1_address1 = tmp_57_cast_fu_1416_p1;
        end else begin
            glPLSFASTSliceScale2_1_address1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_1_ce0 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_1_ce1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_358)) begin
        if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3)) begin
            glPLSFASTSliceScale2_1_d1 = 128'd0;
        end else if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2)) begin
            glPLSFASTSliceScale2_1_d1 = tmp_111_reg_1736;
        end else begin
            glPLSFASTSliceScale2_1_d1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_1_we1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((tmp_i_reg_1595 == 1'd1)) begin
            glPLSFASTSliceScale2_2_address0 = tmp_49_cast_fu_1087_p1;
        end else if ((tmp_i_reg_1595 == 1'd0)) begin
            glPLSFASTSliceScale2_2_address0 = tmp_54_cast_fu_953_p1;
        end else begin
            glPLSFASTSliceScale2_2_address0 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2))) begin
            glPLSFASTSliceScale2_2_address1 = tmp_39_fu_1431_p1;
        end else if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1))) begin
            glPLSFASTSliceScale2_2_address1 = glPLSFASTSliceScale2_5_reg_1688_pp0_iter2_reg;
        end else if ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0)) begin
            glPLSFASTSliceScale2_2_address1 = tmp_57_cast_fu_1416_p1;
        end else begin
            glPLSFASTSliceScale2_2_address1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_2_ce0 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_2_ce1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_358)) begin
        if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2)) begin
            glPLSFASTSliceScale2_2_d1 = 128'd0;
        end else if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1)) begin
            glPLSFASTSliceScale2_2_d1 = tmp_111_reg_1736;
        end else begin
            glPLSFASTSliceScale2_2_d1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_2_we1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((tmp_i_reg_1595 == 1'd1)) begin
            glPLSFASTSliceScale2_3_address0 = tmp_49_cast_fu_1087_p1;
        end else if ((tmp_i_reg_1595 == 1'd0)) begin
            glPLSFASTSliceScale2_3_address0 = tmp_54_cast_fu_953_p1;
        end else begin
            glPLSFASTSliceScale2_3_address0 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1))) begin
            glPLSFASTSliceScale2_3_address1 = tmp_39_fu_1431_p1;
        end else if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0))) begin
            glPLSFASTSliceScale2_3_address1 = glPLSFASTSliceScale2_4_reg_1682_pp0_iter2_reg;
        end else if ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0)) begin
            glPLSFASTSliceScale2_3_address1 = tmp_57_cast_fu_1416_p1;
        end else begin
            glPLSFASTSliceScale2_3_address1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_3_ce0 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_3_ce1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_358)) begin
        if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1)) begin
            glPLSFASTSliceScale2_3_d1 = 128'd0;
        end else if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0)) begin
            glPLSFASTSliceScale2_3_d1 = tmp_111_reg_1736;
        end else begin
            glPLSFASTSliceScale2_3_d1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_3_we1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((tmp_i_reg_1595 == 1'd1)) begin
            glPLSFASTSliceScale2_address0 = tmp_49_cast_fu_1087_p1;
        end else if ((tmp_i_reg_1595 == 1'd0)) begin
            glPLSFASTSliceScale2_address0 = tmp_54_cast_fu_953_p1;
        end else begin
            glPLSFASTSliceScale2_address0 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0))) begin
            glPLSFASTSliceScale2_address1 = tmp_39_fu_1431_p1;
        end else if (((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3))) begin
            glPLSFASTSliceScale2_address1 = glPLSFASTSliceScale2_7_reg_1700_pp0_iter2_reg;
        end else if ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0)) begin
            glPLSFASTSliceScale2_address1 = tmp_57_cast_fu_1416_p1;
        end else begin
            glPLSFASTSliceScale2_address1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_ce0 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_ce1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_358)) begin
        if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0)) begin
            glPLSFASTSliceScale2_d1 = 128'd0;
        end else if ((tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3)) begin
            glPLSFASTSliceScale2_d1 = tmp_111_reg_1736;
        end else begin
            glPLSFASTSliceScale2_d1 = 'bx;
        end
    end else begin
        glPLSFASTSliceScale2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (tmp_V_12_reg_1669_pp0_iter2_reg == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        glPLSFASTSliceScale2_we1 = 1'b1;
    end else begin
        glPLSFASTSliceScale2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        idxStream_V_V_blk_n = idxStream_V_V_empty_n;
    end else begin
        idxStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxStream_V_V_read = 1'b1;
    end else begin
        idxStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        outputDataStream_V_V_blk_n = outputDataStream_V_V_full_n;
    end else begin
        outputDataStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outputDataStream_V_V_write = 1'b1;
    end else begin
        outputDataStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        polStream_V_V_blk_n = polStream_V_V_empty_n;
    end else begin
        polStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        polStream_V_V_read = 1'b1;
    end else begin
        polStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        sizeStreamOut2_V_out_blk_n = sizeStreamOut2_V_out_full_n;
    end else begin
        sizeStreamOut2_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sizeStreamOut2_V_out_write = 1'b1;
    end else begin
        sizeStreamOut2_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        tsStream_V_V_blk_n = tsStream_V_V_empty_n;
    end else begin
        tsStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsStream_V_V_read = 1'b1;
    end else begin
        tsStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        xStream_V_V_blk_n = xStream_V_V_empty_n;
    end else begin
        xStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xStream_V_V_read = 1'b1;
    end else begin
        xStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        yStream_V_V_blk_n = yStream_V_V_empty_n;
    end else begin
        yStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_reg_1595 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yStream_V_V_read = 1'b1;
    end else begin
        yStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (((sizeStreamOut2_V_out_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)) | ((outputDataStream_V_V_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_i_reg_1595 == 1'd1) & (idxStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (tsStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (polStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (yStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (xStream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (((sizeStreamOut2_V_out_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)) | ((outputDataStream_V_V_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_i_reg_1595 == 1'd1) & (idxStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (tsStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (polStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (yStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (xStream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (((sizeStreamOut2_V_out_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)) | ((outputDataStream_V_V_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_i_reg_1595 == 1'd1) & (idxStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (tsStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (polStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (yStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (xStream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((tmp_i_reg_1595 == 1'd1) & (idxStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (tsStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (polStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (yStream_V_V_empty_n == 1'b0)) | ((tmp_i_reg_1595 == 1'd1) & (xStream_V_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = (((sizeStreamOut2_V_out_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)) | ((outputDataStream_V_V_full_n == 1'b0) & (tmp_i_44_reg_1624_pp0_iter4_reg == 1'd0)));
end

always @ (*) begin
    ap_condition_166 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_358 = ((tmp_i_reg_1595_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter5_p_0768_2_i_reg_470 = 'bx;

assign ap_phi_reg_pp0_iter5_tmp_V_8_reg_457 = 'bx;

assign cmpFlgSFASTScale2_V_fu_1316_p2 = ((p_Result_13_3_i_i_fu_1304_p5 != 4'd15) ? 1'b1 : 1'b0);

assign i_V_fu_499_p2 = (ap_phi_mux_p_4_i_phi_fu_404_p6 + 5'd2);

assign index_assign_11_0_1_s_fu_1165_p1 = tmp_8_fu_1158_p3;

assign index_assign_11_0_2_s_fu_1184_p1 = tmp_9_fu_1177_p3;

assign index_assign_11_0_3_s_fu_1203_p1 = tmp_10_fu_1196_p3;

assign index_assign_11_0_i_fu_1146_p1 = tmp_7_fu_1139_p3;

assign index_assign_11_1_1_s_fu_1490_p1 = tmp_13_fu_1483_p3;

assign index_assign_11_1_2_s_fu_1509_p1 = tmp_14_fu_1502_p3;

assign index_assign_11_1_3_s_fu_1528_p1 = tmp_15_fu_1521_p3;

assign index_assign_11_1_i_fu_1471_p1 = tmp_12_fu_1464_p3;

assign index_assign_1_1_i_i_fu_1254_p1 = tmp_3_fu_1247_p3;

assign index_assign_1_2_i_i_fu_1273_p1 = tmp_4_fu_1266_p3;

assign index_assign_1_3_i_i_fu_1292_p1 = tmp_5_fu_1285_p3;

assign index_assign_1_i_i_fu_1235_p1 = tmp_s_fu_1228_p3;

assign index_assign_9_10_i_fu_757_p1 = p_Result_60_10_i_fu_750_p3;

assign index_assign_9_11_i_fu_788_p1 = p_Result_60_11_i_fu_781_p3;

assign index_assign_9_12_i_fu_807_p1 = p_Result_60_12_i_fu_800_p3;

assign index_assign_9_13_i_fu_826_p1 = p_Result_60_13_i_fu_819_p3;

assign index_assign_9_14_i_fu_845_p1 = p_Result_60_14_i_fu_838_p3;

assign index_assign_9_1_i_fu_543_p1 = p_Result_60_1_i_fu_536_p3;

assign index_assign_9_2_i_fu_562_p1 = p_Result_60_2_i_fu_555_p3;

assign index_assign_9_3_i_fu_581_p1 = p_Result_60_3_i_fu_574_p3;

assign index_assign_9_4_i_fu_612_p1 = p_Result_60_4_i_fu_605_p3;

assign index_assign_9_5_i_fu_631_p1 = p_Result_60_5_i_fu_624_p3;

assign index_assign_9_6_i_fu_650_p1 = p_Result_60_6_i_fu_643_p3;

assign index_assign_9_7_i_fu_669_p1 = p_Result_60_7_i_fu_662_p3;

assign index_assign_9_8_i_fu_700_p1 = p_Result_60_8_i_fu_693_p3;

assign index_assign_9_9_i_fu_719_p1 = p_Result_60_9_i_fu_712_p3;

assign index_assign_9_i_43_fu_738_p1 = p_Result_60_i_42_fu_731_p3;

assign index_assign_9_i_fu_524_p1 = p_Result_60_i_fu_517_p3;

assign outputDataStream_V_V_din = ap_phi_mux_tmp_V_8_phi_fu_461_p4;

assign p_Repl2_5_1_i_i_fu_1358_p1 = tmp_106_fu_1350_p3;

assign p_Repl2_5_2_i_i_fu_1380_p1 = tmp_108_fu_1372_p3;

assign p_Repl2_5_3_i_i_fu_1402_p1 = tmp_110_fu_1394_p3;

assign p_Repl2_5_i_i_fu_1336_p1 = tmp_104_fu_1332_p1;

assign p_Result_13_3_i_i_fu_1304_p5 = {{{{tmp_103_fu_1296_p3}, {tmp_102_fu_1277_p3}}, {tmp_101_fu_1258_p3}}, {tmp_100_fu_1239_p3}};

assign p_Result_60_10_i_fu_750_p3 = {{p_Result_57_i_reg_1599}, {4'd11}};

assign p_Result_60_11_i_fu_781_p3 = {{p_Result_57_i_reg_1599}, {4'd12}};

assign p_Result_60_12_i_fu_800_p3 = {{p_Result_57_i_reg_1599}, {4'd13}};

assign p_Result_60_13_i_fu_819_p3 = {{p_Result_57_i_reg_1599}, {4'd14}};

assign p_Result_60_14_i_fu_838_p3 = {{p_Result_57_i_reg_1599}, {4'd15}};

assign p_Result_60_1_i_fu_536_p3 = {{p_Result_57_i_reg_1599}, {4'd1}};

assign p_Result_60_2_i_fu_555_p3 = {{p_Result_57_i_reg_1599}, {4'd2}};

assign p_Result_60_3_i_fu_574_p3 = {{p_Result_57_i_reg_1599}, {4'd3}};

assign p_Result_60_4_i_fu_605_p3 = {{p_Result_57_i_reg_1599}, {4'd4}};

assign p_Result_60_5_i_fu_624_p3 = {{p_Result_57_i_reg_1599}, {4'd5}};

assign p_Result_60_6_i_fu_643_p3 = {{p_Result_57_i_reg_1599}, {4'd6}};

assign p_Result_60_7_i_fu_662_p3 = {{p_Result_57_i_reg_1599}, {4'd7}};

assign p_Result_60_8_i_fu_693_p3 = {{p_Result_57_i_reg_1599}, {4'd8}};

assign p_Result_60_9_i_fu_712_p3 = {{p_Result_57_i_reg_1599}, {4'd9}};

assign p_Result_60_i_42_fu_731_p3 = {{p_Result_57_i_reg_1599}, {4'd10}};

assign p_Result_60_i_fu_517_p3 = {{p_Result_57_i_reg_1599}, {4'd0}};

assign p_Result_63_1_i_fu_971_p5 = {{{{tmp_127_fu_849_p3}, {tmp_126_fu_830_p3}}, {tmp_125_fu_811_p3}}, {tmp_124_fu_792_p3}};

assign p_Result_68_1_i_fu_1550_p10 = {{{{{{{{{tmp_143_reg_1779}, {tmp_142_reg_1774}}, {tmp_141_reg_1769}}, {tmp_140_reg_1764}}, {tmp_135_reg_1731_pp0_iter4_reg}}, {tmp_134_reg_1726_pp0_iter4_reg}}, {tmp_133_reg_1721_pp0_iter4_reg}}, {tmp_132_reg_1716_pp0_iter4_reg}}, {tmp_38_fu_1540_p4}};

assign p_i_fu_1565_p3 = ((tmp_31_i_reg_1706_pp0_iter4_reg[0:0] === 1'b1) ? 5'd0 : sizeStreamOut1_V_wri_reg_429);

assign sizeStreamOut2_V_out_din = ap_phi_mux_p_0768_2_i_phi_fu_474_p4;

assign tmpTmpDataSFASTScale_fu_1326_p2 = (tmp_9_i_i_fu_1322_p1 + p_Result_13_3_i_i_fu_1304_p5);

assign tmp_100_fu_1239_p3 = tmpDataSFASTScale2_V_fu_1215_p6[index_assign_1_i_i_fu_1235_p1];

assign tmp_101_fu_1258_p3 = tmpDataSFASTScale2_V_fu_1215_p6[index_assign_1_1_i_i_fu_1254_p1];

assign tmp_102_fu_1277_p3 = tmpDataSFASTScale2_V_fu_1215_p6[index_assign_1_2_i_i_fu_1273_p1];

assign tmp_103_fu_1296_p3 = tmpDataSFASTScale2_V_fu_1215_p6[index_assign_1_3_i_i_fu_1292_p1];

assign tmp_104_fu_1332_p1 = tmpTmpDataSFASTScale_fu_1326_p2[0:0];

always @ (*) begin
    tmp_105_fu_1340_p4 = tmpDataSFASTScale2_V_fu_1215_p6;
    tmp_105_fu_1340_p4[index_assign_1_i_i_fu_1235_p1] = |(p_Repl2_5_i_i_fu_1336_p1);
end

assign tmp_106_fu_1350_p3 = tmpTmpDataSFASTScale_fu_1326_p2[32'd1];

always @ (*) begin
    tmp_107_fu_1362_p4 = tmp_105_fu_1340_p4;
    tmp_107_fu_1362_p4[index_assign_1_1_i_i_fu_1254_p1] = |(p_Repl2_5_1_i_i_fu_1358_p1);
end

assign tmp_108_fu_1372_p3 = tmpTmpDataSFASTScale_fu_1326_p2[32'd2];

always @ (*) begin
    tmp_109_fu_1384_p4 = tmp_107_fu_1362_p4;
    tmp_109_fu_1384_p4[index_assign_1_2_i_i_fu_1273_p1] = |(p_Repl2_5_2_i_i_fu_1380_p1);
end

assign tmp_10_fu_1196_p3 = {{tmp_36_cast_i_reg_1628}, {2'd3}};

assign tmp_110_fu_1394_p3 = tmpTmpDataSFASTScale_fu_1326_p2[32'd3];

always @ (*) begin
    tmp_111_fu_1406_p4 = tmp_109_fu_1384_p4;
    tmp_111_fu_1406_p4[index_assign_1_3_i_i_fu_1292_p1] = |(p_Repl2_5_3_i_i_fu_1402_p1);
end

assign tmp_112_fu_528_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_i_fu_524_p1];

assign tmp_113_fu_547_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_1_i_fu_543_p1];

assign tmp_114_fu_566_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_2_i_fu_562_p1];

assign tmp_115_fu_585_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_3_i_fu_581_p1];

assign tmp_116_fu_616_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_4_i_fu_612_p1];

assign tmp_117_fu_635_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_5_i_fu_631_p1];

assign tmp_118_fu_654_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_6_i_fu_650_p1];

assign tmp_119_fu_673_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_7_i_fu_669_p1];

assign tmp_120_fu_704_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_8_i_fu_700_p1];

assign tmp_121_fu_723_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_9_i_fu_719_p1];

assign tmp_122_fu_742_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_i_43_fu_738_p1];

assign tmp_123_fu_761_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_10_i_fu_757_p1];

assign tmp_124_fu_792_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_11_i_fu_788_p1];

assign tmp_125_fu_811_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_12_i_fu_807_p1];

assign tmp_126_fu_830_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_13_i_fu_826_p1];

assign tmp_127_fu_849_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_9_14_i_fu_845_p1];

assign tmp_128_fu_891_p1 = $signed(tmp_19_i_fu_681_p5);

assign tmp_129_fu_895_p1 = tmp_32_i_fu_871_p4;

assign tmp_12_fu_1464_p3 = {{tmp_51_cast_i_reg_1656_pp0_iter3_reg}, {2'd0}};

assign tmp_130_fu_919_p4 = {{tmp_42_i_fu_885_p2[9:5]}};

assign tmp_131_fu_933_p2 = ($signed(tmp_128_fu_891_p1) + $signed(tmp_129_fu_895_p1));

assign tmp_132_fu_1150_p3 = tmp_6_fu_1125_p6[index_assign_11_0_i_fu_1146_p1];

assign tmp_133_fu_1169_p3 = tmp_6_fu_1125_p6[index_assign_11_0_1_s_fu_1165_p1];

assign tmp_134_fu_1188_p3 = tmp_6_fu_1125_p6[index_assign_11_0_2_s_fu_1184_p1];

assign tmp_135_fu_1207_p3 = tmp_6_fu_1125_p6[index_assign_11_0_3_s_fu_1203_p1];

assign tmp_136_fu_983_p1 = $signed(p_Result_63_1_i_fu_971_p5);

assign tmp_137_fu_987_p1 = tmp_32_i_fu_871_p4;

assign tmp_138_fu_1001_p4 = {{tmp_42_1_i_fu_965_p2[9:5]}};

assign tmp_139_fu_1015_p2 = ($signed(tmp_136_fu_983_p1) + $signed(tmp_137_fu_987_p1));

assign tmp_13_fu_1483_p3 = {{tmp_51_cast_i_reg_1656_pp0_iter3_reg}, {2'd1}};

assign tmp_140_fu_1475_p3 = tmp_11_fu_1451_p6[index_assign_11_1_i_fu_1471_p1];

assign tmp_141_fu_1494_p3 = tmp_11_fu_1451_p6[index_assign_11_1_1_s_fu_1490_p1];

assign tmp_142_fu_1513_p3 = tmp_11_fu_1451_p6[index_assign_11_1_2_s_fu_1509_p1];

assign tmp_143_fu_1532_p3 = tmp_11_fu_1451_p6[index_assign_11_1_3_s_fu_1528_p1];

assign tmp_144_fu_1427_p1 = resetCnt_V[8:0];

assign tmp_14_fu_1502_p3 = {{tmp_51_cast_i_reg_1656_pp0_iter3_reg}, {2'd2}};

assign tmp_14_i_fu_593_p5 = {{{{tmp_115_fu_585_p3}, {tmp_114_fu_566_p3}}, {tmp_113_fu_547_p3}}, {tmp_112_fu_528_p3}};

assign tmp_15_fu_1521_p3 = {{tmp_51_cast_i_reg_1656_pp0_iter3_reg}, {2'd3}};

assign tmp_19_i_fu_681_p5 = {{{{tmp_119_fu_673_p3}, {tmp_118_fu_654_p3}}, {tmp_117_fu_635_p3}}, {tmp_116_fu_616_p3}};

assign tmp_1_fu_903_p4 = {{tmp_V_fu_184[6:2]}};

assign tmp_24_i_fu_769_p5 = {{{{tmp_123_fu_761_p3}, {tmp_122_fu_742_p3}}, {tmp_121_fu_723_p3}}, {tmp_120_fu_704_p3}};

assign tmp_29_i_fu_857_p4 = {{tmp_V_fu_184[9:2]}};

assign tmp_2_fu_991_p1 = tmp_24_i_fu_769_p5;

assign tmp_30_i_fu_1439_p2 = (resetCnt_V + 10'd1);

assign tmp_31_i_fu_1095_p2 = ((tsStream_V_V_dout == 32'd0) ? 1'b1 : 1'b0);

assign tmp_32_i_fu_871_p4 = {{tmp_V_1_fu_188[9:2]}};

assign tmp_33_fu_1069_p3 = {{ySFASTScale2_V_fu_1035_p4}, {2'd0}};

assign tmp_33_i_fu_1119_p2 = (tmp_V_2_fu_192 + 2'd1);

assign tmp_34_fu_1081_p2 = (tmp_48_cast_fu_1077_p1 + tmp_3_i_i_cast_fu_1065_p1);

assign tmp_35_fu_867_p1 = tmp_29_i_fu_857_p4;

assign tmp_36_cast_i_fu_913_p2 = ($signed(tmp_fu_899_p1) + $signed(tmp_1_fu_903_p4));

assign tmp_36_fu_947_p2 = (tmp_53_cast_fu_939_p3 + tmp_47_i_cast_fu_929_p1);

assign tmp_37_fu_1029_p2 = (tmp_56_cast_fu_1021_p3 + tmp_47_1_i_cast_fu_1011_p1);

assign tmp_38_fu_1540_p4 = {{tmp_V_s_reg_443[47:8]}};

assign tmp_39_fu_1431_p1 = tmp_144_fu_1427_p1;

assign tmp_3_fu_1247_p3 = {{xNewIdxSFASTScale2_V_reg_1674}, {2'd1}};

assign tmp_3_i_i_cast_fu_1065_p1 = tmp_99_fu_1055_p4;

assign tmp_41_1_i_fu_961_p1 = tmp_24_i_fu_769_p5;

assign tmp_41_i_fu_881_p1 = tmp_14_i_fu_593_p5;

assign tmp_42_1_i_fu_965_p2 = ($signed(tmp_41_1_i_fu_961_p1) + $signed(tmp_35_fu_867_p1));

assign tmp_42_i_fu_885_p2 = ($signed(tmp_41_i_fu_881_p1) + $signed(tmp_35_fu_867_p1));

assign tmp_47_1_i_cast_fu_1011_p1 = tmp_138_fu_1001_p4;

assign tmp_47_i_cast_fu_929_p1 = tmp_130_fu_919_p4;

assign tmp_48_cast_fu_1077_p1 = tmp_33_fu_1069_p3;

assign tmp_49_cast_fu_1087_p1 = tmp_34_fu_1081_p2;

assign tmp_4_fu_1266_p3 = {{xNewIdxSFASTScale2_V_reg_1674}, {2'd2}};

assign tmp_51_cast_i_fu_995_p2 = ($signed(tmp_2_fu_991_p1) + $signed(tmp_1_fu_903_p4));

assign tmp_53_cast_fu_939_p3 = {{tmp_131_fu_933_p2}, {2'd0}};

assign tmp_54_cast_fu_953_p1 = tmp_36_fu_947_p2;

assign tmp_56_cast_fu_1021_p3 = {{tmp_139_fu_1015_p2}, {2'd0}};

assign tmp_57_cast_fu_1416_p1 = tmp_37_reg_1664_pp0_iter2_reg;

assign tmp_5_fu_1285_p3 = {{xNewIdxSFASTScale2_V_reg_1674}, {2'd3}};

assign tmp_6_fu_1125_p5 = (tmp_V_2_fu_192 + 2'd1);

assign tmp_7_fu_1139_p3 = {{tmp_36_cast_i_reg_1628}, {2'd0}};

assign tmp_8_fu_1158_p3 = {{tmp_36_cast_i_reg_1628}, {2'd1}};

assign tmp_99_fu_1055_p4 = {{xStream_V_V_dout[9:7]}};

assign tmp_9_fu_1177_p3 = {{tmp_36_cast_i_reg_1628}, {2'd2}};

assign tmp_9_i_i_fu_1322_p1 = cmpFlgSFASTScale2_V_fu_1316_p2;

assign tmp_fu_899_p1 = tmp_14_i_fu_593_p5;

assign tmp_i_44_fu_505_p2 = (($signed(i_V_fu_499_p2) < $signed(5'd12)) ? 1'b1 : 1'b0);

assign tmp_i_fu_483_p2 = ((ap_phi_mux_p_4_i_phi_fu_404_p6 == 5'd30) ? 1'b1 : 1'b0);

assign tmp_s_fu_1228_p3 = {{xNewIdxSFASTScale2_V_reg_1674}, {2'd0}};

assign ySFASTScale2_V_fu_1035_p4 = {{yStream_V_V_dout[9:2]}};

endmodule //rwSAEPerfectLoopStre
