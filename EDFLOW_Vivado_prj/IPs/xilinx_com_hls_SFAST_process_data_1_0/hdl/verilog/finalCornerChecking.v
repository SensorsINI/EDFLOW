// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module finalCornerChecking (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read2,
        p_read3,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    ap_const_lv96_2F1E0EFEEFE0E1F202122120 = 96'd14582134052080475801946038560;
















input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [7:0] p_read2;
input  [7:0] p_read3;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] p_read_3_reg_559;
wire   [0:0] r_V_fu_72_p1;
reg   [0:0] r_V_reg_564;
wire   [4:0] r_V_1_fu_462_p2;
reg   [4:0] r_V_1_reg_569;
wire   [4:0] r_V_2_fu_476_p2;
reg   [4:0] r_V_2_reg_576;
wire   [0:0] sel_tmp2_fu_482_p2;
reg   [0:0] sel_tmp2_reg_583;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire   [7:0] tmp_i_i_fu_76_p2;
wire   [7:0] outerEndIdx_fu_82_p2;
wire   [7:0] colIndexBase_V_fu_98_p2;
wire   [31:0] index_assign_12_i_i_fu_104_p1;
wire   [7:0] r_V_i_i_fu_116_p2;
wire   [31:0] index_assign_12_1_i_s_fu_122_p1;
wire   [7:0] r_V_1_i_i_fu_134_p2;
wire   [31:0] index_assign_12_2_i_s_fu_140_p1;
wire   [7:0] r_V_2_i_i_fu_152_p2;
wire   [31:0] index_assign_12_3_i_s_fu_158_p1;
wire   [0:0] tmp_160_fu_162_p3;
wire   [0:0] tmp_159_fu_144_p3;
wire   [0:0] tmp_158_fu_126_p3;
wire   [0:0] tmp_157_fu_108_p3;
wire   [7:0] r_V_3_i_i_fu_182_p2;
wire   [31:0] index_assign_12_4_i_s_fu_188_p1;
wire   [7:0] r_V_4_i_i_fu_200_p2;
wire   [31:0] index_assign_12_5_i_s_fu_206_p1;
wire   [7:0] r_V_5_i_i_fu_218_p2;
wire   [31:0] index_assign_12_6_i_s_fu_224_p1;
wire   [7:0] r_V_6_i_i_fu_236_p2;
wire   [31:0] index_assign_12_7_i_s_fu_242_p1;
wire   [4:0] tmp_155_fu_94_p1;
wire   [0:0] tmp_i_i_49_fu_88_p2;
wire   [4:0] tmp_165_fu_254_p2;
wire   [4:0] tmp_166_fu_260_p1;
wire   [4:0] tmp_s_fu_264_p3;
wire   [7:0] colIndexBase_V_1_fu_272_p3;
wire   [31:0] index_assign_14_i_i_fu_280_p1;
wire   [7:0] r_V_14_i_i_fu_292_p2;
wire   [31:0] index_assign_14_1_i_s_fu_298_p1;
wire   [7:0] r_V_14_1_i_i_fu_310_p2;
wire   [31:0] index_assign_14_2_i_s_fu_316_p1;
wire   [7:0] r_V_14_2_i_i_fu_328_p2;
wire   [31:0] index_assign_14_3_i_s_fu_334_p1;
wire   [0:0] tmp_170_fu_338_p3;
wire   [0:0] tmp_169_fu_320_p3;
wire   [0:0] tmp_168_fu_302_p3;
wire   [0:0] tmp_167_fu_284_p3;
wire   [7:0] r_V_14_3_i_i_fu_358_p2;
wire   [31:0] index_assign_14_4_i_s_fu_364_p1;
wire   [7:0] r_V_14_4_i_i_fu_376_p2;
wire   [31:0] index_assign_14_5_i_s_fu_382_p1;
wire   [7:0] r_V_14_5_i_i_fu_394_p2;
wire   [31:0] index_assign_14_6_i_s_fu_400_p1;
wire   [7:0] r_V_14_6_i_i_fu_412_p2;
wire   [31:0] index_assign_14_7_i_s_fu_418_p1;
wire   [0:0] tmp_164_fu_246_p3;
wire   [0:0] tmp_163_fu_228_p3;
wire   [0:0] tmp_162_fu_210_p3;
wire   [0:0] tmp_161_fu_192_p3;
wire   [0:0] tmp_174_fu_422_p3;
wire   [0:0] tmp_173_fu_404_p3;
wire   [0:0] tmp_172_fu_386_p3;
wire   [0:0] tmp_171_fu_368_p3;
wire   [3:0] outerStartX_V_fu_170_p5;
wire   [3:0] outerEndX_V_fu_346_p5;
wire  signed [4:0] lhs_V_fu_454_p1;
wire  signed [4:0] rhs_V_fu_458_p1;
wire   [3:0] outerStartY_V_fu_430_p5;
wire   [3:0] outerEndY_V_fu_442_p5;
wire  signed [4:0] lhs_V_1_fu_468_p1;
wire  signed [4:0] rhs_V_1_fu_472_p1;
wire   [0:0] abscond_i_i_fu_493_p2;
wire   [4:0] neg_i_i_fu_488_p2;
wire   [0:0] tmp_45_i_i_fu_505_p2;
wire   [4:0] abs_i_i_fu_498_p3;
wire   [4:0] tmp_46_cast_i_i_fu_510_p1;
wire   [0:0] abscond1_i_i_fu_525_p2;
wire   [4:0] neg1_i_i_fu_520_p2;
wire   [4:0] abs1_i_i_fu_530_p3;
wire   [0:0] tmp_47_i_i_fu_514_p2;
wire   [0:0] tmp_49_i_i_fu_537_p2;
wire   [0:0] tmp2_fu_547_p2;
wire   [0:0] tmp_fu_543_p2;
wire   [0:0] isCornerOut_V_write_s_fu_553_p2;
reg   [0:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_preg <= isCornerOut_V_write_s_fu_553_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_read_3_reg_559 <= p_read;
        r_V_1_reg_569 <= r_V_1_fu_462_p2;
        r_V_2_reg_576 <= r_V_2_fu_476_p2;
        r_V_reg_564 <= r_V_fu_72_p1;
        sel_tmp2_reg_583 <= sel_tmp2_fu_482_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return = isCornerOut_V_write_s_fu_553_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs1_i_i_fu_530_p3 = ((abscond1_i_i_fu_525_p2[0:0] === 1'b1) ? r_V_2_reg_576 : neg1_i_i_fu_520_p2);

assign abs_i_i_fu_498_p3 = ((abscond_i_i_fu_493_p2[0:0] === 1'b1) ? r_V_1_reg_569 : neg_i_i_fu_488_p2);

assign abscond1_i_i_fu_525_p2 = (($signed(r_V_2_reg_576) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign abscond_i_i_fu_493_p2 = (($signed(r_V_1_reg_569) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign colIndexBase_V_1_fu_272_p3 = {{tmp_s_fu_264_p3}, {3'd0}};

assign colIndexBase_V_fu_98_p2 = p_read3 << 8'd3;

assign index_assign_12_1_i_s_fu_122_p1 = r_V_i_i_fu_116_p2;

assign index_assign_12_2_i_s_fu_140_p1 = r_V_1_i_i_fu_134_p2;

assign index_assign_12_3_i_s_fu_158_p1 = r_V_2_i_i_fu_152_p2;

assign index_assign_12_4_i_s_fu_188_p1 = r_V_3_i_i_fu_182_p2;

assign index_assign_12_5_i_s_fu_206_p1 = r_V_4_i_i_fu_200_p2;

assign index_assign_12_6_i_s_fu_224_p1 = r_V_5_i_i_fu_218_p2;

assign index_assign_12_7_i_s_fu_242_p1 = r_V_6_i_i_fu_236_p2;

assign index_assign_12_i_i_fu_104_p1 = colIndexBase_V_fu_98_p2;

assign index_assign_14_1_i_s_fu_298_p1 = r_V_14_i_i_fu_292_p2;

assign index_assign_14_2_i_s_fu_316_p1 = r_V_14_1_i_i_fu_310_p2;

assign index_assign_14_3_i_s_fu_334_p1 = r_V_14_2_i_i_fu_328_p2;

assign index_assign_14_4_i_s_fu_364_p1 = r_V_14_3_i_i_fu_358_p2;

assign index_assign_14_5_i_s_fu_382_p1 = r_V_14_4_i_i_fu_376_p2;

assign index_assign_14_6_i_s_fu_400_p1 = r_V_14_5_i_i_fu_394_p2;

assign index_assign_14_7_i_s_fu_418_p1 = r_V_14_6_i_i_fu_412_p2;

assign index_assign_14_i_i_fu_280_p1 = colIndexBase_V_1_fu_272_p3;

assign isCornerOut_V_write_s_fu_553_p2 = (tmp_fu_543_p2 & tmp2_fu_547_p2);

assign lhs_V_1_fu_468_p1 = $signed(outerStartY_V_fu_430_p5);

assign lhs_V_fu_454_p1 = $signed(outerStartX_V_fu_170_p5);

assign neg1_i_i_fu_520_p2 = (5'd0 - r_V_2_reg_576);

assign neg_i_i_fu_488_p2 = (5'd0 - r_V_1_reg_569);

assign outerEndIdx_fu_82_p2 = ($signed(8'd255) + $signed(tmp_i_i_fu_76_p2));

assign outerEndX_V_fu_346_p5 = {{{{tmp_170_fu_338_p3}, {tmp_169_fu_320_p3}}, {tmp_168_fu_302_p3}}, {tmp_167_fu_284_p3}};

assign outerEndY_V_fu_442_p5 = {{{{tmp_174_fu_422_p3}, {tmp_173_fu_404_p3}}, {tmp_172_fu_386_p3}}, {tmp_171_fu_368_p3}};

assign outerStartX_V_fu_170_p5 = {{{{tmp_160_fu_162_p3}, {tmp_159_fu_144_p3}}, {tmp_158_fu_126_p3}}, {tmp_157_fu_108_p3}};

assign outerStartY_V_fu_430_p5 = {{{{tmp_164_fu_246_p3}, {tmp_163_fu_228_p3}}, {tmp_162_fu_210_p3}}, {tmp_161_fu_192_p3}};

assign r_V_14_1_i_i_fu_310_p2 = (colIndexBase_V_1_fu_272_p3 | 8'd2);

assign r_V_14_2_i_i_fu_328_p2 = (colIndexBase_V_1_fu_272_p3 | 8'd3);

assign r_V_14_3_i_i_fu_358_p2 = (colIndexBase_V_1_fu_272_p3 | 8'd4);

assign r_V_14_4_i_i_fu_376_p2 = (colIndexBase_V_1_fu_272_p3 | 8'd5);

assign r_V_14_5_i_i_fu_394_p2 = (colIndexBase_V_1_fu_272_p3 | 8'd6);

assign r_V_14_6_i_i_fu_412_p2 = (colIndexBase_V_1_fu_272_p3 | 8'd7);

assign r_V_14_i_i_fu_292_p2 = (colIndexBase_V_1_fu_272_p3 | 8'd1);

assign r_V_1_fu_462_p2 = ($signed(lhs_V_fu_454_p1) - $signed(rhs_V_fu_458_p1));

assign r_V_1_i_i_fu_134_p2 = (colIndexBase_V_fu_98_p2 | 8'd2);

assign r_V_2_fu_476_p2 = ($signed(lhs_V_1_fu_468_p1) - $signed(rhs_V_1_fu_472_p1));

assign r_V_2_i_i_fu_152_p2 = (colIndexBase_V_fu_98_p2 | 8'd3);

assign r_V_3_i_i_fu_182_p2 = (colIndexBase_V_fu_98_p2 | 8'd4);

assign r_V_4_i_i_fu_200_p2 = (colIndexBase_V_fu_98_p2 | 8'd5);

assign r_V_5_i_i_fu_218_p2 = (colIndexBase_V_fu_98_p2 | 8'd6);

assign r_V_6_i_i_fu_236_p2 = (colIndexBase_V_fu_98_p2 | 8'd7);

assign r_V_fu_72_p1 = p_read2[0:0];

assign r_V_i_i_fu_116_p2 = (colIndexBase_V_fu_98_p2 | 8'd1);

assign rhs_V_1_fu_472_p1 = $signed(outerEndY_V_fu_442_p5);

assign rhs_V_fu_458_p1 = $signed(outerEndX_V_fu_346_p5);

assign sel_tmp2_fu_482_p2 = ((p_read2 != 8'd11) ? 1'b1 : 1'b0);

assign tmp2_fu_547_p2 = (tmp_49_i_i_fu_537_p2 & tmp_47_i_i_fu_514_p2);

assign tmp_155_fu_94_p1 = tmp_i_i_fu_76_p2[4:0];

assign tmp_157_fu_108_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_i_i_fu_104_p1];

assign tmp_158_fu_126_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_1_i_s_fu_122_p1];

assign tmp_159_fu_144_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_2_i_s_fu_140_p1];

assign tmp_160_fu_162_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_3_i_s_fu_158_p1];

assign tmp_161_fu_192_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_4_i_s_fu_188_p1];

assign tmp_162_fu_210_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_5_i_s_fu_206_p1];

assign tmp_163_fu_228_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_6_i_s_fu_224_p1];

assign tmp_164_fu_246_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_12_7_i_s_fu_242_p1];

assign tmp_165_fu_254_p2 = ($signed(5'd19) + $signed(tmp_155_fu_94_p1));

assign tmp_166_fu_260_p1 = outerEndIdx_fu_82_p2[4:0];

assign tmp_167_fu_284_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_i_i_fu_280_p1];

assign tmp_168_fu_302_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_1_i_s_fu_298_p1];

assign tmp_169_fu_320_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_2_i_s_fu_316_p1];

assign tmp_170_fu_338_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_3_i_s_fu_334_p1];

assign tmp_171_fu_368_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_4_i_s_fu_364_p1];

assign tmp_172_fu_386_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_5_i_s_fu_382_p1];

assign tmp_173_fu_404_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_6_i_s_fu_400_p1];

assign tmp_174_fu_422_p3 = ap_const_lv96_2F1E0EFEEFE0E1F202122120[index_assign_14_7_i_s_fu_418_p1];

assign tmp_45_i_i_fu_505_p2 = (r_V_reg_564 ^ 1'd1);

assign tmp_46_cast_i_i_fu_510_p1 = tmp_45_i_i_fu_505_p2;

assign tmp_47_i_i_fu_514_p2 = (($signed(abs_i_i_fu_498_p3) > $signed(tmp_46_cast_i_i_fu_510_p1)) ? 1'b1 : 1'b0);

assign tmp_49_i_i_fu_537_p2 = (($signed(abs1_i_i_fu_530_p3) > $signed(tmp_46_cast_i_i_fu_510_p1)) ? 1'b1 : 1'b0);

assign tmp_fu_543_p2 = (sel_tmp2_reg_583 & p_read_3_reg_559);

assign tmp_i_i_49_fu_88_p2 = ((outerEndIdx_fu_82_p2 > 8'd11) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_76_p2 = (p_read2 + p_read3);

assign tmp_s_fu_264_p3 = ((tmp_i_i_49_fu_88_p2[0:0] === 1'b1) ? tmp_165_fu_254_p2 : tmp_166_fu_260_p1);

endmodule //finalCornerChecking
