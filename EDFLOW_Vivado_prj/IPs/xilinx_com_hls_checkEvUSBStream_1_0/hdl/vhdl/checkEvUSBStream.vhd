-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity checkEvUSBStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    evUSBStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    evUSBStreamIn_V_V_TVALID : IN STD_LOGIC;
    evUSBStreamIn_V_V_TREADY : OUT STD_LOGIC;
    dataReg_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dataReg_V_ap_vld : OUT STD_LOGIC;
    nonMonTSDiffFlgReg_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    nonMonTSDiffFlgReg_V_ap_vld : OUT STD_LOGIC;
    tsReg_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsReg_V_ap_vld : OUT STD_LOGIC;
    glLastTSReg_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    glLastTSReg_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of checkEvUSBStream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "checkEvUSBStream,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=16.670000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.871600,HLS_SYN_LAT=3,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=176,HLS_SYN_LUT=174}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv48_F : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal evUSBStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal evUSBStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal evUSBStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal evUSBStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal evUSBStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal evUSBStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal evUSBStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal evUSBStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal evUSBStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal evUSBStreamIn_V_V_0_sel : STD_LOGIC;
    signal evUSBStreamIn_V_V_0_load_A : STD_LOGIC;
    signal evUSBStreamIn_V_V_0_load_B : STD_LOGIC;
    signal evUSBStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal evUSBStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal tsWrap_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal ts_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal glLastTS_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal evUSBStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_V_reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_2_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_8_fu_151_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_163_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_3_fu_183_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal p_Result_8_fu_120_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_136_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_9_fu_140_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_147_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_4_fu_179_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_fu_175_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_161 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    evUSBStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                evUSBStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((evUSBStreamIn_V_V_0_ack_out = ap_const_logic_1) and (evUSBStreamIn_V_V_0_vld_out = ap_const_logic_1))) then 
                                        evUSBStreamIn_V_V_0_sel_rd <= not(evUSBStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    evUSBStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                evUSBStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((evUSBStreamIn_V_V_0_ack_in = ap_const_logic_1) and (evUSBStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        evUSBStreamIn_V_V_0_sel_wr <= not(evUSBStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    evUSBStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                evUSBStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((evUSBStreamIn_V_V_0_state = ap_const_lv2_2) and (evUSBStreamIn_V_V_0_vld_in = ap_const_logic_0)) or ((evUSBStreamIn_V_V_0_state = ap_const_lv2_3) and (evUSBStreamIn_V_V_0_vld_in = ap_const_logic_0) and (evUSBStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    evUSBStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((evUSBStreamIn_V_V_0_state = ap_const_lv2_1) and (evUSBStreamIn_V_V_0_ack_out = ap_const_logic_0)) or ((evUSBStreamIn_V_V_0_state = ap_const_lv2_3) and (evUSBStreamIn_V_V_0_ack_out = ap_const_logic_0) and (evUSBStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    evUSBStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((evUSBStreamIn_V_V_0_vld_in = ap_const_logic_0) and (evUSBStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((evUSBStreamIn_V_V_0_ack_out = ap_const_logic_0) and (evUSBStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (evUSBStreamIn_V_V_0_state = ap_const_lv2_3)) or ((evUSBStreamIn_V_V_0_state = ap_const_lv2_1) and (evUSBStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((evUSBStreamIn_V_V_0_state = ap_const_lv2_2) and (evUSBStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    evUSBStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    evUSBStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ts_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_161)) then
                if ((tmp_fu_108_p3 = ap_const_lv1_1)) then 
                    ts_V <= tmp_3_fu_183_p4;
                elsif (((tmp_2_fu_130_p2 = ap_const_lv1_1) and (tmp_fu_108_p3 = ap_const_lv1_0))) then 
                    ts_V <= r_V_fu_163_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((evUSBStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                evUSBStreamIn_V_V_0_payload_A <= evUSBStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((evUSBStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                evUSBStreamIn_V_V_0_payload_B <= evUSBStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                glLastTS_V <= ts_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_V_reg_229 <= evUSBStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_130_p2 = ap_const_lv1_1) and (tmp_fu_108_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tsWrap_V <= tmp_8_fu_151_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_pp0_stage0_01001 <= (((evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_pp0_stage0_11001 <= (((evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_pp0_stage0_subdone <= (((evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_pp0_stage1_01001 <= ((evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_pp0_stage1_11001 <= ((evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_pp0_stage1_subdone <= ((evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(evUSBStreamIn_V_V_0_vld_out)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (evUSBStreamIn_V_V_0_vld_out = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_161_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_161 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dataReg_V <= (evUSBStreamIn_V_V_0_data_out & tmp_V_reg_229);

    dataReg_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            dataReg_V_ap_vld <= ap_const_logic_1;
        else 
            dataReg_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    evUSBStreamIn_V_V_0_ack_in <= evUSBStreamIn_V_V_0_state(1);

    evUSBStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            evUSBStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            evUSBStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    evUSBStreamIn_V_V_0_data_out_assign_proc : process(evUSBStreamIn_V_V_0_payload_A, evUSBStreamIn_V_V_0_payload_B, evUSBStreamIn_V_V_0_sel)
    begin
        if ((evUSBStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            evUSBStreamIn_V_V_0_data_out <= evUSBStreamIn_V_V_0_payload_B;
        else 
            evUSBStreamIn_V_V_0_data_out <= evUSBStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    evUSBStreamIn_V_V_0_load_A <= (not(evUSBStreamIn_V_V_0_sel_wr) and evUSBStreamIn_V_V_0_state_cmp_full);
    evUSBStreamIn_V_V_0_load_B <= (evUSBStreamIn_V_V_0_state_cmp_full and evUSBStreamIn_V_V_0_sel_wr);
    evUSBStreamIn_V_V_0_sel <= evUSBStreamIn_V_V_0_sel_rd;
    evUSBStreamIn_V_V_0_state_cmp_full <= '0' when (evUSBStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    evUSBStreamIn_V_V_0_vld_in <= evUSBStreamIn_V_V_TVALID;
    evUSBStreamIn_V_V_0_vld_out <= evUSBStreamIn_V_V_0_state(0);

    evUSBStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, evUSBStreamIn_V_V_0_state, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            evUSBStreamIn_V_V_TDATA_blk_n <= evUSBStreamIn_V_V_0_state(0);
        else 
            evUSBStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    evUSBStreamIn_V_V_TREADY <= evUSBStreamIn_V_V_0_state(1);
    glLastTSReg_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(glLastTS_V),64));

    glLastTSReg_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            glLastTSReg_V_ap_vld <= ap_const_logic_1;
        else 
            glLastTSReg_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    nonMonTSDiffFlgReg_V <= "1" when (unsigned(ts_V) < unsigned(glLastTS_V)) else "0";

    nonMonTSDiffFlgReg_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            nonMonTSDiffFlgReg_V_ap_vld <= ap_const_logic_1;
        else 
            nonMonTSDiffFlgReg_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_8_fu_120_p4 <= evUSBStreamIn_V_V_0_data_out(6 downto 4);
    p_Result_9_fu_140_p3 <= (tmp_5_fu_136_p1 & tmp_V_reg_229);
    r_V_fu_163_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_fu_151_p2),to_integer(unsigned('0' & ap_const_lv48_F(31-1 downto 0)))));
    tmp_1_fu_175_p1 <= evUSBStreamIn_V_V_0_data_out(7 - 1 downto 0);
    tmp_2_fu_130_p2 <= "1" when (p_Result_8_fu_120_p4 = ap_const_lv3_7) else "0";
    tmp_3_fu_183_p4 <= ((tmp_4_fu_179_p1 & tmp_1_fu_175_p1) & tmp_V_reg_229);
    tmp_4_fu_179_p1 <= tsWrap_V(33 - 1 downto 0);
    tmp_5_fu_136_p1 <= evUSBStreamIn_V_V_0_data_out(4 - 1 downto 0);
    tmp_7_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_140_p3),48));
    tmp_8_fu_151_p2 <= std_logic_vector(unsigned(tsWrap_V) + unsigned(tmp_7_fu_147_p1));
    tmp_fu_108_p3 <= evUSBStreamIn_V_V_0_data_out(7 downto 7);
    tsReg_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ts_V),64));

    tsReg_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            tsReg_V_ap_vld <= ap_const_logic_1;
        else 
            tsReg_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
