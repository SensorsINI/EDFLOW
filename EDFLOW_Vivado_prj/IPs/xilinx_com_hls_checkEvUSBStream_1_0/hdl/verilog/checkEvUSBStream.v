// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="checkEvUSBStream,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=16.670000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.871600,HLS_SYN_LAT=3,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=176,HLS_SYN_LUT=174}" *)

module checkEvUSBStream (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        evUSBStreamIn_V_V_TDATA,
        evUSBStreamIn_V_V_TVALID,
        evUSBStreamIn_V_V_TREADY,
        dataReg_V,
        dataReg_V_ap_vld,
        nonMonTSDiffFlgReg_V,
        nonMonTSDiffFlgReg_V_ap_vld,
        tsReg_V,
        tsReg_V_ap_vld,
        glLastTSReg_V,
        glLastTSReg_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] evUSBStreamIn_V_V_TDATA;
input   evUSBStreamIn_V_V_TVALID;
output   evUSBStreamIn_V_V_TREADY;
output  [15:0] dataReg_V;
output   dataReg_V_ap_vld;
output  [0:0] nonMonTSDiffFlgReg_V;
output   nonMonTSDiffFlgReg_V_ap_vld;
output  [63:0] tsReg_V;
output   tsReg_V_ap_vld;
output  [63:0] glLastTSReg_V;
output   glLastTSReg_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dataReg_V_ap_vld;
reg nonMonTSDiffFlgReg_V_ap_vld;
reg tsReg_V_ap_vld;
reg glLastTSReg_V_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    evUSBStreamIn_V_V_0_vld_out;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] evUSBStreamIn_V_V_0_data_out;
wire    evUSBStreamIn_V_V_0_vld_in;
wire    evUSBStreamIn_V_V_0_ack_in;
reg    evUSBStreamIn_V_V_0_ack_out;
reg   [7:0] evUSBStreamIn_V_V_0_payload_A;
reg   [7:0] evUSBStreamIn_V_V_0_payload_B;
reg    evUSBStreamIn_V_V_0_sel_rd;
reg    evUSBStreamIn_V_V_0_sel_wr;
wire    evUSBStreamIn_V_V_0_sel;
wire    evUSBStreamIn_V_V_0_load_A;
wire    evUSBStreamIn_V_V_0_load_B;
reg   [1:0] evUSBStreamIn_V_V_0_state;
wire    evUSBStreamIn_V_V_0_state_cmp_full;
reg   [47:0] tsWrap_V;
reg   [47:0] ts_V;
reg   [47:0] glLastTS_V;
reg    evUSBStreamIn_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0;
reg   [7:0] tmp_V_reg_229;
wire   [0:0] tmp_fu_108_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_2_fu_130_p2;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire   [47:0] tmp_8_fu_151_p2;
wire   [47:0] r_V_fu_163_p2;
wire   [47:0] tmp_3_fu_183_p4;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [2:0] p_Result_8_fu_120_p4;
wire   [3:0] tmp_5_fu_136_p1;
wire   [11:0] p_Result_9_fu_140_p3;
wire   [47:0] tmp_7_fu_147_p1;
wire   [32:0] tmp_4_fu_179_p1;
wire   [6:0] tmp_1_fu_175_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_161;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 evUSBStreamIn_V_V_0_sel_rd = 1'b0;
#0 evUSBStreamIn_V_V_0_sel_wr = 1'b0;
#0 evUSBStreamIn_V_V_0_state = 2'd0;
#0 tsWrap_V = 48'd0;
#0 ts_V = 48'd0;
#0 glLastTS_V = 48'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        evUSBStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((evUSBStreamIn_V_V_0_ack_out == 1'b1) & (evUSBStreamIn_V_V_0_vld_out == 1'b1))) begin
            evUSBStreamIn_V_V_0_sel_rd <= ~evUSBStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        evUSBStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((evUSBStreamIn_V_V_0_ack_in == 1'b1) & (evUSBStreamIn_V_V_0_vld_in == 1'b1))) begin
            evUSBStreamIn_V_V_0_sel_wr <= ~evUSBStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        evUSBStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((evUSBStreamIn_V_V_0_state == 2'd2) & (evUSBStreamIn_V_V_0_vld_in == 1'b0)) | ((evUSBStreamIn_V_V_0_state == 2'd3) & (evUSBStreamIn_V_V_0_vld_in == 1'b0) & (evUSBStreamIn_V_V_0_ack_out == 1'b1)))) begin
            evUSBStreamIn_V_V_0_state <= 2'd2;
        end else if ((((evUSBStreamIn_V_V_0_state == 2'd1) & (evUSBStreamIn_V_V_0_ack_out == 1'b0)) | ((evUSBStreamIn_V_V_0_state == 2'd3) & (evUSBStreamIn_V_V_0_ack_out == 1'b0) & (evUSBStreamIn_V_V_0_vld_in == 1'b1)))) begin
            evUSBStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((evUSBStreamIn_V_V_0_vld_in == 1'b0) & (evUSBStreamIn_V_V_0_ack_out == 1'b1)) & ~((evUSBStreamIn_V_V_0_ack_out == 1'b0) & (evUSBStreamIn_V_V_0_vld_in == 1'b1)) & (evUSBStreamIn_V_V_0_state == 2'd3)) | ((evUSBStreamIn_V_V_0_state == 2'd1) & (evUSBStreamIn_V_V_0_ack_out == 1'b1)) | ((evUSBStreamIn_V_V_0_state == 2'd2) & (evUSBStreamIn_V_V_0_vld_in == 1'b1)))) begin
            evUSBStreamIn_V_V_0_state <= 2'd3;
        end else begin
            evUSBStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if ((tmp_fu_108_p3 == 1'd1)) begin
            ts_V <= tmp_3_fu_183_p4;
        end else if (((tmp_2_fu_130_p2 == 1'd1) & (tmp_fu_108_p3 == 1'd0))) begin
            ts_V <= r_V_fu_163_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((evUSBStreamIn_V_V_0_load_A == 1'b1)) begin
        evUSBStreamIn_V_V_0_payload_A <= evUSBStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((evUSBStreamIn_V_V_0_load_B == 1'b1)) begin
        evUSBStreamIn_V_V_0_payload_B <= evUSBStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        glLastTS_V <= ts_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_V_reg_229 <= evUSBStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_130_p2 == 1'd1) & (tmp_fu_108_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsWrap_V <= tmp_8_fu_151_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        dataReg_V_ap_vld = 1'b1;
    end else begin
        dataReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        evUSBStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        evUSBStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((evUSBStreamIn_V_V_0_sel == 1'b1)) begin
        evUSBStreamIn_V_V_0_data_out = evUSBStreamIn_V_V_0_payload_B;
    end else begin
        evUSBStreamIn_V_V_0_data_out = evUSBStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        evUSBStreamIn_V_V_TDATA_blk_n = evUSBStreamIn_V_V_0_state[1'd0];
    end else begin
        evUSBStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        glLastTSReg_V_ap_vld = 1'b1;
    end else begin
        glLastTSReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        tsReg_V_ap_vld = 1'b1;
    end else begin
        tsReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((evUSBStreamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((evUSBStreamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((evUSBStreamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((evUSBStreamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((evUSBStreamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((evUSBStreamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (evUSBStreamIn_V_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (evUSBStreamIn_V_V_0_vld_out == 1'b0);
end

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_161 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dataReg_V = {{evUSBStreamIn_V_V_0_data_out}, {tmp_V_reg_229}};

assign evUSBStreamIn_V_V_0_ack_in = evUSBStreamIn_V_V_0_state[1'd1];

assign evUSBStreamIn_V_V_0_load_A = (~evUSBStreamIn_V_V_0_sel_wr & evUSBStreamIn_V_V_0_state_cmp_full);

assign evUSBStreamIn_V_V_0_load_B = (evUSBStreamIn_V_V_0_state_cmp_full & evUSBStreamIn_V_V_0_sel_wr);

assign evUSBStreamIn_V_V_0_sel = evUSBStreamIn_V_V_0_sel_rd;

assign evUSBStreamIn_V_V_0_state_cmp_full = ((evUSBStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign evUSBStreamIn_V_V_0_vld_in = evUSBStreamIn_V_V_TVALID;

assign evUSBStreamIn_V_V_0_vld_out = evUSBStreamIn_V_V_0_state[1'd0];

assign evUSBStreamIn_V_V_TREADY = evUSBStreamIn_V_V_0_state[1'd1];

assign glLastTSReg_V = glLastTS_V;

assign nonMonTSDiffFlgReg_V = ((ts_V < glLastTS_V) ? 1'b1 : 1'b0);

assign p_Result_8_fu_120_p4 = {{evUSBStreamIn_V_V_0_data_out[6:4]}};

assign p_Result_9_fu_140_p3 = {{tmp_5_fu_136_p1}, {tmp_V_reg_229}};

assign r_V_fu_163_p2 = tmp_8_fu_151_p2 << 48'd15;

assign tmp_1_fu_175_p1 = evUSBStreamIn_V_V_0_data_out[6:0];

assign tmp_2_fu_130_p2 = ((p_Result_8_fu_120_p4 == 3'd7) ? 1'b1 : 1'b0);

assign tmp_3_fu_183_p4 = {{{tmp_4_fu_179_p1}, {tmp_1_fu_175_p1}}, {tmp_V_reg_229}};

assign tmp_4_fu_179_p1 = tsWrap_V[32:0];

assign tmp_5_fu_136_p1 = evUSBStreamIn_V_V_0_data_out[3:0];

assign tmp_7_fu_147_p1 = p_Result_9_fu_140_p3;

assign tmp_8_fu_151_p2 = (tsWrap_V + tmp_7_fu_147_p1);

assign tmp_fu_108_p3 = evUSBStreamIn_V_V_0_data_out[32'd7];

assign tsReg_V = ts_V;

endmodule //checkEvUSBStream
