// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="XYTSStreamToRawStream,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.523000,HLS_SYN_LAT=6,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=801,HLS_SYN_LUT=603}" *)

module XYTSStreamToRawStream (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        streamOut_V_V_TREADY,
        xStreamIn_V_V_TDATA,
        xStreamIn_V_V_TVALID,
        xStreamIn_V_V_TREADY,
        yStreamIn_V_V_TDATA,
        yStreamIn_V_V_TVALID,
        yStreamIn_V_V_TREADY,
        tsStreamIn_V_V_TDATA,
        tsStreamIn_V_V_TVALID,
        tsStreamIn_V_V_TREADY,
        polStreamIn_V_V_TDATA,
        polStreamIn_V_V_TVALID,
        polStreamIn_V_V_TREADY,
        custDataStreamIn_V_V_TDATA,
        custDataStreamIn_V_V_TVALID,
        custDataStreamIn_V_V_TREADY,
        streamOut_V_V_TDATA,
        streamOut_V_V_TVALID,
        tsReg_V,
        tsReg_V_ap_vld,
        glLastTSReg_V,
        glLastTSReg_V_ap_vld,
        yReg_V,
        yReg_V_ap_vld,
        glLastYReg_V,
        glLastYReg_V_ap_vld,
        tsDiffFlgReg_V,
        tsDiffFlgReg_V_ap_vld,
        yDiffFlgReg_V,
        yDiffFlgReg_V_ap_vld,
        rotateInfoOutReg_V,
        rotateInfoOutReg_V_ap_vld,
        nonMonTSDiffFlgReg_V,
        nonMonTSDiffFlgReg_V_ap_vld,
        tsWrappedVal_V,
        tsWrappedVal_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   streamOut_V_V_TREADY;
input  [15:0] xStreamIn_V_V_TDATA;
input   xStreamIn_V_V_TVALID;
output   xStreamIn_V_V_TREADY;
input  [15:0] yStreamIn_V_V_TDATA;
input   yStreamIn_V_V_TVALID;
output   yStreamIn_V_V_TREADY;
input  [63:0] tsStreamIn_V_V_TDATA;
input   tsStreamIn_V_V_TVALID;
output   tsStreamIn_V_V_TREADY;
input  [7:0] polStreamIn_V_V_TDATA;
input   polStreamIn_V_V_TVALID;
output   polStreamIn_V_V_TREADY;
input  [15:0] custDataStreamIn_V_V_TDATA;
input   custDataStreamIn_V_V_TVALID;
output   custDataStreamIn_V_V_TREADY;
output  [15:0] streamOut_V_V_TDATA;
output   streamOut_V_V_TVALID;
output  [63:0] tsReg_V;
output   tsReg_V_ap_vld;
output  [63:0] glLastTSReg_V;
output   glLastTSReg_V_ap_vld;
output  [15:0] yReg_V;
output   yReg_V_ap_vld;
output  [15:0] glLastYReg_V;
output   glLastYReg_V_ap_vld;
output  [0:0] tsDiffFlgReg_V;
output   tsDiffFlgReg_V_ap_vld;
output  [0:0] yDiffFlgReg_V;
output   yDiffFlgReg_V_ap_vld;
output  [63:0] rotateInfoOutReg_V;
output   rotateInfoOutReg_V_ap_vld;
output  [0:0] nonMonTSDiffFlgReg_V;
output   nonMonTSDiffFlgReg_V_ap_vld;
output  [11:0] tsWrappedVal_V;
output   tsWrappedVal_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tsReg_V_ap_vld;
reg glLastTSReg_V_ap_vld;
reg yReg_V_ap_vld;
reg glLastYReg_V_ap_vld;
reg tsDiffFlgReg_V_ap_vld;
reg yDiffFlgReg_V_ap_vld;
reg rotateInfoOutReg_V_ap_vld;
reg nonMonTSDiffFlgReg_V_ap_vld;
reg tsWrappedVal_V_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    streamOut_V_V_1_ack_in;
reg   [0:0] tmp_9_reg_550;
reg   [0:0] tmp_s_reg_580;
reg    ap_predicate_op57_write_state4;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage3_11001;
reg   [15:0] xStreamIn_V_V_0_data_out;
wire    xStreamIn_V_V_0_vld_in;
wire    xStreamIn_V_V_0_vld_out;
wire    xStreamIn_V_V_0_ack_in;
reg    xStreamIn_V_V_0_ack_out;
reg   [15:0] xStreamIn_V_V_0_payload_A;
reg   [15:0] xStreamIn_V_V_0_payload_B;
reg    xStreamIn_V_V_0_sel_rd;
reg    xStreamIn_V_V_0_sel_wr;
wire    xStreamIn_V_V_0_sel;
wire    xStreamIn_V_V_0_load_A;
wire    xStreamIn_V_V_0_load_B;
reg   [1:0] xStreamIn_V_V_0_state;
wire    xStreamIn_V_V_0_state_cmp_full;
reg   [15:0] yStreamIn_V_V_0_data_out;
wire    yStreamIn_V_V_0_vld_in;
wire    yStreamIn_V_V_0_vld_out;
wire    yStreamIn_V_V_0_ack_in;
reg    yStreamIn_V_V_0_ack_out;
reg   [15:0] yStreamIn_V_V_0_payload_A;
reg   [15:0] yStreamIn_V_V_0_payload_B;
reg    yStreamIn_V_V_0_sel_rd;
reg    yStreamIn_V_V_0_sel_wr;
wire    yStreamIn_V_V_0_sel;
wire    yStreamIn_V_V_0_load_A;
wire    yStreamIn_V_V_0_load_B;
reg   [1:0] yStreamIn_V_V_0_state;
wire    yStreamIn_V_V_0_state_cmp_full;
reg   [63:0] tsStreamIn_V_V_0_data_out;
wire    tsStreamIn_V_V_0_vld_in;
wire    tsStreamIn_V_V_0_vld_out;
wire    tsStreamIn_V_V_0_ack_in;
reg    tsStreamIn_V_V_0_ack_out;
reg   [63:0] tsStreamIn_V_V_0_payload_A;
reg   [63:0] tsStreamIn_V_V_0_payload_B;
reg    tsStreamIn_V_V_0_sel_rd;
reg    tsStreamIn_V_V_0_sel_wr;
wire    tsStreamIn_V_V_0_sel;
wire    tsStreamIn_V_V_0_load_A;
wire    tsStreamIn_V_V_0_load_B;
reg   [1:0] tsStreamIn_V_V_0_state;
wire    tsStreamIn_V_V_0_state_cmp_full;
reg   [7:0] polStreamIn_V_V_0_data_out;
wire    polStreamIn_V_V_0_vld_in;
wire    polStreamIn_V_V_0_vld_out;
wire    polStreamIn_V_V_0_ack_in;
reg    polStreamIn_V_V_0_ack_out;
reg   [7:0] polStreamIn_V_V_0_payload_A;
reg   [7:0] polStreamIn_V_V_0_payload_B;
reg    polStreamIn_V_V_0_sel_rd;
reg    polStreamIn_V_V_0_sel_wr;
wire    polStreamIn_V_V_0_sel;
wire    polStreamIn_V_V_0_load_A;
wire    polStreamIn_V_V_0_load_B;
reg   [1:0] polStreamIn_V_V_0_state;
wire    polStreamIn_V_V_0_state_cmp_full;
reg   [15:0] custDataStreamIn_V_V_0_data_out;
wire    custDataStreamIn_V_V_0_vld_in;
wire    custDataStreamIn_V_V_0_vld_out;
wire    custDataStreamIn_V_V_0_ack_in;
reg    custDataStreamIn_V_V_0_ack_out;
reg   [15:0] custDataStreamIn_V_V_0_payload_A;
reg   [15:0] custDataStreamIn_V_V_0_payload_B;
reg    custDataStreamIn_V_V_0_sel_rd;
reg    custDataStreamIn_V_V_0_sel_wr;
wire    custDataStreamIn_V_V_0_sel;
wire    custDataStreamIn_V_V_0_load_A;
wire    custDataStreamIn_V_V_0_load_B;
reg   [1:0] custDataStreamIn_V_V_0_state;
wire    custDataStreamIn_V_V_0_state_cmp_full;
reg   [15:0] streamOut_V_V_1_data_in;
reg   [15:0] streamOut_V_V_1_data_out;
reg    streamOut_V_V_1_vld_in;
wire    streamOut_V_V_1_vld_out;
wire    streamOut_V_V_1_ack_out;
reg   [15:0] streamOut_V_V_1_payload_A;
reg   [15:0] streamOut_V_V_1_payload_B;
reg    streamOut_V_V_1_sel_rd;
reg    streamOut_V_V_1_sel_wr;
wire    streamOut_V_V_1_sel;
wire    streamOut_V_V_1_load_A;
wire    streamOut_V_V_1_load_B;
reg   [1:0] streamOut_V_V_1_state;
wire    streamOut_V_V_1_state_cmp_full;
reg   [63:0] glLastRotateTs_V;
reg   [62:0] glRotateDeltaTs_V;
reg   [63:0] glLastTS_V;
reg   [48:0] glLastTsWrap_V;
reg   [15:0] glLastY_V;
reg    xStreamIn_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    yStreamIn_V_V_TDATA_blk_n;
reg    tsStreamIn_V_V_TDATA_blk_n;
reg    polStreamIn_V_V_TDATA_blk_n;
reg    custDataStreamIn_V_V_TDATA_blk_n;
reg    streamOut_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_9_reg_550_pp0_iter1_reg;
reg   [63:0] tmp_V_6_reg_500;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_predicate_op81_write_state6;
reg    ap_predicate_op83_write_state6;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_11001;
reg   [15:0] tmp_V_8_reg_507;
wire   [0:0] tmp_V_fu_287_p1;
reg   [0:0] tmp_V_reg_514;
wire   [14:0] tmp_4_fu_301_p1;
reg   [14:0] tmp_4_reg_519;
wire   [11:0] tmp_5_fu_305_p1;
reg   [11:0] tmp_5_reg_524;
wire   [11:0] tmp_6_fu_309_p1;
reg   [11:0] tmp_6_reg_529;
reg   [15:0] tmp_V_9_reg_534;
wire   [0:0] tmp_8_fu_313_p3;
reg   [0:0] tmp_8_reg_539;
reg   [63:0] glLastTS_V_load_reg_544;
wire   [0:0] tmp_9_fu_355_p2;
wire   [0:0] tmp_1_fu_365_p2;
reg   [0:0] tmp_1_reg_554;
wire   [11:0] tmp_12_fu_371_p1;
reg   [11:0] tmp_12_reg_560;
wire   [0:0] rev1_fu_398_p2;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
reg    ap_block_state7_pp0_stage2_iter1;
reg    ap_predicate_op111_write_state7;
reg    ap_predicate_op112_write_state7;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage2_11001;
wire   [15:0] tsRaw_V_fu_430_p3;
wire   [11:0] p_1_fu_438_p3;
wire   [0:0] tmp_s_fu_445_p2;
wire   [15:0] p_Result_1_fu_450_p3;
wire   [15:0] p_Result_2_fu_471_p1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_predicate_op72_write_state5;
reg    ap_predicate_op74_write_state5;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] p_Result_3_fu_476_p5;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg   [0:0] ap_phi_reg_pp0_iter0_p_0171_1_reg_218;
reg   [11:0] ap_phi_reg_pp0_iter0_p_0144_1_reg_233;
reg   [0:0] ap_phi_reg_pp0_iter0_p_2_reg_248;
reg   [0:0] ap_phi_reg_pp0_iter1_p_2_reg_248;
reg   [0:0] ap_phi_reg_pp0_iter0_p_082_1_reg_265;
reg   [0:0] ap_phi_reg_pp0_iter1_p_082_1_reg_265;
wire   [62:0] tmp_7_fu_333_p2;
wire   [48:0] tsWrap_V_fu_291_p4;
reg    ap_block_pp0_stage2_01001;
wire    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg    ap_reg_ioackin_tsReg_V_dummy_ack;
reg    ap_reg_ioackin_glLastTSReg_V_dummy_ack;
reg    ap_reg_ioackin_yReg_V_dummy_ack;
reg    ap_reg_ioackin_glLastYReg_V_dummy_ack;
reg    ap_reg_ioackin_nonMonTSDiffFlgReg_V_dummy_ack;
reg    ap_reg_ioackin_tsWrappedVal_V_dummy_ack;
reg    ap_reg_ioackin_rotateInfoOutReg_V_dummy_ack;
reg    ap_reg_ioackin_tsDiffFlgReg_V_dummy_ack;
reg    ap_reg_ioackin_yDiffFlgReg_V_dummy_ack;
wire   [62:0] tmp_10_fu_321_p1;
wire   [62:0] tmp_11_fu_329_p1;
wire   [0:0] ult_fu_394_p2;
wire   [11:0] tmp_2_fu_404_p4;
wire   [11:0] tmpWradDiffVal_V_fu_413_p2;
wire   [14:0] tsRaw_V_1_fu_418_p3;
wire   [15:0] tsRaw_V_1_cast_fu_426_p1;
wire   [15:0] p_Result_s_fu_387_p3;
wire   [13:0] tmp_fu_463_p4;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 xStreamIn_V_V_0_sel_rd = 1'b0;
#0 xStreamIn_V_V_0_sel_wr = 1'b0;
#0 xStreamIn_V_V_0_state = 2'd0;
#0 yStreamIn_V_V_0_sel_rd = 1'b0;
#0 yStreamIn_V_V_0_sel_wr = 1'b0;
#0 yStreamIn_V_V_0_state = 2'd0;
#0 tsStreamIn_V_V_0_sel_rd = 1'b0;
#0 tsStreamIn_V_V_0_sel_wr = 1'b0;
#0 tsStreamIn_V_V_0_state = 2'd0;
#0 polStreamIn_V_V_0_sel_rd = 1'b0;
#0 polStreamIn_V_V_0_sel_wr = 1'b0;
#0 polStreamIn_V_V_0_state = 2'd0;
#0 custDataStreamIn_V_V_0_sel_rd = 1'b0;
#0 custDataStreamIn_V_V_0_sel_wr = 1'b0;
#0 custDataStreamIn_V_V_0_state = 2'd0;
#0 streamOut_V_V_1_sel_rd = 1'b0;
#0 streamOut_V_V_1_sel_wr = 1'b0;
#0 streamOut_V_V_1_state = 2'd0;
#0 glLastRotateTs_V = 64'd0;
#0 glRotateDeltaTs_V = 63'd0;
#0 glLastTS_V = 64'd0;
#0 glLastTsWrap_V = 49'd0;
#0 glLastY_V = 16'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_reg_ioackin_tsReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_glLastTSReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_yReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_glLastYReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_nonMonTSDiffFlgReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_tsWrappedVal_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_rotateInfoOutReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_tsDiffFlgReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_yDiffFlgReg_V_dummy_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_glLastTSReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_glLastTSReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_glLastTSReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_glLastYReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_glLastYReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_glLastYReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_nonMonTSDiffFlgReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_nonMonTSDiffFlgReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_nonMonTSDiffFlgReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_rotateInfoOutReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage1_11001)) begin
                ap_reg_ioackin_rotateInfoOutReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_rotateInfoOutReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_tsDiffFlgReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage2_11001)) begin
                ap_reg_ioackin_tsDiffFlgReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_tsDiffFlgReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_tsReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_tsReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_tsReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_tsWrappedVal_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_tsWrappedVal_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_tsWrappedVal_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_yDiffFlgReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage2_11001)) begin
                ap_reg_ioackin_yDiffFlgReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_yDiffFlgReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_yReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_yReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_yReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((custDataStreamIn_V_V_0_ack_out == 1'b1) & (custDataStreamIn_V_V_0_vld_out == 1'b1))) begin
            custDataStreamIn_V_V_0_sel_rd <= ~custDataStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((custDataStreamIn_V_V_0_ack_in == 1'b1) & (custDataStreamIn_V_V_0_vld_in == 1'b1))) begin
            custDataStreamIn_V_V_0_sel_wr <= ~custDataStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((custDataStreamIn_V_V_0_state == 2'd2) & (custDataStreamIn_V_V_0_vld_in == 1'b0)) | ((custDataStreamIn_V_V_0_state == 2'd3) & (custDataStreamIn_V_V_0_vld_in == 1'b0) & (custDataStreamIn_V_V_0_ack_out == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd2;
        end else if ((((custDataStreamIn_V_V_0_state == 2'd1) & (custDataStreamIn_V_V_0_ack_out == 1'b0)) | ((custDataStreamIn_V_V_0_state == 2'd3) & (custDataStreamIn_V_V_0_ack_out == 1'b0) & (custDataStreamIn_V_V_0_vld_in == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((custDataStreamIn_V_V_0_vld_in == 1'b0) & (custDataStreamIn_V_V_0_ack_out == 1'b1)) & ~((custDataStreamIn_V_V_0_ack_out == 1'b0) & (custDataStreamIn_V_V_0_vld_in == 1'b1)) & (custDataStreamIn_V_V_0_state == 2'd3)) | ((custDataStreamIn_V_V_0_state == 2'd1) & (custDataStreamIn_V_V_0_ack_out == 1'b1)) | ((custDataStreamIn_V_V_0_state == 2'd2) & (custDataStreamIn_V_V_0_vld_in == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd3;
        end else begin
            custDataStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_ack_out == 1'b1) & (polStreamIn_V_V_0_vld_out == 1'b1))) begin
            polStreamIn_V_V_0_sel_rd <= ~polStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_ack_in == 1'b1) & (polStreamIn_V_V_0_vld_in == 1'b1))) begin
            polStreamIn_V_V_0_sel_wr <= ~polStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((polStreamIn_V_V_0_state == 2'd2) & (polStreamIn_V_V_0_vld_in == 1'b0)) | ((polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd2;
        end else if ((((polStreamIn_V_V_0_state == 2'd1) & (polStreamIn_V_V_0_ack_out == 1'b0)) | ((polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1)) & ~((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1)) & (polStreamIn_V_V_0_state == 2'd3)) | ((polStreamIn_V_V_0_state == 2'd1) & (polStreamIn_V_V_0_ack_out == 1'b1)) | ((polStreamIn_V_V_0_state == 2'd2) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd3;
        end else begin
            polStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        streamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((streamOut_V_V_1_ack_out == 1'b1) & (streamOut_V_V_1_vld_out == 1'b1))) begin
            streamOut_V_V_1_sel_rd <= ~streamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        streamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((streamOut_V_V_1_ack_in == 1'b1) & (streamOut_V_V_1_vld_in == 1'b1))) begin
            streamOut_V_V_1_sel_wr <= ~streamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        streamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((streamOut_V_V_1_state == 2'd2) & (streamOut_V_V_1_vld_in == 1'b0)) | ((streamOut_V_V_1_state == 2'd3) & (streamOut_V_V_1_vld_in == 1'b0) & (streamOut_V_V_1_ack_out == 1'b1)))) begin
            streamOut_V_V_1_state <= 2'd2;
        end else if ((((streamOut_V_V_1_state == 2'd1) & (streamOut_V_V_1_ack_out == 1'b0)) | ((streamOut_V_V_1_state == 2'd3) & (streamOut_V_V_1_ack_out == 1'b0) & (streamOut_V_V_1_vld_in == 1'b1)))) begin
            streamOut_V_V_1_state <= 2'd1;
        end else if (((~((streamOut_V_V_1_vld_in == 1'b0) & (streamOut_V_V_1_ack_out == 1'b1)) & ~((streamOut_V_V_1_ack_out == 1'b0) & (streamOut_V_V_1_vld_in == 1'b1)) & (streamOut_V_V_1_state == 2'd3)) | ((streamOut_V_V_1_state == 2'd1) & (streamOut_V_V_1_ack_out == 1'b1)) | ((streamOut_V_V_1_state == 2'd2) & (streamOut_V_V_1_vld_in == 1'b1)))) begin
            streamOut_V_V_1_state <= 2'd3;
        end else begin
            streamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_ack_out == 1'b1) & (tsStreamIn_V_V_0_vld_out == 1'b1))) begin
            tsStreamIn_V_V_0_sel_rd <= ~tsStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_ack_in == 1'b1) & (tsStreamIn_V_V_0_vld_in == 1'b1))) begin
            tsStreamIn_V_V_0_sel_wr <= ~tsStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((tsStreamIn_V_V_0_state == 2'd2) & (tsStreamIn_V_V_0_vld_in == 1'b0)) | ((tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end else if ((((tsStreamIn_V_V_0_state == 2'd1) & (tsStreamIn_V_V_0_ack_out == 1'b0)) | ((tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1)) & ~((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1)) & (tsStreamIn_V_V_0_state == 2'd3)) | ((tsStreamIn_V_V_0_state == 2'd1) & (tsStreamIn_V_V_0_ack_out == 1'b1)) | ((tsStreamIn_V_V_0_state == 2'd2) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd3;
        end else begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_ack_out == 1'b1) & (xStreamIn_V_V_0_vld_out == 1'b1))) begin
            xStreamIn_V_V_0_sel_rd <= ~xStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_ack_in == 1'b1) & (xStreamIn_V_V_0_vld_in == 1'b1))) begin
            xStreamIn_V_V_0_sel_wr <= ~xStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((xStreamIn_V_V_0_state == 2'd2) & (xStreamIn_V_V_0_vld_in == 1'b0)) | ((xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd2;
        end else if ((((xStreamIn_V_V_0_state == 2'd1) & (xStreamIn_V_V_0_ack_out == 1'b0)) | ((xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd1;
        end else if ((((xStreamIn_V_V_0_state == 2'd1) & (xStreamIn_V_V_0_ack_out == 1'b1)) | ((xStreamIn_V_V_0_state == 2'd2) & (xStreamIn_V_V_0_vld_in == 1'b1)) | (~((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1)) & ~((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1)) & (xStreamIn_V_V_0_state == 2'd3)))) begin
            xStreamIn_V_V_0_state <= 2'd3;
        end else begin
            xStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_ack_out == 1'b1) & (yStreamIn_V_V_0_vld_out == 1'b1))) begin
            yStreamIn_V_V_0_sel_rd <= ~yStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_ack_in == 1'b1) & (yStreamIn_V_V_0_vld_in == 1'b1))) begin
            yStreamIn_V_V_0_sel_wr <= ~yStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((yStreamIn_V_V_0_state == 2'd2) & (yStreamIn_V_V_0_vld_in == 1'b0)) | ((yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd2;
        end else if ((((yStreamIn_V_V_0_state == 2'd1) & (yStreamIn_V_V_0_ack_out == 1'b0)) | ((yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1)) & ~((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1)) & (yStreamIn_V_V_0_state == 2'd3)) | ((yStreamIn_V_V_0_state == 2'd1) & (yStreamIn_V_V_0_ack_out == 1'b1)) | ((yStreamIn_V_V_0_state == 2'd2) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd3;
        end else begin
            yStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd0) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd1) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ap_phi_reg_pp0_iter0_p_0144_1_reg_233 <= 12'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter0_p_0144_1_reg_233 <= p_1_fu_438_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd0) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd1) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ap_phi_reg_pp0_iter0_p_0171_1_reg_218 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter0_p_0171_1_reg_218 <= rev1_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd0) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter0_p_082_1_reg_265 <= 1'd1;
    end else if ((((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd1) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ap_phi_reg_pp0_iter0_p_082_1_reg_265 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd0) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_s_fu_445_p2 == 1'd1) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ap_phi_reg_pp0_iter0_p_2_reg_248 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter0_p_2_reg_248 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_082_1_reg_265 <= ap_phi_reg_pp0_iter0_p_082_1_reg_265;
        ap_phi_reg_pp0_iter1_p_2_reg_248 <= ap_phi_reg_pp0_iter0_p_2_reg_248;
        glLastY_V <= tmp_V_8_reg_507;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamIn_V_V_0_load_A == 1'b1)) begin
        custDataStreamIn_V_V_0_payload_A <= custDataStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamIn_V_V_0_load_B == 1'b1)) begin
        custDataStreamIn_V_V_0_payload_B <= custDataStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_8_fu_313_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        glLastRotateTs_V <= tsStreamIn_V_V_0_data_out;
        glRotateDeltaTs_V <= tmp_7_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        glLastTS_V <= tsStreamIn_V_V_0_data_out;
        glLastTsWrap_V <= {{tsStreamIn_V_V_0_data_out[63:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        glLastTS_V_load_reg_544 <= glLastTS_V;
        tmp_4_reg_519 <= tmp_4_fu_301_p1;
        tmp_5_reg_524 <= tmp_5_fu_305_p1;
        tmp_6_reg_529 <= tmp_6_fu_309_p1;
        tmp_8_reg_539 <= custDataStreamIn_V_V_0_data_out[32'd10];
        tmp_9_reg_550 <= tmp_9_fu_355_p2;
        tmp_9_reg_550_pp0_iter1_reg <= tmp_9_reg_550;
        tmp_V_6_reg_500 <= tsStreamIn_V_V_0_data_out;
        tmp_V_8_reg_507 <= xStreamIn_V_V_0_data_out;
        tmp_V_9_reg_534 <= custDataStreamIn_V_V_0_data_out;
        tmp_V_reg_514 <= tmp_V_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_A == 1'b1)) begin
        polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_B == 1'b1)) begin
        polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((streamOut_V_V_1_load_A == 1'b1)) begin
        streamOut_V_V_1_payload_A <= streamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((streamOut_V_V_1_load_B == 1'b1)) begin
        streamOut_V_V_1_payload_B <= streamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_9_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_12_reg_560 <= tmp_12_fu_371_p1;
        tmp_1_reg_554 <= tmp_1_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_9_reg_550 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_s_reg_580 <= tmp_s_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_A == 1'b1)) begin
        tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_B == 1'b1)) begin
        tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_A == 1'b1)) begin
        xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_B == 1'b1)) begin
        xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_A == 1'b1)) begin
        yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_B == 1'b1)) begin
        yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        custDataStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        custDataStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((custDataStreamIn_V_V_0_sel == 1'b1)) begin
        custDataStreamIn_V_V_0_data_out = custDataStreamIn_V_V_0_payload_B;
    end else begin
        custDataStreamIn_V_V_0_data_out = custDataStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        custDataStreamIn_V_V_TDATA_blk_n = custDataStreamIn_V_V_0_state[1'd0];
    end else begin
        custDataStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_glLastTSReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        glLastTSReg_V_ap_vld = 1'b1;
    end else begin
        glLastTSReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_glLastYReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        glLastYReg_V_ap_vld = 1'b1;
    end else begin
        glLastYReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_nonMonTSDiffFlgReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        polStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        polStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamIn_V_V_0_sel == 1'b1)) begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_B;
    end else begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        polStreamIn_V_V_TDATA_blk_n = polStreamIn_V_V_0_state[1'd0];
    end else begin
        polStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_rotateInfoOutReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        rotateInfoOutReg_V_ap_vld = 1'b1;
    end else begin
        rotateInfoOutReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_01001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_predicate_op83_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_predicate_op81_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        streamOut_V_V_1_data_in = p_Result_3_fu_476_p5;
    end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (tmp_9_reg_550 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_predicate_op74_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_predicate_op72_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        streamOut_V_V_1_data_in = p_Result_2_fu_471_p1;
    end else if ((((1'b0 == ap_block_pp0_stage3_01001) & (ap_predicate_op57_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_01001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        streamOut_V_V_1_data_in = p_Result_1_fu_450_p3;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        streamOut_V_V_1_data_in = tsRaw_V_fu_430_p3;
    end else begin
        streamOut_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((streamOut_V_V_1_sel == 1'b1)) begin
        streamOut_V_V_1_data_out = streamOut_V_V_1_payload_B;
    end else begin
        streamOut_V_V_1_data_out = streamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op83_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op81_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_predicate_op57_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_550 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op74_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op72_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        streamOut_V_V_1_vld_in = 1'b1;
    end else begin
        streamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_550_pp0_iter1_reg == 1'd1) & (tmp_s_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_s_reg_580 == 1'd0) & (tmp_9_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_s_reg_580 == 1'd1) & (tmp_9_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_9_reg_550 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_s_reg_580 == 1'd1) & (tmp_9_reg_550_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_9_reg_550_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (ap_predicate_op57_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (tmp_9_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_s_reg_580 == 1'd0) & (tmp_9_reg_550 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_s_reg_580 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_550 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_9_reg_550 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        streamOut_V_V_TDATA_blk_n = streamOut_V_V_1_state[1'd1];
    end else begin
        streamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_tsDiffFlgReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tsDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        tsDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_tsReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tsReg_V_ap_vld = 1'b1;
    end else begin
        tsReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tsStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        tsStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamIn_V_V_0_sel == 1'b1)) begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_B;
    end else begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tsStreamIn_V_V_TDATA_blk_n = tsStreamIn_V_V_0_state[1'd0];
    end else begin
        tsStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_tsWrappedVal_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tsWrappedVal_V_ap_vld = 1'b1;
    end else begin
        tsWrappedVal_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        xStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        xStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamIn_V_V_0_sel == 1'b1)) begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_B;
    end else begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        xStreamIn_V_V_TDATA_blk_n = xStreamIn_V_V_0_state[1'd0];
    end else begin
        xStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_yDiffFlgReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        yDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        yDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_yReg_V_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        yReg_V_ap_vld = 1'b1;
    end else begin
        yReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        yStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        yStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamIn_V_V_0_sel == 1'b1)) begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_B;
    end else begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        yStreamIn_V_V_TDATA_blk_n = yStreamIn_V_V_0_state[1'd0];
    end else begin
        yStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((streamOut_V_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((streamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state7_io))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((streamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state7_io))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_9_reg_550 == 1'd0) & (streamOut_V_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((streamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1)) | ((tmp_9_reg_550 == 1'd0) & (streamOut_V_V_1_ack_in == 1'b0)));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((streamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op74_write_state5 == 1'b1)) | ((streamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op72_write_state5 == 1'b1)) | ((tmp_9_reg_550 == 1'd0) & (streamOut_V_V_1_ack_in == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = (((streamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op83_write_state6 == 1'b1)) | ((streamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op81_write_state6 == 1'b1)) | ((tmp_9_reg_550 == 1'd0) & (streamOut_V_V_1_ack_in == 1'b0)));
end

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = (((streamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op112_write_state7 == 1'b1)) | ((streamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op111_write_state7 == 1'b1)) | ((tmp_9_reg_550_pp0_iter1_reg == 1'd0) & (streamOut_V_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state7_pp0_stage2_iter1 = (streamOut_V_V_1_ack_in == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op111_write_state7 = ((tmp_9_reg_550_pp0_iter1_reg == 1'd1) & (tmp_s_reg_580 == 1'd0));
end

always @ (*) begin
    ap_predicate_op112_write_state7 = ((tmp_s_reg_580 == 1'd1) & (tmp_9_reg_550_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op57_write_state4 = ((tmp_s_reg_580 == 1'd0) & (tmp_9_reg_550 == 1'd1));
end

always @ (*) begin
    ap_predicate_op72_write_state5 = ((tmp_s_reg_580 == 1'd0) & (tmp_9_reg_550 == 1'd1));
end

always @ (*) begin
    ap_predicate_op74_write_state5 = ((tmp_s_reg_580 == 1'd1) & (tmp_9_reg_550 == 1'd1));
end

always @ (*) begin
    ap_predicate_op81_write_state6 = ((tmp_s_reg_580 == 1'd0) & (tmp_9_reg_550 == 1'd1));
end

always @ (*) begin
    ap_predicate_op83_write_state6 = ((tmp_s_reg_580 == 1'd1) & (tmp_9_reg_550 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign custDataStreamIn_V_V_0_ack_in = custDataStreamIn_V_V_0_state[1'd1];

assign custDataStreamIn_V_V_0_load_A = (~custDataStreamIn_V_V_0_sel_wr & custDataStreamIn_V_V_0_state_cmp_full);

assign custDataStreamIn_V_V_0_load_B = (custDataStreamIn_V_V_0_state_cmp_full & custDataStreamIn_V_V_0_sel_wr);

assign custDataStreamIn_V_V_0_sel = custDataStreamIn_V_V_0_sel_rd;

assign custDataStreamIn_V_V_0_state_cmp_full = ((custDataStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign custDataStreamIn_V_V_0_vld_in = custDataStreamIn_V_V_TVALID;

assign custDataStreamIn_V_V_0_vld_out = custDataStreamIn_V_V_0_state[1'd0];

assign custDataStreamIn_V_V_TREADY = custDataStreamIn_V_V_0_state[1'd1];

assign glLastTSReg_V = glLastTS_V_load_reg_544;

assign glLastYReg_V = glLastY_V;

assign nonMonTSDiffFlgReg_V = ap_phi_reg_pp0_iter0_p_0171_1_reg_218;

assign p_1_fu_438_p3 = ((tmp_1_reg_554[0:0] === 1'b1) ? tmpWradDiffVal_V_fu_413_p2 : 12'd0);

assign p_Result_1_fu_450_p3 = {{4'd1}, {tmp_5_reg_524}};

assign p_Result_2_fu_471_p1 = tmp_fu_463_p4;

assign p_Result_3_fu_476_p5 = {{5'd13}, {tmp_V_9_reg_534[10:0]}};

assign p_Result_s_fu_387_p3 = {{1'd1}, {tmp_4_reg_519}};

assign polStreamIn_V_V_0_ack_in = polStreamIn_V_V_0_state[1'd1];

assign polStreamIn_V_V_0_load_A = (polStreamIn_V_V_0_state_cmp_full & ~polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_load_B = (polStreamIn_V_V_0_state_cmp_full & polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_sel = polStreamIn_V_V_0_sel_rd;

assign polStreamIn_V_V_0_state_cmp_full = ((polStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamIn_V_V_0_vld_in = polStreamIn_V_V_TVALID;

assign polStreamIn_V_V_0_vld_out = polStreamIn_V_V_0_state[1'd0];

assign polStreamIn_V_V_TREADY = polStreamIn_V_V_0_state[1'd1];

assign rev1_fu_398_p2 = (ult_fu_394_p2 ^ 1'd1);

assign rotateInfoOutReg_V = {{tmp_8_reg_539}, {glRotateDeltaTs_V}};

assign streamOut_V_V_1_ack_in = streamOut_V_V_1_state[1'd1];

assign streamOut_V_V_1_ack_out = streamOut_V_V_TREADY;

assign streamOut_V_V_1_load_A = (streamOut_V_V_1_state_cmp_full & ~streamOut_V_V_1_sel_wr);

assign streamOut_V_V_1_load_B = (streamOut_V_V_1_state_cmp_full & streamOut_V_V_1_sel_wr);

assign streamOut_V_V_1_sel = streamOut_V_V_1_sel_rd;

assign streamOut_V_V_1_state_cmp_full = ((streamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign streamOut_V_V_1_vld_out = streamOut_V_V_1_state[1'd0];

assign streamOut_V_V_TDATA = streamOut_V_V_1_data_out;

assign streamOut_V_V_TVALID = streamOut_V_V_1_state[1'd0];

assign tmpWradDiffVal_V_fu_413_p2 = (tmp_2_fu_404_p4 - tmp_12_reg_560);

assign tmp_10_fu_321_p1 = tsStreamIn_V_V_0_data_out[62:0];

assign tmp_11_fu_329_p1 = glLastRotateTs_V[62:0];

assign tmp_12_fu_371_p1 = glLastTsWrap_V[11:0];

assign tmp_1_fu_365_p2 = ((tsWrap_V_fu_291_p4 > glLastTsWrap_V) ? 1'b1 : 1'b0);

assign tmp_2_fu_404_p4 = {{tmp_V_6_reg_500[26:15]}};

assign tmp_4_fu_301_p1 = tsStreamIn_V_V_0_data_out[14:0];

assign tmp_5_fu_305_p1 = xStreamIn_V_V_0_data_out[11:0];

assign tmp_6_fu_309_p1 = yStreamIn_V_V_0_data_out[11:0];

assign tmp_7_fu_333_p2 = (tmp_10_fu_321_p1 - tmp_11_fu_329_p1);

assign tmp_8_fu_313_p3 = custDataStreamIn_V_V_0_data_out[32'd10];

assign tmp_9_fu_355_p2 = ((tsStreamIn_V_V_0_data_out == glLastTS_V) ? 1'b1 : 1'b0);

assign tmp_V_fu_287_p1 = polStreamIn_V_V_0_data_out[0:0];

assign tmp_fu_463_p4 = {{{{1'd1}, {tmp_V_reg_514}}}, {tmp_6_reg_529}};

assign tmp_s_fu_445_p2 = ((tmp_V_8_reg_507 == glLastY_V) ? 1'b1 : 1'b0);

assign tsDiffFlgReg_V = ap_phi_reg_pp0_iter1_p_2_reg_248;

assign tsRaw_V_1_cast_fu_426_p1 = tsRaw_V_1_fu_418_p3;

assign tsRaw_V_1_fu_418_p3 = {{3'd7}, {tmpWradDiffVal_V_fu_413_p2}};

assign tsRaw_V_fu_430_p3 = ((tmp_1_reg_554[0:0] === 1'b1) ? tsRaw_V_1_cast_fu_426_p1 : p_Result_s_fu_387_p3);

assign tsReg_V = tmp_V_6_reg_500;

assign tsStreamIn_V_V_0_ack_in = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamIn_V_V_0_load_A = (tsStreamIn_V_V_0_state_cmp_full & ~tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_load_B = (tsStreamIn_V_V_0_state_cmp_full & tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_sel = tsStreamIn_V_V_0_sel_rd;

assign tsStreamIn_V_V_0_state_cmp_full = ((tsStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamIn_V_V_0_vld_in = tsStreamIn_V_V_TVALID;

assign tsStreamIn_V_V_0_vld_out = tsStreamIn_V_V_0_state[1'd0];

assign tsStreamIn_V_V_TREADY = tsStreamIn_V_V_0_state[1'd1];

assign tsWrap_V_fu_291_p4 = {{tsStreamIn_V_V_0_data_out[63:15]}};

assign tsWrappedVal_V = ap_phi_reg_pp0_iter0_p_0144_1_reg_233;

assign ult_fu_394_p2 = ((glLastTS_V_load_reg_544 < tmp_V_6_reg_500) ? 1'b1 : 1'b0);

assign xStreamIn_V_V_0_ack_in = xStreamIn_V_V_0_state[1'd1];

assign xStreamIn_V_V_0_load_A = (xStreamIn_V_V_0_state_cmp_full & ~xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_load_B = (xStreamIn_V_V_0_state_cmp_full & xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_sel = xStreamIn_V_V_0_sel_rd;

assign xStreamIn_V_V_0_state_cmp_full = ((xStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamIn_V_V_0_vld_in = xStreamIn_V_V_TVALID;

assign xStreamIn_V_V_0_vld_out = xStreamIn_V_V_0_state[1'd0];

assign xStreamIn_V_V_TREADY = xStreamIn_V_V_0_state[1'd1];

assign yDiffFlgReg_V = ap_phi_reg_pp0_iter1_p_082_1_reg_265;

assign yReg_V = tmp_V_8_reg_507;

assign yStreamIn_V_V_0_ack_in = yStreamIn_V_V_0_state[1'd1];

assign yStreamIn_V_V_0_load_A = (yStreamIn_V_V_0_state_cmp_full & ~yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_load_B = (yStreamIn_V_V_0_state_cmp_full & yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_sel = yStreamIn_V_V_0_sel_rd;

assign yStreamIn_V_V_0_state_cmp_full = ((yStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamIn_V_V_0_vld_in = yStreamIn_V_V_TVALID;

assign yStreamIn_V_V_0_vld_out = yStreamIn_V_V_0_state[1'd0];

assign yStreamIn_V_V_TREADY = yStreamIn_V_V_0_state[1'd1];

endmodule //XYTSStreamToRawStream
