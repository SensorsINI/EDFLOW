-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity EFAST_process_data is
port (
    xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    isFinalCornerStream_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    xStreamIn_V_V_TVALID : IN STD_LOGIC;
    xStreamIn_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn_V_V_TVALID : IN STD_LOGIC;
    yStreamIn_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn_V_V_TVALID : IN STD_LOGIC;
    polStreamIn_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn_V_V_TREADY : OUT STD_LOGIC;
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    polStreamOut_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    isFinalCornerStream_V_V_TVALID : OUT STD_LOGIC;
    isFinalCornerStream_V_V_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of EFAST_process_data is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "EFAST_process_data,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.723250,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=456,HLS_SYN_DSP=3,HLS_SYN_FF=5495,HLS_SYN_LUT=7564}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal truncateStream_U0_ap_start : STD_LOGIC;
    signal truncateStream_U0_ap_done : STD_LOGIC;
    signal truncateStream_U0_ap_continue : STD_LOGIC;
    signal truncateStream_U0_ap_idle : STD_LOGIC;
    signal truncateStream_U0_ap_ready : STD_LOGIC;
    signal truncateStream_U0_packetEventDataStrea_din : STD_LOGIC_VECTOR (95 downto 0);
    signal truncateStream_U0_packetEventDataStrea_write : STD_LOGIC;
    signal truncateStream_U0_xStreamOut_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal truncateStream_U0_xStreamOut_V_V_write : STD_LOGIC;
    signal truncateStream_U0_yStreamOut_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal truncateStream_U0_yStreamOut_V_V_write : STD_LOGIC;
    signal truncateStream_U0_polStreamOut_V_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal truncateStream_U0_polStreamOut_V_V_write : STD_LOGIC;
    signal truncateStream_U0_tsStreamOut_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal truncateStream_U0_tsStreamOut_V_V_write : STD_LOGIC;
    signal truncateStream_U0_start_out : STD_LOGIC;
    signal truncateStream_U0_start_write : STD_LOGIC;
    signal truncateStream_U0_xStreamIn_V_V_TREADY : STD_LOGIC;
    signal truncateStream_U0_yStreamIn_V_V_TREADY : STD_LOGIC;
    signal truncateStream_U0_polStreamIn_V_V_TREADY : STD_LOGIC;
    signal truncateStream_U0_tsStreamIn_V_V_TREADY : STD_LOGIC;
    signal initStageInterleaveS_U0_ap_start : STD_LOGIC := '0';
    signal initStageInterleaveS_U0_ap_done : STD_LOGIC;
    signal initStageInterleaveS_U0_ap_continue : STD_LOGIC;
    signal initStageInterleaveS_U0_ap_idle : STD_LOGIC;
    signal initStageInterleaveS_U0_ap_ready : STD_LOGIC;
    signal initStageInterleaveS_U0_glFeedbackCounter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal initStageInterleaveS_U0_glFeedbackCounter_out_write : STD_LOGIC;
    signal initStageInterleaveS_U0_glStageInStream_V_V_read : STD_LOGIC;
    signal initStageInterleaveS_U0_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_channel_done_stageOut_V : STD_LOGIC;
    signal stageOut_V_full_n : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_start : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_done : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_continue : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_idle : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_ready : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_xStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_yStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_tsStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_polStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_outputDataStream_V_V_din : STD_LOGIC_VECTOR (639 downto 0);
    signal rwSAEPerfectLoopStre_U0_outputDataStream_V_V_write : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_size2_V_out_din : STD_LOGIC_VECTOR (4 downto 0);
    signal rwSAEPerfectLoopStre_U0_size2_V_out_write : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_channel_done_size1_V : STD_LOGIC;
    signal size1_V_full_n : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_ap_start : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_ap_done : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_ap_continue : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_ap_idle : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_ap_ready : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_tsStream_V_V_read : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_ap_return : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_channel_done_idxDataWide_V : STD_LOGIC;
    signal idxDataWide_V_full_n : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_ap_start : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_ap_done : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_ap_continue : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_ap_idle : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_ap_ready : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_size2_V_read : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_channel_done_isStageCorner_V : STD_LOGIC;
    signal isStageCorner_V_full_n : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_start : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_done : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_continue : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_idle : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_ready : STD_LOGIC;
    signal feedbackInterleaveSt_U0_isFinalCornerStream_V_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal feedbackInterleaveSt_U0_isFinalCornerStream_V_V_write : STD_LOGIC;
    signal feedbackInterleaveSt_U0_glFeedbackCounter_read : STD_LOGIC;
    signal feedbackInterleaveSt_U0_glStageInStream_V_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal feedbackInterleaveSt_U0_glStageInStream_V_V_write : STD_LOGIC;
    signal combineOutputStream_U0_ap_start : STD_LOGIC;
    signal combineOutputStream_U0_ap_done : STD_LOGIC;
    signal combineOutputStream_U0_ap_continue : STD_LOGIC;
    signal combineOutputStream_U0_ap_idle : STD_LOGIC;
    signal combineOutputStream_U0_ap_ready : STD_LOGIC;
    signal combineOutputStream_U0_packetEventDataStrea_read : STD_LOGIC;
    signal combineOutputStream_U0_stageCornerStream_V_s_read : STD_LOGIC;
    signal combineOutputStream_U0_xStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal combineOutputStream_U0_xStreamOut_V_V_TVALID : STD_LOGIC;
    signal combineOutputStream_U0_yStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal combineOutputStream_U0_yStreamOut_V_V_TVALID : STD_LOGIC;
    signal combineOutputStream_U0_polStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal combineOutputStream_U0_polStreamOut_V_V_TVALID : STD_LOGIC;
    signal combineOutputStream_U0_tsStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal combineOutputStream_U0_tsStreamOut_V_V_TVALID : STD_LOGIC;
    signal combineOutputStream_U0_isFinalCornerStream_s_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal combineOutputStream_U0_isFinalCornerStream_s_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal xStream_V_V_full_n : STD_LOGIC;
    signal xStream_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal xStream_V_V_empty_n : STD_LOGIC;
    signal yStream_V_V_full_n : STD_LOGIC;
    signal yStream_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal yStream_V_V_empty_n : STD_LOGIC;
    signal polStream_V_V_full_n : STD_LOGIC;
    signal polStream_V_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal polStream_V_V_empty_n : STD_LOGIC;
    signal tsStream_V_V_full_n : STD_LOGIC;
    signal tsStream_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tsStream_V_V_empty_n : STD_LOGIC;
    signal pktEventDataStream_V_full_n : STD_LOGIC;
    signal pktEventDataStream_V_dout : STD_LOGIC_VECTOR (95 downto 0);
    signal pktEventDataStream_V_empty_n : STD_LOGIC;
    signal glFeedbackCounter_c_full_n : STD_LOGIC;
    signal glFeedbackCounter_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal glFeedbackCounter_c_empty_n : STD_LOGIC;
    signal glStageInStream_V_V_full_n : STD_LOGIC;
    signal glStageInStream_V_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal glStageInStream_V_V_empty_n : STD_LOGIC;
    signal stageOut_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal stageOut_V_empty_n : STD_LOGIC;
    signal inStream_V_V_full_n : STD_LOGIC;
    signal inStream_V_V_dout : STD_LOGIC_VECTOR (639 downto 0);
    signal inStream_V_V_empty_n : STD_LOGIC;
    signal size2_V_c_full_n : STD_LOGIC;
    signal size2_V_c_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal size2_V_c_empty_n : STD_LOGIC;
    signal size1_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal size1_V_empty_n : STD_LOGIC;
    signal idxDataWide_V_dout : STD_LOGIC_VECTOR (99 downto 0);
    signal idxDataWide_V_empty_n : STD_LOGIC;
    signal isStageCorner_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal isStageCorner_V_empty_n : STD_LOGIC;
    signal stageCornerStream_V_s_full_n : STD_LOGIC;
    signal stageCornerStream_V_s_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal stageCornerStream_V_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_combineOutputStream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_combineOutputStream_U0_full_n : STD_LOGIC;
    signal start_for_combineOutputStream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_combineOutputStream_U0_empty_n : STD_LOGIC;
    signal initStageInterleaveS_U0_start_full_n : STD_LOGIC;
    signal initStageInterleaveS_U0_start_write : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_start_full_n : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_start_write : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_start_full_n : STD_LOGIC;
    signal sortedIdxStreamV3_5_U0_start_write : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_start_full_n : STD_LOGIC;
    signal checkIdxGeneralV3_5_U0_start_write : STD_LOGIC;
    signal feedbackInterleaveSt_U0_start_full_n : STD_LOGIC;
    signal feedbackInterleaveSt_U0_start_write : STD_LOGIC;
    signal combineOutputStream_U0_start_full_n : STD_LOGIC;
    signal combineOutputStream_U0_start_write : STD_LOGIC;

    component truncateStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        packetEventDataStrea_din : OUT STD_LOGIC_VECTOR (95 downto 0);
        packetEventDataStrea_full_n : IN STD_LOGIC;
        packetEventDataStrea_write : OUT STD_LOGIC;
        xStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        xStreamOut_V_V_full_n : IN STD_LOGIC;
        xStreamOut_V_V_write : OUT STD_LOGIC;
        yStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        yStreamOut_V_V_full_n : IN STD_LOGIC;
        yStreamOut_V_V_write : OUT STD_LOGIC;
        polStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        polStreamOut_V_V_full_n : IN STD_LOGIC;
        polStreamOut_V_V_write : OUT STD_LOGIC;
        tsStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tsStreamOut_V_V_full_n : IN STD_LOGIC;
        tsStreamOut_V_V_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        xStreamIn_V_V_TVALID : IN STD_LOGIC;
        xStreamIn_V_V_TREADY : OUT STD_LOGIC;
        yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        yStreamIn_V_V_TVALID : IN STD_LOGIC;
        yStreamIn_V_V_TREADY : OUT STD_LOGIC;
        polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        polStreamIn_V_V_TVALID : IN STD_LOGIC;
        polStreamIn_V_V_TREADY : OUT STD_LOGIC;
        tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        tsStreamIn_V_V_TVALID : IN STD_LOGIC;
        tsStreamIn_V_V_TREADY : OUT STD_LOGIC );
    end component;


    component initStageInterleaveS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        glFeedbackCounter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        glFeedbackCounter_out_full_n : IN STD_LOGIC;
        glFeedbackCounter_out_write : OUT STD_LOGIC;
        glStageInStream_V_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        glStageInStream_V_V_empty_n : IN STD_LOGIC;
        glStageInStream_V_V_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component rwSAEPerfectLoopStre IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xStream_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        xStream_V_V_empty_n : IN STD_LOGIC;
        xStream_V_V_read : OUT STD_LOGIC;
        yStream_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        yStream_V_V_empty_n : IN STD_LOGIC;
        yStream_V_V_read : OUT STD_LOGIC;
        tsStream_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tsStream_V_V_empty_n : IN STD_LOGIC;
        tsStream_V_V_read : OUT STD_LOGIC;
        polStream_V_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        polStream_V_V_empty_n : IN STD_LOGIC;
        polStream_V_V_read : OUT STD_LOGIC;
        outputDataStream_V_V_din : OUT STD_LOGIC_VECTOR (639 downto 0);
        outputDataStream_V_V_full_n : IN STD_LOGIC;
        outputDataStream_V_V_write : OUT STD_LOGIC;
        size2_V_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        size2_V_out_full_n : IN STD_LOGIC;
        size2_V_out_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component sortedIdxStreamV3_5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tsStream_V_V_dout : IN STD_LOGIC_VECTOR (639 downto 0);
        tsStream_V_V_empty_n : IN STD_LOGIC;
        tsStream_V_V_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component checkIdxGeneralV3_5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        size2_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        size2_V_empty_n : IN STD_LOGIC;
        size2_V_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (99 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component feedbackInterleaveSt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        isFinalCornerStream_V_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        isFinalCornerStream_V_V_full_n : IN STD_LOGIC;
        isFinalCornerStream_V_V_write : OUT STD_LOGIC;
        glFeedbackCounter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        glFeedbackCounter_empty_n : IN STD_LOGIC;
        glFeedbackCounter_read : OUT STD_LOGIC;
        glStageInStream_V_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        glStageInStream_V_V_full_n : IN STD_LOGIC;
        glStageInStream_V_V_write : OUT STD_LOGIC );
    end component;


    component combineOutputStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        packetEventDataStrea_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        packetEventDataStrea_empty_n : IN STD_LOGIC;
        packetEventDataStrea_read : OUT STD_LOGIC;
        stageCornerStream_V_s_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        stageCornerStream_V_s_empty_n : IN STD_LOGIC;
        stageCornerStream_V_s_read : OUT STD_LOGIC;
        xStreamOut_V_V_TREADY : IN STD_LOGIC;
        yStreamOut_V_V_TREADY : IN STD_LOGIC;
        polStreamOut_V_V_TREADY : IN STD_LOGIC;
        tsStreamOut_V_V_TREADY : IN STD_LOGIC;
        isFinalCornerStream_s_TREADY : IN STD_LOGIC;
        xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        xStreamOut_V_V_TVALID : OUT STD_LOGIC;
        yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        yStreamOut_V_V_TVALID : OUT STD_LOGIC;
        polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        polStreamOut_V_V_TVALID : OUT STD_LOGIC;
        tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
        isFinalCornerStream_s_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        isFinalCornerStream_s_TVALID : OUT STD_LOGIC );
    end component;


    component fifo_w10_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w96_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (95 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (95 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w640_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (639 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (639 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w5_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (4 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w5_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (4 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w100_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (99 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (99 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_combineeOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    truncateStream_U0 : component truncateStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => truncateStream_U0_ap_start,
        start_full_n => start_for_combineOutputStream_U0_full_n,
        ap_done => truncateStream_U0_ap_done,
        ap_continue => truncateStream_U0_ap_continue,
        ap_idle => truncateStream_U0_ap_idle,
        ap_ready => truncateStream_U0_ap_ready,
        packetEventDataStrea_din => truncateStream_U0_packetEventDataStrea_din,
        packetEventDataStrea_full_n => pktEventDataStream_V_full_n,
        packetEventDataStrea_write => truncateStream_U0_packetEventDataStrea_write,
        xStreamOut_V_V_din => truncateStream_U0_xStreamOut_V_V_din,
        xStreamOut_V_V_full_n => xStream_V_V_full_n,
        xStreamOut_V_V_write => truncateStream_U0_xStreamOut_V_V_write,
        yStreamOut_V_V_din => truncateStream_U0_yStreamOut_V_V_din,
        yStreamOut_V_V_full_n => yStream_V_V_full_n,
        yStreamOut_V_V_write => truncateStream_U0_yStreamOut_V_V_write,
        polStreamOut_V_V_din => truncateStream_U0_polStreamOut_V_V_din,
        polStreamOut_V_V_full_n => polStream_V_V_full_n,
        polStreamOut_V_V_write => truncateStream_U0_polStreamOut_V_V_write,
        tsStreamOut_V_V_din => truncateStream_U0_tsStreamOut_V_V_din,
        tsStreamOut_V_V_full_n => tsStream_V_V_full_n,
        tsStreamOut_V_V_write => truncateStream_U0_tsStreamOut_V_V_write,
        start_out => truncateStream_U0_start_out,
        start_write => truncateStream_U0_start_write,
        xStreamIn_V_V_TDATA => xStreamIn_V_V_TDATA,
        xStreamIn_V_V_TVALID => xStreamIn_V_V_TVALID,
        xStreamIn_V_V_TREADY => truncateStream_U0_xStreamIn_V_V_TREADY,
        yStreamIn_V_V_TDATA => yStreamIn_V_V_TDATA,
        yStreamIn_V_V_TVALID => yStreamIn_V_V_TVALID,
        yStreamIn_V_V_TREADY => truncateStream_U0_yStreamIn_V_V_TREADY,
        polStreamIn_V_V_TDATA => polStreamIn_V_V_TDATA,
        polStreamIn_V_V_TVALID => polStreamIn_V_V_TVALID,
        polStreamIn_V_V_TREADY => truncateStream_U0_polStreamIn_V_V_TREADY,
        tsStreamIn_V_V_TDATA => tsStreamIn_V_V_TDATA,
        tsStreamIn_V_V_TVALID => tsStreamIn_V_V_TVALID,
        tsStreamIn_V_V_TREADY => truncateStream_U0_tsStreamIn_V_V_TREADY);

    initStageInterleaveS_U0 : component initStageInterleaveS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => initStageInterleaveS_U0_ap_start,
        ap_done => initStageInterleaveS_U0_ap_done,
        ap_continue => initStageInterleaveS_U0_ap_continue,
        ap_idle => initStageInterleaveS_U0_ap_idle,
        ap_ready => initStageInterleaveS_U0_ap_ready,
        glFeedbackCounter_out_din => initStageInterleaveS_U0_glFeedbackCounter_out_din,
        glFeedbackCounter_out_full_n => glFeedbackCounter_c_full_n,
        glFeedbackCounter_out_write => initStageInterleaveS_U0_glFeedbackCounter_out_write,
        glStageInStream_V_V_dout => glStageInStream_V_V_dout,
        glStageInStream_V_V_empty_n => glStageInStream_V_V_empty_n,
        glStageInStream_V_V_read => initStageInterleaveS_U0_glStageInStream_V_V_read,
        ap_return => initStageInterleaveS_U0_ap_return);

    rwSAEPerfectLoopStre_U0 : component rwSAEPerfectLoopStre
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rwSAEPerfectLoopStre_U0_ap_start,
        ap_done => rwSAEPerfectLoopStre_U0_ap_done,
        ap_continue => rwSAEPerfectLoopStre_U0_ap_continue,
        ap_idle => rwSAEPerfectLoopStre_U0_ap_idle,
        ap_ready => rwSAEPerfectLoopStre_U0_ap_ready,
        xStream_V_V_dout => xStream_V_V_dout,
        xStream_V_V_empty_n => xStream_V_V_empty_n,
        xStream_V_V_read => rwSAEPerfectLoopStre_U0_xStream_V_V_read,
        yStream_V_V_dout => yStream_V_V_dout,
        yStream_V_V_empty_n => yStream_V_V_empty_n,
        yStream_V_V_read => rwSAEPerfectLoopStre_U0_yStream_V_V_read,
        tsStream_V_V_dout => tsStream_V_V_dout,
        tsStream_V_V_empty_n => tsStream_V_V_empty_n,
        tsStream_V_V_read => rwSAEPerfectLoopStre_U0_tsStream_V_V_read,
        polStream_V_V_dout => polStream_V_V_dout,
        polStream_V_V_empty_n => polStream_V_V_empty_n,
        polStream_V_V_read => rwSAEPerfectLoopStre_U0_polStream_V_V_read,
        outputDataStream_V_V_din => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_din,
        outputDataStream_V_V_full_n => inStream_V_V_full_n,
        outputDataStream_V_V_write => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_write,
        size2_V_out_din => rwSAEPerfectLoopStre_U0_size2_V_out_din,
        size2_V_out_full_n => size2_V_c_full_n,
        size2_V_out_write => rwSAEPerfectLoopStre_U0_size2_V_out_write,
        p_read => stageOut_V_dout,
        ap_return => rwSAEPerfectLoopStre_U0_ap_return);

    sortedIdxStreamV3_5_U0 : component sortedIdxStreamV3_5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sortedIdxStreamV3_5_U0_ap_start,
        ap_done => sortedIdxStreamV3_5_U0_ap_done,
        ap_continue => sortedIdxStreamV3_5_U0_ap_continue,
        ap_idle => sortedIdxStreamV3_5_U0_ap_idle,
        ap_ready => sortedIdxStreamV3_5_U0_ap_ready,
        tsStream_V_V_dout => inStream_V_V_dout,
        tsStream_V_V_empty_n => inStream_V_V_empty_n,
        tsStream_V_V_read => sortedIdxStreamV3_5_U0_tsStream_V_V_read,
        p_read => size1_V_dout,
        ap_return => sortedIdxStreamV3_5_U0_ap_return);

    checkIdxGeneralV3_5_U0 : component checkIdxGeneralV3_5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => checkIdxGeneralV3_5_U0_ap_start,
        ap_done => checkIdxGeneralV3_5_U0_ap_done,
        ap_continue => checkIdxGeneralV3_5_U0_ap_continue,
        ap_idle => checkIdxGeneralV3_5_U0_ap_idle,
        ap_ready => checkIdxGeneralV3_5_U0_ap_ready,
        size2_V_dout => size2_V_c_dout,
        size2_V_empty_n => size2_V_c_empty_n,
        size2_V_read => checkIdxGeneralV3_5_U0_size2_V_read,
        p_read => idxDataWide_V_dout,
        ap_return => checkIdxGeneralV3_5_U0_ap_return);

    feedbackInterleaveSt_U0 : component feedbackInterleaveSt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => feedbackInterleaveSt_U0_ap_start,
        ap_done => feedbackInterleaveSt_U0_ap_done,
        ap_continue => feedbackInterleaveSt_U0_ap_continue,
        ap_idle => feedbackInterleaveSt_U0_ap_idle,
        ap_ready => feedbackInterleaveSt_U0_ap_ready,
        p_read => isStageCorner_V_dout,
        isFinalCornerStream_V_V_din => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_din,
        isFinalCornerStream_V_V_full_n => stageCornerStream_V_s_full_n,
        isFinalCornerStream_V_V_write => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_write,
        glFeedbackCounter_dout => glFeedbackCounter_c_dout,
        glFeedbackCounter_empty_n => glFeedbackCounter_c_empty_n,
        glFeedbackCounter_read => feedbackInterleaveSt_U0_glFeedbackCounter_read,
        glStageInStream_V_V_din => feedbackInterleaveSt_U0_glStageInStream_V_V_din,
        glStageInStream_V_V_full_n => glStageInStream_V_V_full_n,
        glStageInStream_V_V_write => feedbackInterleaveSt_U0_glStageInStream_V_V_write);

    combineOutputStream_U0 : component combineOutputStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => combineOutputStream_U0_ap_start,
        ap_done => combineOutputStream_U0_ap_done,
        ap_continue => combineOutputStream_U0_ap_continue,
        ap_idle => combineOutputStream_U0_ap_idle,
        ap_ready => combineOutputStream_U0_ap_ready,
        packetEventDataStrea_dout => pktEventDataStream_V_dout,
        packetEventDataStrea_empty_n => pktEventDataStream_V_empty_n,
        packetEventDataStrea_read => combineOutputStream_U0_packetEventDataStrea_read,
        stageCornerStream_V_s_dout => stageCornerStream_V_s_dout,
        stageCornerStream_V_s_empty_n => stageCornerStream_V_s_empty_n,
        stageCornerStream_V_s_read => combineOutputStream_U0_stageCornerStream_V_s_read,
        xStreamOut_V_V_TREADY => xStreamOut_V_V_TREADY,
        yStreamOut_V_V_TREADY => yStreamOut_V_V_TREADY,
        polStreamOut_V_V_TREADY => polStreamOut_V_V_TREADY,
        tsStreamOut_V_V_TREADY => tsStreamOut_V_V_TREADY,
        isFinalCornerStream_s_TREADY => isFinalCornerStream_V_V_TREADY,
        xStreamOut_V_V_TDATA => combineOutputStream_U0_xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID => combineOutputStream_U0_xStreamOut_V_V_TVALID,
        yStreamOut_V_V_TDATA => combineOutputStream_U0_yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID => combineOutputStream_U0_yStreamOut_V_V_TVALID,
        polStreamOut_V_V_TDATA => combineOutputStream_U0_polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID => combineOutputStream_U0_polStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TDATA => combineOutputStream_U0_tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID => combineOutputStream_U0_tsStreamOut_V_V_TVALID,
        isFinalCornerStream_s_TDATA => combineOutputStream_U0_isFinalCornerStream_s_TDATA,
        isFinalCornerStream_s_TVALID => combineOutputStream_U0_isFinalCornerStream_s_TVALID);

    xStream_V_V_U : component fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => truncateStream_U0_xStreamOut_V_V_din,
        if_full_n => xStream_V_V_full_n,
        if_write => truncateStream_U0_xStreamOut_V_V_write,
        if_dout => xStream_V_V_dout,
        if_empty_n => xStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_xStream_V_V_read);

    yStream_V_V_U : component fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => truncateStream_U0_yStreamOut_V_V_din,
        if_full_n => yStream_V_V_full_n,
        if_write => truncateStream_U0_yStreamOut_V_V_write,
        if_dout => yStream_V_V_dout,
        if_empty_n => yStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_yStream_V_V_read);

    polStream_V_V_U : component fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => truncateStream_U0_polStreamOut_V_V_din,
        if_full_n => polStream_V_V_full_n,
        if_write => truncateStream_U0_polStreamOut_V_V_write,
        if_dout => polStream_V_V_dout,
        if_empty_n => polStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_polStream_V_V_read);

    tsStream_V_V_U : component fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => truncateStream_U0_tsStreamOut_V_V_din,
        if_full_n => tsStream_V_V_full_n,
        if_write => truncateStream_U0_tsStreamOut_V_V_write,
        if_dout => tsStream_V_V_dout,
        if_empty_n => tsStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_tsStream_V_V_read);

    pktEventDataStream_V_U : component fifo_w96_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => truncateStream_U0_packetEventDataStrea_din,
        if_full_n => pktEventDataStream_V_full_n,
        if_write => truncateStream_U0_packetEventDataStrea_write,
        if_dout => pktEventDataStream_V_dout,
        if_empty_n => pktEventDataStream_V_empty_n,
        if_read => combineOutputStream_U0_packetEventDataStrea_read);

    glFeedbackCounter_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => initStageInterleaveS_U0_glFeedbackCounter_out_din,
        if_full_n => glFeedbackCounter_c_full_n,
        if_write => initStageInterleaveS_U0_glFeedbackCounter_out_write,
        if_dout => glFeedbackCounter_c_dout,
        if_empty_n => glFeedbackCounter_c_empty_n,
        if_read => feedbackInterleaveSt_U0_glFeedbackCounter_read);

    glStageInStream_V_V_U : component fifo_w2_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => feedbackInterleaveSt_U0_glStageInStream_V_V_din,
        if_full_n => glStageInStream_V_V_full_n,
        if_write => feedbackInterleaveSt_U0_glStageInStream_V_V_write,
        if_dout => glStageInStream_V_V_dout,
        if_empty_n => glStageInStream_V_V_empty_n,
        if_read => initStageInterleaveS_U0_glStageInStream_V_V_read);

    stageOut_V_U : component fifo_w2_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => initStageInterleaveS_U0_ap_return,
        if_full_n => stageOut_V_full_n,
        if_write => initStageInterleaveS_U0_ap_done,
        if_dout => stageOut_V_dout,
        if_empty_n => stageOut_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_ap_ready);

    inStream_V_V_U : component fifo_w640_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_din,
        if_full_n => inStream_V_V_full_n,
        if_write => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_write,
        if_dout => inStream_V_V_dout,
        if_empty_n => inStream_V_V_empty_n,
        if_read => sortedIdxStreamV3_5_U0_tsStream_V_V_read);

    size2_V_c_U : component fifo_w5_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rwSAEPerfectLoopStre_U0_size2_V_out_din,
        if_full_n => size2_V_c_full_n,
        if_write => rwSAEPerfectLoopStre_U0_size2_V_out_write,
        if_dout => size2_V_c_dout,
        if_empty_n => size2_V_c_empty_n,
        if_read => checkIdxGeneralV3_5_U0_size2_V_read);

    size1_V_U : component fifo_w5_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rwSAEPerfectLoopStre_U0_ap_return,
        if_full_n => size1_V_full_n,
        if_write => rwSAEPerfectLoopStre_U0_ap_done,
        if_dout => size1_V_dout,
        if_empty_n => size1_V_empty_n,
        if_read => sortedIdxStreamV3_5_U0_ap_ready);

    idxDataWide_V_U : component fifo_w100_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sortedIdxStreamV3_5_U0_ap_return,
        if_full_n => idxDataWide_V_full_n,
        if_write => sortedIdxStreamV3_5_U0_ap_done,
        if_dout => idxDataWide_V_dout,
        if_empty_n => idxDataWide_V_empty_n,
        if_read => checkIdxGeneralV3_5_U0_ap_ready);

    isStageCorner_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => checkIdxGeneralV3_5_U0_ap_return,
        if_full_n => isStageCorner_V_full_n,
        if_write => checkIdxGeneralV3_5_U0_ap_done,
        if_dout => isStageCorner_V_dout,
        if_empty_n => isStageCorner_V_empty_n,
        if_read => feedbackInterleaveSt_U0_ap_ready);

    stageCornerStream_V_s_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_din,
        if_full_n => stageCornerStream_V_s_full_n,
        if_write => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_write,
        if_dout => stageCornerStream_V_s_dout,
        if_empty_n => stageCornerStream_V_s_empty_n,
        if_read => combineOutputStream_U0_stageCornerStream_V_s_read);

    start_for_combineeOg_U : component start_for_combineeOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_combineOutputStream_U0_din,
        if_full_n => start_for_combineOutputStream_U0_full_n,
        if_write => truncateStream_U0_start_write,
        if_dout => start_for_combineOutputStream_U0_dout,
        if_empty_n => start_for_combineOutputStream_U0_empty_n,
        if_read => combineOutputStream_U0_ap_ready);





    initStageInterleaveS_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                initStageInterleaveS_U0_ap_start <= ap_const_logic_0;
            else
                initStageInterleaveS_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    ap_channel_done_idxDataWide_V <= sortedIdxStreamV3_5_U0_ap_done;
    ap_channel_done_isStageCorner_V <= checkIdxGeneralV3_5_U0_ap_done;
    ap_channel_done_size1_V <= rwSAEPerfectLoopStre_U0_ap_done;
    ap_channel_done_stageOut_V <= initStageInterleaveS_U0_ap_done;
    ap_done <= combineOutputStream_U0_ap_done;
    ap_idle <= (truncateStream_U0_ap_idle and sortedIdxStreamV3_5_U0_ap_idle and rwSAEPerfectLoopStre_U0_ap_idle and initStageInterleaveS_U0_ap_idle and feedbackInterleaveSt_U0_ap_idle and (isStageCorner_V_empty_n xor ap_const_logic_1) and (idxDataWide_V_empty_n xor ap_const_logic_1) and (size1_V_empty_n xor ap_const_logic_1) and (stageOut_V_empty_n xor ap_const_logic_1) and combineOutputStream_U0_ap_idle and checkIdxGeneralV3_5_U0_ap_idle);
    ap_ready <= truncateStream_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= combineOutputStream_U0_ap_done;
    ap_sync_ready <= truncateStream_U0_ap_ready;
    checkIdxGeneralV3_5_U0_ap_continue <= isStageCorner_V_full_n;
    checkIdxGeneralV3_5_U0_ap_start <= idxDataWide_V_empty_n;
    checkIdxGeneralV3_5_U0_start_full_n <= ap_const_logic_1;
    checkIdxGeneralV3_5_U0_start_write <= ap_const_logic_0;
    combineOutputStream_U0_ap_continue <= ap_const_logic_1;
    combineOutputStream_U0_ap_start <= start_for_combineOutputStream_U0_empty_n;
    combineOutputStream_U0_start_full_n <= ap_const_logic_1;
    combineOutputStream_U0_start_write <= ap_const_logic_0;
    feedbackInterleaveSt_U0_ap_continue <= ap_const_logic_1;
    feedbackInterleaveSt_U0_ap_start <= isStageCorner_V_empty_n;
    feedbackInterleaveSt_U0_start_full_n <= ap_const_logic_1;
    feedbackInterleaveSt_U0_start_write <= ap_const_logic_0;
    initStageInterleaveS_U0_ap_continue <= stageOut_V_full_n;
    initStageInterleaveS_U0_start_full_n <= ap_const_logic_1;
    initStageInterleaveS_U0_start_write <= ap_const_logic_0;
    isFinalCornerStream_V_V_TDATA <= combineOutputStream_U0_isFinalCornerStream_s_TDATA;
    isFinalCornerStream_V_V_TVALID <= combineOutputStream_U0_isFinalCornerStream_s_TVALID;
    polStreamIn_V_V_TREADY <= truncateStream_U0_polStreamIn_V_V_TREADY;
    polStreamOut_V_V_TDATA <= combineOutputStream_U0_polStreamOut_V_V_TDATA;
    polStreamOut_V_V_TVALID <= combineOutputStream_U0_polStreamOut_V_V_TVALID;
    rwSAEPerfectLoopStre_U0_ap_continue <= size1_V_full_n;
    rwSAEPerfectLoopStre_U0_ap_start <= stageOut_V_empty_n;
    rwSAEPerfectLoopStre_U0_start_full_n <= ap_const_logic_1;
    rwSAEPerfectLoopStre_U0_start_write <= ap_const_logic_0;
    sortedIdxStreamV3_5_U0_ap_continue <= idxDataWide_V_full_n;
    sortedIdxStreamV3_5_U0_ap_start <= size1_V_empty_n;
    sortedIdxStreamV3_5_U0_start_full_n <= ap_const_logic_1;
    sortedIdxStreamV3_5_U0_start_write <= ap_const_logic_0;
    start_for_combineOutputStream_U0_din <= (0=>ap_const_logic_1, others=>'-');
    truncateStream_U0_ap_continue <= ap_const_logic_1;
    truncateStream_U0_ap_start <= ap_start;
    tsStreamIn_V_V_TREADY <= truncateStream_U0_tsStreamIn_V_V_TREADY;
    tsStreamOut_V_V_TDATA <= combineOutputStream_U0_tsStreamOut_V_V_TDATA;
    tsStreamOut_V_V_TVALID <= combineOutputStream_U0_tsStreamOut_V_V_TVALID;
    xStreamIn_V_V_TREADY <= truncateStream_U0_xStreamIn_V_V_TREADY;
    xStreamOut_V_V_TDATA <= combineOutputStream_U0_xStreamOut_V_V_TDATA;
    xStreamOut_V_V_TVALID <= combineOutputStream_U0_xStreamOut_V_V_TVALID;
    yStreamIn_V_V_TREADY <= truncateStream_U0_yStreamIn_V_V_TREADY;
    yStreamOut_V_V_TDATA <= combineOutputStream_U0_yStreamOut_V_V_TDATA;
    yStreamOut_V_V_TVALID <= combineOutputStream_U0_yStreamOut_V_V_TVALID;
end behav;
