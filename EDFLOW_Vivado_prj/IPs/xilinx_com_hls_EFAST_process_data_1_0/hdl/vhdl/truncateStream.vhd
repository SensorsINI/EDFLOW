-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity truncateStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    packetEventDataStrea_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    packetEventDataStrea_full_n : IN STD_LOGIC;
    packetEventDataStrea_write : OUT STD_LOGIC;
    xStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    xStreamOut_V_V_full_n : IN STD_LOGIC;
    xStreamOut_V_V_write : OUT STD_LOGIC;
    yStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    yStreamOut_V_V_full_n : IN STD_LOGIC;
    yStreamOut_V_V_write : OUT STD_LOGIC;
    polStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    polStreamOut_V_V_full_n : IN STD_LOGIC;
    polStreamOut_V_V_write : OUT STD_LOGIC;
    tsStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    tsStreamOut_V_V_full_n : IN STD_LOGIC;
    tsStreamOut_V_V_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    xStreamIn_V_V_TVALID : IN STD_LOGIC;
    xStreamIn_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn_V_V_TVALID : IN STD_LOGIC;
    yStreamIn_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    polStreamIn_V_V_TVALID : IN STD_LOGIC;
    polStreamIn_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    tsStreamIn_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn_V_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of truncateStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_14F : STD_LOGIC_VECTOR (15 downto 0) := "0000000101001111";
    constant ap_const_lv16_F9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111001";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal xStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal yStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal polStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal xStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel : STD_LOGIC;
    signal xStreamIn_V_V_0_load_A : STD_LOGIC;
    signal xStreamIn_V_V_0_load_B : STD_LOGIC;
    signal xStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal yStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal yStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel : STD_LOGIC;
    signal yStreamIn_V_V_0_load_A : STD_LOGIC;
    signal yStreamIn_V_V_0_load_B : STD_LOGIC;
    signal yStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal polStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal polStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel : STD_LOGIC;
    signal polStreamIn_V_V_0_load_A : STD_LOGIC;
    signal polStreamIn_V_V_0_load_B : STD_LOGIC;
    signal polStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal tsStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_A : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_B : STD_LOGIC;
    signal tsStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal inEventsNum : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal xStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal yStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal xStreamOut_V_V_blk_n : STD_LOGIC;
    signal yStreamOut_V_V_blk_n : STD_LOGIC;
    signal polStreamOut_V_V_blk_n : STD_LOGIC;
    signal tsStreamOut_V_V_blk_n : STD_LOGIC;
    signal packetEventDataStrea_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_V_5_fu_139_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_262_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_144_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_203_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_207_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond2_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_211_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal phitmp1_fu_217_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_3_fu_245_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_vld_out = ap_const_logic_1) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_rd <= not(polStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_ack_in = ap_const_logic_1) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_wr <= not(polStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_2)) or ((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (polStreamIn_V_V_0_state = ap_const_lv2_3)) or ((polStreamIn_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_vld_out = ap_const_logic_1) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_rd <= not(tsStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_ack_in = ap_const_logic_1) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_wr <= not(tsStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_2)) or ((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)) or ((tsStreamIn_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_vld_out = ap_const_logic_1) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_rd <= not(xStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_ack_in = ap_const_logic_1) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_wr <= not(xStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_2)) or ((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (xStreamIn_V_V_0_state = ap_const_lv2_3)) or ((xStreamIn_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_vld_out = ap_const_logic_1) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_rd <= not(yStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_ack_in = ap_const_logic_1) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_wr <= not(yStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_2)) or ((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (yStreamIn_V_V_0_state = ap_const_lv2_3)) or ((yStreamIn_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                inEventsNum <= tmp_s_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, packetEventDataStrea_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, polStreamOut_V_V_full_n, tsStreamOut_V_V_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((tsStreamOut_V_V_full_n = ap_const_logic_0) or (polStreamOut_V_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStrea_full_n = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, packetEventDataStrea_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, polStreamOut_V_V_full_n, tsStreamOut_V_V_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((tsStreamOut_V_V_full_n = ap_const_logic_0) or (polStreamOut_V_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStrea_full_n = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, packetEventDataStrea_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, polStreamOut_V_V_full_n, tsStreamOut_V_V_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((tsStreamOut_V_V_full_n = ap_const_logic_0) or (polStreamOut_V_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStrea_full_n = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, packetEventDataStrea_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, polStreamOut_V_V_full_n, tsStreamOut_V_V_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((tsStreamOut_V_V_full_n = ap_const_logic_0) or (polStreamOut_V_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStrea_full_n = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_cond2_fu_197_p2 <= (tmp4_fu_191_p2 or tmp3_fu_185_p2);

    packetEventDataStrea_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, packetEventDataStrea_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            packetEventDataStrea_blk_n <= packetEventDataStrea_full_n;
        else 
            packetEventDataStrea_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packetEventDataStrea_din <= (((tmp_fu_144_p1 & tmp_V_5_fu_139_p1) & yStreamIn_V_V_0_data_out) & xStreamIn_V_V_0_data_out);

    packetEventDataStrea_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            packetEventDataStrea_write <= ap_const_logic_1;
        else 
            packetEventDataStrea_write <= ap_const_logic_0;
        end if; 
    end process;

    phitmp1_fu_217_p2 <= std_logic_vector(signed(ap_const_lv9_1FE) + signed(tmp_6_fu_207_p1));
    phitmp_fu_211_p2 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(tmp_5_fu_203_p1));
    polStreamIn_V_V_0_ack_in <= polStreamIn_V_V_0_state(1);

    polStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    polStreamIn_V_V_0_data_out_assign_proc : process(polStreamIn_V_V_0_payload_A, polStreamIn_V_V_0_payload_B, polStreamIn_V_V_0_sel)
    begin
        if ((polStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_B;
        else 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    polStreamIn_V_V_0_load_A <= (polStreamIn_V_V_0_state_cmp_full and not(polStreamIn_V_V_0_sel_wr));
    polStreamIn_V_V_0_load_B <= (polStreamIn_V_V_0_state_cmp_full and polStreamIn_V_V_0_sel_wr);
    polStreamIn_V_V_0_sel <= polStreamIn_V_V_0_sel_rd;
    polStreamIn_V_V_0_state_cmp_full <= '0' when (polStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    polStreamIn_V_V_0_vld_in <= polStreamIn_V_V_TVALID;
    polStreamIn_V_V_0_vld_out <= polStreamIn_V_V_0_state(0);

    polStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, polStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamIn_V_V_TDATA_blk_n <= polStreamIn_V_V_0_state(0);
        else 
            polStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamIn_V_V_TREADY <= polStreamIn_V_V_0_state(1);

    polStreamOut_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, polStreamOut_V_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamOut_V_V_blk_n <= polStreamOut_V_V_full_n;
        else 
            polStreamOut_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamOut_V_V_din <= tmp_V_5_fu_139_p1;

    polStreamOut_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamOut_V_V_write <= ap_const_logic_1;
        else 
            polStreamOut_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp3_fu_185_p2 <= (tmp_3_fu_173_p2 or tmp_2_fu_167_p2);
    tmp4_fu_191_p2 <= (tmp_4_fu_179_p2 or tmp_1_fu_161_p2);
    tmp_1_fu_161_p2 <= "1" when (unsigned(xStreamIn_V_V_0_data_out) < unsigned(ap_const_lv16_6)) else "0";
    tmp_2_fu_167_p2 <= "1" when (unsigned(xStreamIn_V_V_0_data_out) > unsigned(ap_const_lv16_14F)) else "0";
    tmp_3_fu_173_p2 <= "1" when (unsigned(yStreamIn_V_V_0_data_out) < unsigned(ap_const_lv16_6)) else "0";
    tmp_4_fu_179_p2 <= "1" when (unsigned(yStreamIn_V_V_0_data_out) > unsigned(ap_const_lv16_F9)) else "0";
    tmp_5_fu_203_p1 <= xStreamIn_V_V_0_data_out(10 - 1 downto 0);
    tmp_6_fu_207_p1 <= yStreamIn_V_V_0_data_out(9 - 1 downto 0);
    tmp_7_fu_223_p1 <= tsStreamIn_V_V_0_data_out(32 - 1 downto 0);
    tmp_V_3_fu_245_p3 <= 
        ap_const_lv9_0 when (or_cond2_fu_197_p2(0) = '1') else 
        phitmp1_fu_217_p2;
    tmp_V_5_fu_139_p1 <= polStreamIn_V_V_0_data_out(1 - 1 downto 0);
    tmp_fu_144_p1 <= tsStreamIn_V_V_0_data_out(63 - 1 downto 0);
    tmp_s_fu_262_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(inEventsNum));
    tsStreamIn_V_V_0_ack_in <= tsStreamIn_V_V_0_state(1);

    tsStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tsStreamIn_V_V_0_data_out_assign_proc : process(tsStreamIn_V_V_0_payload_A, tsStreamIn_V_V_0_payload_B, tsStreamIn_V_V_0_sel)
    begin
        if ((tsStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_B;
        else 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    tsStreamIn_V_V_0_load_A <= (tsStreamIn_V_V_0_state_cmp_full and not(tsStreamIn_V_V_0_sel_wr));
    tsStreamIn_V_V_0_load_B <= (tsStreamIn_V_V_0_state_cmp_full and tsStreamIn_V_V_0_sel_wr);
    tsStreamIn_V_V_0_sel <= tsStreamIn_V_V_0_sel_rd;
    tsStreamIn_V_V_0_state_cmp_full <= '0' when (tsStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    tsStreamIn_V_V_0_vld_in <= tsStreamIn_V_V_TVALID;
    tsStreamIn_V_V_0_vld_out <= tsStreamIn_V_V_0_state(0);

    tsStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tsStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamIn_V_V_TDATA_blk_n <= tsStreamIn_V_V_0_state(0);
        else 
            tsStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamIn_V_V_TREADY <= tsStreamIn_V_V_0_state(1);

    tsStreamOut_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tsStreamOut_V_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamOut_V_V_blk_n <= tsStreamOut_V_V_full_n;
        else 
            tsStreamOut_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut_V_V_din <= 
        ap_const_lv32_0 when (or_cond2_fu_197_p2(0) = '1') else 
        tmp_7_fu_223_p1;

    tsStreamOut_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamOut_V_V_write <= ap_const_logic_1;
        else 
            tsStreamOut_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    xStreamIn_V_V_0_ack_in <= xStreamIn_V_V_0_state(1);

    xStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    xStreamIn_V_V_0_data_out_assign_proc : process(xStreamIn_V_V_0_payload_A, xStreamIn_V_V_0_payload_B, xStreamIn_V_V_0_sel)
    begin
        if ((xStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_B;
        else 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    xStreamIn_V_V_0_load_A <= (xStreamIn_V_V_0_state_cmp_full and not(xStreamIn_V_V_0_sel_wr));
    xStreamIn_V_V_0_load_B <= (xStreamIn_V_V_0_state_cmp_full and xStreamIn_V_V_0_sel_wr);
    xStreamIn_V_V_0_sel <= xStreamIn_V_V_0_sel_rd;
    xStreamIn_V_V_0_state_cmp_full <= '0' when (xStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    xStreamIn_V_V_0_vld_in <= xStreamIn_V_V_TVALID;
    xStreamIn_V_V_0_vld_out <= xStreamIn_V_V_0_state(0);

    xStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamIn_V_V_TDATA_blk_n <= xStreamIn_V_V_0_state(0);
        else 
            xStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamIn_V_V_TREADY <= xStreamIn_V_V_0_state(1);

    xStreamOut_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, xStreamOut_V_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamOut_V_V_blk_n <= xStreamOut_V_V_full_n;
        else 
            xStreamOut_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut_V_V_din <= 
        ap_const_lv10_0 when (or_cond2_fu_197_p2(0) = '1') else 
        phitmp_fu_211_p2;

    xStreamOut_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamOut_V_V_write <= ap_const_logic_1;
        else 
            xStreamOut_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    yStreamIn_V_V_0_ack_in <= yStreamIn_V_V_0_state(1);

    yStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    yStreamIn_V_V_0_data_out_assign_proc : process(yStreamIn_V_V_0_payload_A, yStreamIn_V_V_0_payload_B, yStreamIn_V_V_0_sel)
    begin
        if ((yStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_B;
        else 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    yStreamIn_V_V_0_load_A <= (yStreamIn_V_V_0_state_cmp_full and not(yStreamIn_V_V_0_sel_wr));
    yStreamIn_V_V_0_load_B <= (yStreamIn_V_V_0_state_cmp_full and yStreamIn_V_V_0_sel_wr);
    yStreamIn_V_V_0_sel <= yStreamIn_V_V_0_sel_rd;
    yStreamIn_V_V_0_state_cmp_full <= '0' when (yStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    yStreamIn_V_V_0_vld_in <= yStreamIn_V_V_TVALID;
    yStreamIn_V_V_0_vld_out <= yStreamIn_V_V_0_state(0);

    yStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, yStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamIn_V_V_TDATA_blk_n <= yStreamIn_V_V_0_state(0);
        else 
            yStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamIn_V_V_TREADY <= yStreamIn_V_V_0_state(1);

    yStreamOut_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, yStreamOut_V_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamOut_V_V_blk_n <= yStreamOut_V_V_full_n;
        else 
            yStreamOut_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        yStreamOut_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_3_fu_245_p3),10));


    yStreamOut_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamOut_V_V_write <= ap_const_logic_1;
        else 
            yStreamOut_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
