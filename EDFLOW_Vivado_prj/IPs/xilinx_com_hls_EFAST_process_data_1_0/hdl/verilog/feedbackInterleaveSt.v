// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module feedbackInterleaveSt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        isFinalCornerStream_V_V_din,
        isFinalCornerStream_V_V_full_n,
        isFinalCornerStream_V_V_write,
        glFeedbackCounter_dout,
        glFeedbackCounter_empty_n,
        glFeedbackCounter_read,
        glStageInStream_V_V_din,
        glStageInStream_V_V_full_n,
        glStageInStream_V_V_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
output  [0:0] isFinalCornerStream_V_V_din;
input   isFinalCornerStream_V_V_full_n;
output   isFinalCornerStream_V_V_write;
input  [31:0] glFeedbackCounter_dout;
input   glFeedbackCounter_empty_n;
output   glFeedbackCounter_read;
output  [1:0] glStageInStream_V_V_din;
input   glStageInStream_V_V_full_n;
output   glStageInStream_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg isFinalCornerStream_V_V_write;
reg glFeedbackCounter_read;
reg glStageInStream_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    isFinalCornerStream_V_V_blk_n;
wire   [0:0] tmp_fu_72_p3;
reg    glFeedbackCounter_blk_n;
reg    glStageInStream_V_V_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        glFeedbackCounter_blk_n = glFeedbackCounter_empty_n;
    end else begin
        glFeedbackCounter_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        glFeedbackCounter_read = 1'b1;
    end else begin
        glFeedbackCounter_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_72_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        glStageInStream_V_V_blk_n = glStageInStream_V_V_full_n;
    end else begin
        glStageInStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0))) & (tmp_fu_72_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        glStageInStream_V_V_write = 1'b1;
    end else begin
        glStageInStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_72_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_fu_72_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        isFinalCornerStream_V_V_blk_n = isFinalCornerStream_V_V_full_n;
    end else begin
        isFinalCornerStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0))) & (tmp_fu_72_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0))) & (tmp_fu_72_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        isFinalCornerStream_V_V_write = 1'b1;
    end else begin
        isFinalCornerStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (glFeedbackCounter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_72_p3 == 1'd1) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (isFinalCornerStream_V_V_full_n == 1'b0)) | ((tmp_fu_72_p3 == 1'd0) & (glStageInStream_V_V_full_n == 1'b0)));
end

assign glStageInStream_V_V_din = ((p_read[0:0] === 1'b1) ? 2'd1 : 2'd2);

assign isFinalCornerStream_V_V_din = p_read;

assign tmp_fu_72_p3 = glFeedbackCounter_dout[32'd1];

endmodule //feedbackInterleaveSt
