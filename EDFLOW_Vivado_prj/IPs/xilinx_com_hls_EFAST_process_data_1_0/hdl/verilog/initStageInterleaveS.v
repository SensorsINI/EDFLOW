// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module initStageInterleaveS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        glFeedbackCounter_out_din,
        glFeedbackCounter_out_full_n,
        glFeedbackCounter_out_write,
        glStageInStream_V_V_dout,
        glStageInStream_V_V_empty_n,
        glStageInStream_V_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] glFeedbackCounter_out_din;
input   glFeedbackCounter_out_full_n;
output   glFeedbackCounter_out_write;
input  [1:0] glStageInStream_V_V_dout;
input   glStageInStream_V_V_empty_n;
output   glStageInStream_V_V_read;
output  [1:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg glFeedbackCounter_out_write;
reg glStageInStream_V_V_read;
reg[1:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] glInitCounter;
reg    glFeedbackCounter_out_blk_n;
reg    glStageInStream_V_V_blk_n;
wire   [0:0] tmp_fu_57_p3;
reg   [1:0] ap_phi_mux_stageOutStream_V_wri_phi_fu_44_p4;
reg    ap_block_state1;
wire   [31:0] tmp_27_i_i_fu_65_p2;
reg   [1:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 glInitCounter = 32'd0;
#0 ap_return_preg = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= ap_phi_mux_stageOutStream_V_wri_phi_fu_44_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        glInitCounter <= tmp_27_i_i_fu_65_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_fu_57_p3 == 1'd0)) begin
            ap_phi_mux_stageOutStream_V_wri_phi_fu_44_p4 = 2'd0;
        end else if ((tmp_fu_57_p3 == 1'd1)) begin
            ap_phi_mux_stageOutStream_V_wri_phi_fu_44_p4 = glStageInStream_V_V_dout;
        end else begin
            ap_phi_mux_stageOutStream_V_wri_phi_fu_44_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_stageOutStream_V_wri_phi_fu_44_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = ap_phi_mux_stageOutStream_V_wri_phi_fu_44_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        glFeedbackCounter_out_blk_n = glFeedbackCounter_out_full_n;
    end else begin
        glFeedbackCounter_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        glFeedbackCounter_out_write = 1'b1;
    end else begin
        glFeedbackCounter_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_57_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        glStageInStream_V_V_blk_n = glStageInStream_V_V_empty_n;
    end else begin
        glStageInStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0))) & (tmp_fu_57_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        glStageInStream_V_V_read = 1'b1;
    end else begin
        glStageInStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (glFeedbackCounter_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_fu_57_p3 == 1'd1) & (glStageInStream_V_V_empty_n == 1'b0)));
end

assign glFeedbackCounter_out_din = glInitCounter;

assign tmp_27_i_i_fu_65_p2 = (glInitCounter + 32'd1);

assign tmp_fu_57_p3 = glInitCounter[32'd1];

endmodule //initStageInterleaveS
