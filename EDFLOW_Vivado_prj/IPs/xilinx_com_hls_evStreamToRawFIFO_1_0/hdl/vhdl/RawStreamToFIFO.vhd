-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RawStreamToFIFO is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    streamIn_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    streamIn_V_V_empty_n : IN STD_LOGIC;
    streamIn_V_V_read : OUT STD_LOGIC;
    dataOut_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dataOut_V_ap_vld : OUT STD_LOGIC;
    nonMonTSDiffFlgReg_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    nonMonTSDiffFlgReg_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of RawStreamToFIFO is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tsWrap_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal streamIn_V_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_6_fu_115_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_79_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_27_fu_141_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal dataOut_V_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal p_Result_s_fu_87_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_103_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_107_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_fu_127_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_131_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    dataOut_V_preg <= p_Result_s_27_fu_141_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_1_fu_97_p2 = ap_const_lv1_1) and (tmp_fu_79_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tsWrap_V <= tmp_6_fu_115_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, streamIn_V_V_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, streamIn_V_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, streamIn_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, streamIn_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dataOut_V_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, streamIn_V_V_empty_n, p_Result_s_27_fu_141_p3, dataOut_V_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataOut_V <= p_Result_s_27_fu_141_p3;
        else 
            dataOut_V <= dataOut_V_preg;
        end if; 
    end process;


    dataOut_V_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, streamIn_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataOut_V_ap_vld <= ap_const_logic_1;
        else 
            dataOut_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    nonMonTSDiffFlgReg_V <= ap_const_lv1_0;

    nonMonTSDiffFlgReg_V_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, streamIn_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            nonMonTSDiffFlgReg_V_ap_vld <= ap_const_logic_1;
        else 
            nonMonTSDiffFlgReg_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_3_fu_131_p4 <= streamIn_V_V_dout(15 downto 8);
    p_Result_s_27_fu_141_p3 <= (tmp_9_fu_127_p1 & p_Result_3_fu_131_p4);
    p_Result_s_fu_87_p4 <= streamIn_V_V_dout(14 downto 12);

    streamIn_V_V_blk_n_assign_proc : process(ap_CS_fsm_state1, streamIn_V_V_empty_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            streamIn_V_V_blk_n <= streamIn_V_V_empty_n;
        else 
            streamIn_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    streamIn_V_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, streamIn_V_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (streamIn_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            streamIn_V_V_read <= ap_const_logic_1;
        else 
            streamIn_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_97_p2 <= "1" when (p_Result_s_fu_87_p4 = ap_const_lv3_7) else "0";
    tmp_5_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_103_p1),48));
    tmp_6_fu_115_p2 <= std_logic_vector(unsigned(tmp_5_fu_107_p1) + unsigned(tsWrap_V));
    tmp_8_fu_103_p1 <= streamIn_V_V_dout(12 - 1 downto 0);
    tmp_9_fu_127_p1 <= streamIn_V_V_dout(8 - 1 downto 0);
    tmp_fu_79_p3 <= streamIn_V_V_dout(15 downto 15);
end behav;
