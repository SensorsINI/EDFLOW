// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module XYTSStreamToRawStrea (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        streamOut_V_V_din,
        streamOut_V_V_full_n,
        streamOut_V_V_write,
        start_out,
        start_write,
        xStreamIn_V_V_TDATA,
        xStreamIn_V_V_TVALID,
        xStreamIn_V_V_TREADY,
        yStreamIn_V_V_TDATA,
        yStreamIn_V_V_TVALID,
        yStreamIn_V_V_TREADY,
        tsStreamIn_V_V_TDATA,
        tsStreamIn_V_V_TVALID,
        tsStreamIn_V_V_TREADY,
        polStreamIn_V_V_TDATA,
        polStreamIn_V_V_TVALID,
        polStreamIn_V_V_TREADY,
        custDataStreamIn_V_V_TDATA,
        custDataStreamIn_V_V_TVALID,
        custDataStreamIn_V_V_TREADY,
        tsReg_V,
        tsReg_V_ap_vld,
        glLastTSReg_V,
        glLastTSReg_V_ap_vld,
        yReg_V,
        yReg_V_ap_vld,
        glLastYReg_V,
        glLastYReg_V_ap_vld,
        tsDiffFlgReg_V,
        tsDiffFlgReg_V_ap_vld,
        yDiffFlgReg_V,
        yDiffFlgReg_V_ap_vld,
        nonMonTSDiffFlgReg_V,
        nonMonTSDiffFlgReg_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] streamOut_V_V_din;
input   streamOut_V_V_full_n;
output   streamOut_V_V_write;
output   start_out;
output   start_write;
input  [15:0] xStreamIn_V_V_TDATA;
input   xStreamIn_V_V_TVALID;
output   xStreamIn_V_V_TREADY;
input  [15:0] yStreamIn_V_V_TDATA;
input   yStreamIn_V_V_TVALID;
output   yStreamIn_V_V_TREADY;
input  [63:0] tsStreamIn_V_V_TDATA;
input   tsStreamIn_V_V_TVALID;
output   tsStreamIn_V_V_TREADY;
input  [7:0] polStreamIn_V_V_TDATA;
input   polStreamIn_V_V_TVALID;
output   polStreamIn_V_V_TREADY;
input  [15:0] custDataStreamIn_V_V_TDATA;
input   custDataStreamIn_V_V_TVALID;
output   custDataStreamIn_V_V_TREADY;
output  [63:0] tsReg_V;
output   tsReg_V_ap_vld;
output  [63:0] glLastTSReg_V;
output   glLastTSReg_V_ap_vld;
output  [15:0] yReg_V;
output   yReg_V_ap_vld;
output  [15:0] glLastYReg_V;
output   glLastYReg_V_ap_vld;
output  [0:0] tsDiffFlgReg_V;
output   tsDiffFlgReg_V_ap_vld;
output  [0:0] yDiffFlgReg_V;
output   yDiffFlgReg_V_ap_vld;
output  [0:0] nonMonTSDiffFlgReg_V;
output   nonMonTSDiffFlgReg_V_ap_vld;

reg ap_done;
reg ap_idle;
reg[15:0] streamOut_V_V_din;
reg streamOut_V_V_write;
reg start_write;
reg tsReg_V_ap_vld;
reg glLastTSReg_V_ap_vld;
reg yReg_V_ap_vld;
reg glLastYReg_V_ap_vld;
reg tsDiffFlgReg_V_ap_vld;
reg yDiffFlgReg_V_ap_vld;
reg nonMonTSDiffFlgReg_V_ap_vld;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    internal_ap_ready;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] tmp_3_reg_354;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [15:0] xStreamIn_V_V_0_data_out;
wire    xStreamIn_V_V_0_vld_in;
wire    xStreamIn_V_V_0_vld_out;
wire    xStreamIn_V_V_0_ack_in;
reg    xStreamIn_V_V_0_ack_out;
reg   [15:0] xStreamIn_V_V_0_payload_A;
reg   [15:0] xStreamIn_V_V_0_payload_B;
reg    xStreamIn_V_V_0_sel_rd;
reg    xStreamIn_V_V_0_sel_wr;
wire    xStreamIn_V_V_0_sel;
wire    xStreamIn_V_V_0_load_A;
wire    xStreamIn_V_V_0_load_B;
reg   [1:0] xStreamIn_V_V_0_state;
wire    xStreamIn_V_V_0_state_cmp_full;
reg   [15:0] yStreamIn_V_V_0_data_out;
wire    yStreamIn_V_V_0_vld_in;
wire    yStreamIn_V_V_0_vld_out;
wire    yStreamIn_V_V_0_ack_in;
reg    yStreamIn_V_V_0_ack_out;
reg   [15:0] yStreamIn_V_V_0_payload_A;
reg   [15:0] yStreamIn_V_V_0_payload_B;
reg    yStreamIn_V_V_0_sel_rd;
reg    yStreamIn_V_V_0_sel_wr;
wire    yStreamIn_V_V_0_sel;
wire    yStreamIn_V_V_0_load_A;
wire    yStreamIn_V_V_0_load_B;
reg   [1:0] yStreamIn_V_V_0_state;
wire    yStreamIn_V_V_0_state_cmp_full;
reg   [63:0] tsStreamIn_V_V_0_data_out;
wire    tsStreamIn_V_V_0_vld_in;
wire    tsStreamIn_V_V_0_vld_out;
wire    tsStreamIn_V_V_0_ack_in;
reg    tsStreamIn_V_V_0_ack_out;
reg   [63:0] tsStreamIn_V_V_0_payload_A;
reg   [63:0] tsStreamIn_V_V_0_payload_B;
reg    tsStreamIn_V_V_0_sel_rd;
reg    tsStreamIn_V_V_0_sel_wr;
wire    tsStreamIn_V_V_0_sel;
wire    tsStreamIn_V_V_0_load_A;
wire    tsStreamIn_V_V_0_load_B;
reg   [1:0] tsStreamIn_V_V_0_state;
wire    tsStreamIn_V_V_0_state_cmp_full;
reg   [7:0] polStreamIn_V_V_0_data_out;
wire    polStreamIn_V_V_0_vld_in;
wire    polStreamIn_V_V_0_vld_out;
wire    polStreamIn_V_V_0_ack_in;
reg    polStreamIn_V_V_0_ack_out;
reg   [7:0] polStreamIn_V_V_0_payload_A;
reg   [7:0] polStreamIn_V_V_0_payload_B;
reg    polStreamIn_V_V_0_sel_rd;
reg    polStreamIn_V_V_0_sel_wr;
wire    polStreamIn_V_V_0_sel;
wire    polStreamIn_V_V_0_load_A;
wire    polStreamIn_V_V_0_load_B;
reg   [1:0] polStreamIn_V_V_0_state;
wire    polStreamIn_V_V_0_state_cmp_full;
wire    custDataStreamIn_V_V_0_vld_in;
wire    custDataStreamIn_V_V_0_vld_out;
reg    custDataStreamIn_V_V_0_ack_out;
reg   [1:0] custDataStreamIn_V_V_0_state;
reg   [63:0] glLastTS_V;
reg   [15:0] glLastY_V;
reg    xStreamIn_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    yStreamIn_V_V_TDATA_blk_n;
reg    tsStreamIn_V_V_TDATA_blk_n;
reg    polStreamIn_V_V_TDATA_blk_n;
reg    custDataStreamIn_V_V_TDATA_blk_n;
reg    streamOut_V_V_blk_n;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_4_reg_363;
wire   [0:0] tmp_V_1_fu_225_p1;
reg   [0:0] tmp_V_1_reg_334;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_predicate_op58_write_state5;
reg    ap_predicate_op59_write_state5;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [14:0] tmp_2_fu_229_p1;
reg   [14:0] tmp_2_reg_339;
wire   [11:0] tmp_6_fu_233_p1;
reg   [11:0] tmp_6_reg_344;
wire   [11:0] tmp_7_fu_237_p1;
reg   [11:0] tmp_7_reg_349;
wire   [0:0] tmp_3_fu_246_p2;
wire   [0:0] rev1_fu_258_p2;
wire   [0:0] tmp_4_fu_268_p2;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg   [0:0] ap_phi_reg_pp0_iter0_p_0102_1_reg_176;
reg   [0:0] ap_phi_reg_pp0_iter0_p_s_reg_191;
reg   [0:0] ap_phi_reg_pp0_iter1_p_s_reg_191;
reg   [0:0] ap_phi_reg_pp0_iter0_p_055_1_reg_208;
reg   [0:0] ap_phi_reg_pp0_iter1_p_055_1_reg_208;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_predicate_op46_write_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] tsRaw_V_fu_304_p3;
reg    ap_block_pp0_stage2_01001;
wire   [15:0] p_Result_1_fu_313_p3;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] p_Result_2_fu_329_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] ult_fu_252_p2;
wire   [15:0] p_Result_s_fu_291_p3;
wire   [0:0] tmp_5_fu_298_p2;
wire   [13:0] tmp_fu_321_p4;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 xStreamIn_V_V_0_sel_rd = 1'b0;
#0 xStreamIn_V_V_0_sel_wr = 1'b0;
#0 xStreamIn_V_V_0_state = 2'd0;
#0 yStreamIn_V_V_0_sel_rd = 1'b0;
#0 yStreamIn_V_V_0_sel_wr = 1'b0;
#0 yStreamIn_V_V_0_state = 2'd0;
#0 tsStreamIn_V_V_0_sel_rd = 1'b0;
#0 tsStreamIn_V_V_0_sel_wr = 1'b0;
#0 tsStreamIn_V_V_0_state = 2'd0;
#0 polStreamIn_V_V_0_sel_rd = 1'b0;
#0 polStreamIn_V_V_0_sel_wr = 1'b0;
#0 polStreamIn_V_V_0_state = 2'd0;
#0 custDataStreamIn_V_V_0_state = 2'd0;
#0 glLastTS_V = 64'd0;
#0 glLastY_V = 16'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        custDataStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((custDataStreamIn_V_V_0_state == 2'd2) & (custDataStreamIn_V_V_0_vld_in == 1'b0)) | ((custDataStreamIn_V_V_0_state == 2'd3) & (custDataStreamIn_V_V_0_vld_in == 1'b0) & (custDataStreamIn_V_V_0_ack_out == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd2;
        end else if ((((custDataStreamIn_V_V_0_state == 2'd1) & (custDataStreamIn_V_V_0_ack_out == 1'b0)) | ((custDataStreamIn_V_V_0_state == 2'd3) & (custDataStreamIn_V_V_0_ack_out == 1'b0) & (custDataStreamIn_V_V_0_vld_in == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((custDataStreamIn_V_V_0_vld_in == 1'b0) & (custDataStreamIn_V_V_0_ack_out == 1'b1)) & ~((custDataStreamIn_V_V_0_ack_out == 1'b0) & (custDataStreamIn_V_V_0_vld_in == 1'b1)) & (custDataStreamIn_V_V_0_state == 2'd3)) | ((custDataStreamIn_V_V_0_state == 2'd1) & (custDataStreamIn_V_V_0_ack_out == 1'b1)) | ((custDataStreamIn_V_V_0_state == 2'd2) & (custDataStreamIn_V_V_0_vld_in == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd3;
        end else begin
            custDataStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        polStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_ack_out == 1'b1) & (polStreamIn_V_V_0_vld_out == 1'b1))) begin
            polStreamIn_V_V_0_sel_rd <= ~polStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        polStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_ack_in == 1'b1) & (polStreamIn_V_V_0_vld_in == 1'b1))) begin
            polStreamIn_V_V_0_sel_wr <= ~polStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        polStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((polStreamIn_V_V_0_state == 2'd2) & (polStreamIn_V_V_0_vld_in == 1'b0)) | ((polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd2;
        end else if ((((polStreamIn_V_V_0_state == 2'd1) & (polStreamIn_V_V_0_ack_out == 1'b0)) | ((polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1)) & ~((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1)) & (polStreamIn_V_V_0_state == 2'd3)) | ((polStreamIn_V_V_0_state == 2'd1) & (polStreamIn_V_V_0_ack_out == 1'b1)) | ((polStreamIn_V_V_0_state == 2'd2) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd3;
        end else begin
            polStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tsStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_ack_out == 1'b1) & (tsStreamIn_V_V_0_vld_out == 1'b1))) begin
            tsStreamIn_V_V_0_sel_rd <= ~tsStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tsStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_ack_in == 1'b1) & (tsStreamIn_V_V_0_vld_in == 1'b1))) begin
            tsStreamIn_V_V_0_sel_wr <= ~tsStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tsStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((tsStreamIn_V_V_0_state == 2'd2) & (tsStreamIn_V_V_0_vld_in == 1'b0)) | ((tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end else if ((((tsStreamIn_V_V_0_state == 2'd1) & (tsStreamIn_V_V_0_ack_out == 1'b0)) | ((tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1)) & ~((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1)) & (tsStreamIn_V_V_0_state == 2'd3)) | ((tsStreamIn_V_V_0_state == 2'd1) & (tsStreamIn_V_V_0_ack_out == 1'b1)) | ((tsStreamIn_V_V_0_state == 2'd2) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd3;
        end else begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        xStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_ack_out == 1'b1) & (xStreamIn_V_V_0_vld_out == 1'b1))) begin
            xStreamIn_V_V_0_sel_rd <= ~xStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        xStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_ack_in == 1'b1) & (xStreamIn_V_V_0_vld_in == 1'b1))) begin
            xStreamIn_V_V_0_sel_wr <= ~xStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        xStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((xStreamIn_V_V_0_state == 2'd2) & (xStreamIn_V_V_0_vld_in == 1'b0)) | ((xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd2;
        end else if ((((xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1)) | ((xStreamIn_V_V_0_state == 2'd1) & (xStreamIn_V_V_0_ack_out == 1'b0)))) begin
            xStreamIn_V_V_0_state <= 2'd1;
        end else if ((((xStreamIn_V_V_0_state == 2'd2) & (xStreamIn_V_V_0_vld_in == 1'b1)) | (~((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1)) & ~((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1)) & (xStreamIn_V_V_0_state == 2'd3)) | ((xStreamIn_V_V_0_state == 2'd1) & (xStreamIn_V_V_0_ack_out == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd3;
        end else begin
            xStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        yStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_ack_out == 1'b1) & (yStreamIn_V_V_0_vld_out == 1'b1))) begin
            yStreamIn_V_V_0_sel_rd <= ~yStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        yStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_ack_in == 1'b1) & (yStreamIn_V_V_0_vld_in == 1'b1))) begin
            yStreamIn_V_V_0_sel_wr <= ~yStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        yStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((yStreamIn_V_V_0_state == 2'd2) & (yStreamIn_V_V_0_vld_in == 1'b0)) | ((yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd2;
        end else if ((((yStreamIn_V_V_0_state == 2'd1) & (yStreamIn_V_V_0_ack_out == 1'b0)) | ((yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1)) & ~((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1)) & (yStreamIn_V_V_0_state == 2'd3)) | ((yStreamIn_V_V_0_state == 2'd1) & (yStreamIn_V_V_0_ack_out == 1'b1)) | ((yStreamIn_V_V_0_state == 2'd2) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd3;
        end else begin
            yStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_3_fu_246_p2 == 1'd1) & (tmp_4_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_4_fu_268_p2 == 1'd1) & (tmp_3_fu_246_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ap_phi_reg_pp0_iter0_p_0102_1_reg_176 <= 1'd0;
    end else if (((tmp_3_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter0_p_0102_1_reg_176 <= rev1_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_246_p2 == 1'd1) & (tmp_4_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter0_p_055_1_reg_208 <= 1'd1;
    end else if ((((tmp_4_fu_268_p2 == 1'd1) & (tmp_3_fu_246_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_3_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ap_phi_reg_pp0_iter0_p_055_1_reg_208 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_3_fu_246_p2 == 1'd1) & (tmp_4_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_4_fu_268_p2 == 1'd1) & (tmp_3_fu_246_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ap_phi_reg_pp0_iter0_p_s_reg_191 <= 1'd0;
    end else if (((tmp_3_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter0_p_s_reg_191 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_055_1_reg_208 <= ap_phi_reg_pp0_iter0_p_055_1_reg_208;
        ap_phi_reg_pp0_iter1_p_s_reg_191 <= ap_phi_reg_pp0_iter0_p_s_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        glLastTS_V <= tsStreamIn_V_V_0_data_out;
        glLastY_V <= yStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_A == 1'b1)) begin
        polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_B == 1'b1)) begin
        polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_2_reg_339 <= tmp_2_fu_229_p1;
        tmp_3_reg_354 <= tmp_3_fu_246_p2;
        tmp_6_reg_344 <= tmp_6_fu_233_p1;
        tmp_7_reg_349 <= tmp_7_fu_237_p1;
        tmp_V_1_reg_334 <= tmp_V_1_fu_225_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_246_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_4_reg_363 <= tmp_4_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_A == 1'b1)) begin
        tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_B == 1'b1)) begin
        tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_A == 1'b1)) begin
        xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_B == 1'b1)) begin
        xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_A == 1'b1)) begin
        yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_B == 1'b1)) begin
        yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = real_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        custDataStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        custDataStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        custDataStreamIn_V_V_TDATA_blk_n = custDataStreamIn_V_V_0_state[1'd0];
    end else begin
        custDataStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        glLastTSReg_V_ap_vld = 1'b1;
    end else begin
        glLastTSReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        glLastYReg_V_ap_vld = 1'b1;
    end else begin
        glLastYReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        polStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        polStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamIn_V_V_0_sel == 1'b1)) begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_B;
    end else begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        polStreamIn_V_V_TDATA_blk_n = polStreamIn_V_V_0_state[1'd0];
    end else begin
        polStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_3_reg_354 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_3_reg_354 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_4_reg_363 == 1'd1) & (tmp_3_reg_354 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_4_reg_363 == 1'd0) & (tmp_3_reg_354 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_3_reg_354 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_4_reg_363 == 1'd0) & (tmp_3_reg_354 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        streamOut_V_V_blk_n = streamOut_V_V_full_n;
    end else begin
        streamOut_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_01001) & (tmp_3_reg_354 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op59_write_state5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op58_write_state5 == 1'b1)))) begin
        streamOut_V_V_din = p_Result_2_fu_329_p1;
    end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (tmp_3_reg_354 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op46_write_state4 == 1'b1)))) begin
        streamOut_V_V_din = p_Result_1_fu_313_p3;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (tmp_3_reg_354 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        streamOut_V_V_din = tsRaw_V_fu_304_p3;
    end else begin
        streamOut_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_3_reg_354 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_3_reg_354 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op59_write_state5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op58_write_state5 == 1'b1)) | ((tmp_3_reg_354 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op46_write_state4 == 1'b1)))) begin
        streamOut_V_V_write = 1'b1;
    end else begin
        streamOut_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tsDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        tsDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tsReg_V_ap_vld = 1'b1;
    end else begin
        tsReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tsStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        tsStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamIn_V_V_0_sel == 1'b1)) begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_B;
    end else begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tsStreamIn_V_V_TDATA_blk_n = tsStreamIn_V_V_0_state[1'd0];
    end else begin
        tsStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        xStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        xStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamIn_V_V_0_sel == 1'b1)) begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_B;
    end else begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        xStreamIn_V_V_TDATA_blk_n = xStreamIn_V_V_0_state[1'd0];
    end else begin
        xStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        yDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        yDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        yReg_V_ap_vld = 1'b1;
    end else begin
        yReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        yStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        yStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamIn_V_V_0_sel == 1'b1)) begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_B;
    end else begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        yStreamIn_V_V_TDATA_blk_n = yStreamIn_V_V_0_state[1'd0];
    end else begin
        yStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((real_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op46_write_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op46_write_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op46_write_state4 == 1'b1)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1)))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_done_reg == 1'b1) | ((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_done_reg == 1'b1) | ((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_done_reg == 1'b1) | ((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((xStreamIn_V_V_0_vld_out == 1'b0) | (custDataStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op46_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = (((tmp_3_reg_354 == 1'd0) & (streamOut_V_V_full_n == 1'b0)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((streamOut_V_V_full_n == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op46_write_state4 = ((tmp_4_reg_363 == 1'd0) & (tmp_3_reg_354 == 1'd1));
end

always @ (*) begin
    ap_predicate_op58_write_state5 = ((tmp_4_reg_363 == 1'd0) & (tmp_3_reg_354 == 1'd1));
end

always @ (*) begin
    ap_predicate_op59_write_state5 = ((tmp_4_reg_363 == 1'd1) & (tmp_3_reg_354 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign custDataStreamIn_V_V_0_vld_in = custDataStreamIn_V_V_TVALID;

assign custDataStreamIn_V_V_0_vld_out = custDataStreamIn_V_V_0_state[1'd0];

assign custDataStreamIn_V_V_TREADY = custDataStreamIn_V_V_0_state[1'd1];

assign glLastTSReg_V = glLastTS_V;

assign glLastYReg_V = glLastY_V;

assign nonMonTSDiffFlgReg_V = ap_phi_reg_pp0_iter0_p_0102_1_reg_176;

assign p_Result_1_fu_313_p3 = {{4'd1}, {tmp_6_reg_344}};

assign p_Result_2_fu_329_p1 = tmp_fu_321_p4;

assign p_Result_s_fu_291_p3 = {{1'd1}, {tmp_2_reg_339}};

assign polStreamIn_V_V_0_ack_in = polStreamIn_V_V_0_state[1'd1];

assign polStreamIn_V_V_0_load_A = (polStreamIn_V_V_0_state_cmp_full & ~polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_load_B = (polStreamIn_V_V_0_state_cmp_full & polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_sel = polStreamIn_V_V_0_sel_rd;

assign polStreamIn_V_V_0_state_cmp_full = ((polStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamIn_V_V_0_vld_in = polStreamIn_V_V_TVALID;

assign polStreamIn_V_V_0_vld_out = polStreamIn_V_V_0_state[1'd0];

assign polStreamIn_V_V_TREADY = polStreamIn_V_V_0_state[1'd1];

assign rev1_fu_258_p2 = (ult_fu_252_p2 ^ 1'd1);

assign start_out = real_start;

assign tmp_2_fu_229_p1 = tsStreamIn_V_V_0_data_out[14:0];

assign tmp_3_fu_246_p2 = ((tsStreamIn_V_V_0_data_out == glLastTS_V) ? 1'b1 : 1'b0);

assign tmp_4_fu_268_p2 = ((yStreamIn_V_V_0_data_out == glLastY_V) ? 1'b1 : 1'b0);

assign tmp_5_fu_298_p2 = ((p_Result_s_fu_291_p3 == 16'd32768) ? 1'b1 : 1'b0);

assign tmp_6_fu_233_p1 = yStreamIn_V_V_0_data_out[11:0];

assign tmp_7_fu_237_p1 = xStreamIn_V_V_0_data_out[11:0];

assign tmp_V_1_fu_225_p1 = polStreamIn_V_V_0_data_out[0:0];

assign tmp_fu_321_p4 = {{{{1'd1}, {tmp_V_1_reg_334}}}, {tmp_7_reg_349}};

assign tsDiffFlgReg_V = ap_phi_reg_pp0_iter1_p_s_reg_191;

assign tsRaw_V_fu_304_p3 = ((tmp_5_fu_298_p2[0:0] === 1'b1) ? 16'd28673 : p_Result_s_fu_291_p3);

assign tsReg_V = tsStreamIn_V_V_0_data_out;

assign tsStreamIn_V_V_0_ack_in = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamIn_V_V_0_load_A = (tsStreamIn_V_V_0_state_cmp_full & ~tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_load_B = (tsStreamIn_V_V_0_state_cmp_full & tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_sel = tsStreamIn_V_V_0_sel_rd;

assign tsStreamIn_V_V_0_state_cmp_full = ((tsStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamIn_V_V_0_vld_in = tsStreamIn_V_V_TVALID;

assign tsStreamIn_V_V_0_vld_out = tsStreamIn_V_V_0_state[1'd0];

assign tsStreamIn_V_V_TREADY = tsStreamIn_V_V_0_state[1'd1];

assign ult_fu_252_p2 = ((glLastTS_V < tsStreamIn_V_V_0_data_out) ? 1'b1 : 1'b0);

assign xStreamIn_V_V_0_ack_in = xStreamIn_V_V_0_state[1'd1];

assign xStreamIn_V_V_0_load_A = (xStreamIn_V_V_0_state_cmp_full & ~xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_load_B = (xStreamIn_V_V_0_state_cmp_full & xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_sel = xStreamIn_V_V_0_sel_rd;

assign xStreamIn_V_V_0_state_cmp_full = ((xStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamIn_V_V_0_vld_in = xStreamIn_V_V_TVALID;

assign xStreamIn_V_V_0_vld_out = xStreamIn_V_V_0_state[1'd0];

assign xStreamIn_V_V_TREADY = xStreamIn_V_V_0_state[1'd1];

assign yDiffFlgReg_V = ap_phi_reg_pp0_iter1_p_055_1_reg_208;

assign yReg_V = yStreamIn_V_V_0_data_out;

assign yStreamIn_V_V_0_ack_in = yStreamIn_V_V_0_state[1'd1];

assign yStreamIn_V_V_0_load_A = (yStreamIn_V_V_0_state_cmp_full & ~yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_load_B = (yStreamIn_V_V_0_state_cmp_full & yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_sel = yStreamIn_V_V_0_sel_rd;

assign yStreamIn_V_V_0_state_cmp_full = ((yStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamIn_V_V_0_vld_in = yStreamIn_V_V_TVALID;

assign yStreamIn_V_V_0_vld_out = yStreamIn_V_V_0_state[1'd0];

assign yStreamIn_V_V_TREADY = yStreamIn_V_V_0_state[1'd1];

endmodule //XYTSStreamToRawStrea
