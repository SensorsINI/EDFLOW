// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RawStreamToFIFO (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        streamIn_V_V_dout,
        streamIn_V_V_empty_n,
        streamIn_V_V_read,
        dataOut_V,
        dataOut_V_ap_vld,
        nonMonTSDiffFlgReg_V,
        nonMonTSDiffFlgReg_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] streamIn_V_V_dout;
input   streamIn_V_V_empty_n;
output   streamIn_V_V_read;
output  [15:0] dataOut_V;
output   dataOut_V_ap_vld;
output  [0:0] nonMonTSDiffFlgReg_V;
output   nonMonTSDiffFlgReg_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg streamIn_V_V_read;
reg[15:0] dataOut_V;
reg dataOut_V_ap_vld;
reg nonMonTSDiffFlgReg_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [47:0] tsWrap_V;
reg    streamIn_V_V_blk_n;
reg    ap_block_state1;
wire   [47:0] tmp_6_fu_115_p2;
wire   [0:0] tmp_fu_79_p3;
wire   [0:0] tmp_1_fu_97_p2;
wire   [15:0] p_Result_s_27_fu_141_p3;
reg   [15:0] dataOut_V_preg;
wire   [2:0] p_Result_s_fu_87_p4;
wire   [11:0] tmp_8_fu_103_p1;
wire   [47:0] tmp_5_fu_107_p1;
wire   [7:0] tmp_9_fu_127_p1;
wire   [7:0] p_Result_3_fu_131_p4;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 tsWrap_V = 48'd0;
#0 dataOut_V_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            dataOut_V_preg <= p_Result_s_27_fu_141_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_1_fu_97_p2 == 1'd1) & (tmp_fu_79_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tsWrap_V <= tmp_6_fu_115_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dataOut_V = p_Result_s_27_fu_141_p3;
    end else begin
        dataOut_V = dataOut_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dataOut_V_ap_vld = 1'b1;
    end else begin
        dataOut_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        streamIn_V_V_blk_n = streamIn_V_V_empty_n;
    end else begin
        streamIn_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamIn_V_V_read = 1'b1;
    end else begin
        streamIn_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (streamIn_V_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign nonMonTSDiffFlgReg_V = 1'd0;

assign p_Result_3_fu_131_p4 = {{streamIn_V_V_dout[15:8]}};

assign p_Result_s_27_fu_141_p3 = {{tmp_9_fu_127_p1}, {p_Result_3_fu_131_p4}};

assign p_Result_s_fu_87_p4 = {{streamIn_V_V_dout[14:12]}};

assign tmp_1_fu_97_p2 = ((p_Result_s_fu_87_p4 == 3'd7) ? 1'b1 : 1'b0);

assign tmp_5_fu_107_p1 = tmp_8_fu_103_p1;

assign tmp_6_fu_115_p2 = (tmp_5_fu_107_p1 + tsWrap_V);

assign tmp_8_fu_103_p1 = streamIn_V_V_dout[11:0];

assign tmp_9_fu_127_p1 = streamIn_V_V_dout[7:0];

assign tmp_fu_79_p3 = streamIn_V_V_dout[32'd15];

endmodule //RawStreamToFIFO
