// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eventStreamSwitch,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.747000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=806,HLS_SYN_LUT=870}" *)

module eventStreamSwitch (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xStreamOut_V_V_TREADY,
        yStreamOut_V_V_TREADY,
        tsStreamOut_V_V_TREADY,
        polStreamOut_V_V_TREADY,
        cornerStreamOut_V_V_TREADY,
        xStreamIn0_V_V_TDATA,
        xStreamIn0_V_V_TVALID,
        xStreamIn0_V_V_TREADY,
        yStreamIn0_V_V_TDATA,
        yStreamIn0_V_V_TVALID,
        yStreamIn0_V_V_TREADY,
        tsStreamIn0_V_V_TDATA,
        tsStreamIn0_V_V_TVALID,
        tsStreamIn0_V_V_TREADY,
        polStreamIn0_V_V_TDATA,
        polStreamIn0_V_V_TVALID,
        polStreamIn0_V_V_TREADY,
        cornerStreamIn0_V_V_TDATA,
        cornerStreamIn0_V_V_TVALID,
        cornerStreamIn0_V_V_TREADY,
        xStreamIn1_V_V_TDATA,
        xStreamIn1_V_V_TVALID,
        xStreamIn1_V_V_TREADY,
        yStreamIn1_V_V_TDATA,
        yStreamIn1_V_V_TVALID,
        yStreamIn1_V_V_TREADY,
        tsStreamIn1_V_V_TDATA,
        tsStreamIn1_V_V_TVALID,
        tsStreamIn1_V_V_TREADY,
        polStreamIn1_V_V_TDATA,
        polStreamIn1_V_V_TVALID,
        polStreamIn1_V_V_TREADY,
        cornerStreamIn1_V_V_TDATA,
        cornerStreamIn1_V_V_TVALID,
        cornerStreamIn1_V_V_TREADY,
        xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID,
        yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID,
        polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID,
        cornerStreamOut_V_V_TDATA,
        cornerStreamOut_V_V_TVALID,
        s_axi_config_AWVALID,
        s_axi_config_AWREADY,
        s_axi_config_AWADDR,
        s_axi_config_WVALID,
        s_axi_config_WREADY,
        s_axi_config_WDATA,
        s_axi_config_WSTRB,
        s_axi_config_ARVALID,
        s_axi_config_ARREADY,
        s_axi_config_ARADDR,
        s_axi_config_RVALID,
        s_axi_config_RREADY,
        s_axi_config_RDATA,
        s_axi_config_RRESP,
        s_axi_config_BVALID,
        s_axi_config_BREADY,
        s_axi_config_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONFIG_DATA_WIDTH = 32;
parameter    C_S_AXI_CONFIG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONFIG_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   xStreamOut_V_V_TREADY;
input   yStreamOut_V_V_TREADY;
input   tsStreamOut_V_V_TREADY;
input   polStreamOut_V_V_TREADY;
input   cornerStreamOut_V_V_TREADY;
input  [15:0] xStreamIn0_V_V_TDATA;
input   xStreamIn0_V_V_TVALID;
output   xStreamIn0_V_V_TREADY;
input  [15:0] yStreamIn0_V_V_TDATA;
input   yStreamIn0_V_V_TVALID;
output   yStreamIn0_V_V_TREADY;
input  [63:0] tsStreamIn0_V_V_TDATA;
input   tsStreamIn0_V_V_TVALID;
output   tsStreamIn0_V_V_TREADY;
input  [7:0] polStreamIn0_V_V_TDATA;
input   polStreamIn0_V_V_TVALID;
output   polStreamIn0_V_V_TREADY;
input  [7:0] cornerStreamIn0_V_V_TDATA;
input   cornerStreamIn0_V_V_TVALID;
output   cornerStreamIn0_V_V_TREADY;
input  [15:0] xStreamIn1_V_V_TDATA;
input   xStreamIn1_V_V_TVALID;
output   xStreamIn1_V_V_TREADY;
input  [15:0] yStreamIn1_V_V_TDATA;
input   yStreamIn1_V_V_TVALID;
output   yStreamIn1_V_V_TREADY;
input  [63:0] tsStreamIn1_V_V_TDATA;
input   tsStreamIn1_V_V_TVALID;
output   tsStreamIn1_V_V_TREADY;
input  [7:0] polStreamIn1_V_V_TDATA;
input   polStreamIn1_V_V_TVALID;
output   polStreamIn1_V_V_TREADY;
input  [7:0] cornerStreamIn1_V_V_TDATA;
input   cornerStreamIn1_V_V_TVALID;
output   cornerStreamIn1_V_V_TREADY;
output  [15:0] xStreamOut_V_V_TDATA;
output   xStreamOut_V_V_TVALID;
output  [15:0] yStreamOut_V_V_TDATA;
output   yStreamOut_V_V_TVALID;
output  [63:0] tsStreamOut_V_V_TDATA;
output   tsStreamOut_V_V_TVALID;
output  [7:0] polStreamOut_V_V_TDATA;
output   polStreamOut_V_V_TVALID;
output  [7:0] cornerStreamOut_V_V_TDATA;
output   cornerStreamOut_V_V_TVALID;
input   s_axi_config_AWVALID;
output   s_axi_config_AWREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_AWADDR;
input   s_axi_config_WVALID;
output   s_axi_config_WREADY;
input  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_WDATA;
input  [C_S_AXI_CONFIG_WSTRB_WIDTH - 1:0] s_axi_config_WSTRB;
input   s_axi_config_ARVALID;
output   s_axi_config_ARREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_ARADDR;
output   s_axi_config_RVALID;
input   s_axi_config_RREADY;
output  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_RDATA;
output  [1:0] s_axi_config_RRESP;
output   s_axi_config_BVALID;
input   s_axi_config_BREADY;
output  [1:0] s_axi_config_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    xStreamIn0_V_V_0_vld_out;
reg   [0:0] tmp_reg_283;
wire    yStreamIn0_V_V_0_vld_out;
wire    polStreamIn0_V_V_0_vld_out;
wire    tsStreamIn0_V_V_0_vld_out;
wire    cornerStreamIn0_V_V_0_vld_out;
wire    xStreamIn1_V_V_0_vld_out;
wire    yStreamIn1_V_V_0_vld_out;
wire    polStreamIn1_V_V_0_vld_out;
wire    tsStreamIn1_V_V_0_vld_out;
wire    cornerStreamIn1_V_V_0_vld_out;
reg    ap_block_state2_pp0_stage0_iter1;
wire    xStreamOut_V_V_1_ack_in;
wire    yStreamOut_V_V_1_ack_in;
wire    tsStreamOut_V_V_1_ack_in;
wire    polStreamOut_V_V_1_ack_in;
wire    cornerStreamOut_V_V_1_ack_in;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] config_V;
reg   [15:0] xStreamIn0_V_V_0_data_out;
wire    xStreamIn0_V_V_0_vld_in;
wire    xStreamIn0_V_V_0_ack_in;
reg    xStreamIn0_V_V_0_ack_out;
reg   [15:0] xStreamIn0_V_V_0_payload_A;
reg   [15:0] xStreamIn0_V_V_0_payload_B;
reg    xStreamIn0_V_V_0_sel_rd;
reg    xStreamIn0_V_V_0_sel_wr;
wire    xStreamIn0_V_V_0_sel;
wire    xStreamIn0_V_V_0_load_A;
wire    xStreamIn0_V_V_0_load_B;
reg   [1:0] xStreamIn0_V_V_0_state;
wire    xStreamIn0_V_V_0_state_cmp_full;
reg   [15:0] yStreamIn0_V_V_0_data_out;
wire    yStreamIn0_V_V_0_vld_in;
wire    yStreamIn0_V_V_0_ack_in;
reg    yStreamIn0_V_V_0_ack_out;
reg   [15:0] yStreamIn0_V_V_0_payload_A;
reg   [15:0] yStreamIn0_V_V_0_payload_B;
reg    yStreamIn0_V_V_0_sel_rd;
reg    yStreamIn0_V_V_0_sel_wr;
wire    yStreamIn0_V_V_0_sel;
wire    yStreamIn0_V_V_0_load_A;
wire    yStreamIn0_V_V_0_load_B;
reg   [1:0] yStreamIn0_V_V_0_state;
wire    yStreamIn0_V_V_0_state_cmp_full;
reg   [63:0] tsStreamIn0_V_V_0_data_out;
wire    tsStreamIn0_V_V_0_vld_in;
wire    tsStreamIn0_V_V_0_ack_in;
reg    tsStreamIn0_V_V_0_ack_out;
reg   [63:0] tsStreamIn0_V_V_0_payload_A;
reg   [63:0] tsStreamIn0_V_V_0_payload_B;
reg    tsStreamIn0_V_V_0_sel_rd;
reg    tsStreamIn0_V_V_0_sel_wr;
wire    tsStreamIn0_V_V_0_sel;
wire    tsStreamIn0_V_V_0_load_A;
wire    tsStreamIn0_V_V_0_load_B;
reg   [1:0] tsStreamIn0_V_V_0_state;
wire    tsStreamIn0_V_V_0_state_cmp_full;
reg   [7:0] polStreamIn0_V_V_0_data_out;
wire    polStreamIn0_V_V_0_vld_in;
wire    polStreamIn0_V_V_0_ack_in;
reg    polStreamIn0_V_V_0_ack_out;
reg   [7:0] polStreamIn0_V_V_0_payload_A;
reg   [7:0] polStreamIn0_V_V_0_payload_B;
reg    polStreamIn0_V_V_0_sel_rd;
reg    polStreamIn0_V_V_0_sel_wr;
wire    polStreamIn0_V_V_0_sel;
wire    polStreamIn0_V_V_0_load_A;
wire    polStreamIn0_V_V_0_load_B;
reg   [1:0] polStreamIn0_V_V_0_state;
wire    polStreamIn0_V_V_0_state_cmp_full;
reg   [7:0] cornerStreamIn0_V_V_0_data_out;
wire    cornerStreamIn0_V_V_0_vld_in;
wire    cornerStreamIn0_V_V_0_ack_in;
reg    cornerStreamIn0_V_V_0_ack_out;
reg   [7:0] cornerStreamIn0_V_V_0_payload_A;
reg   [7:0] cornerStreamIn0_V_V_0_payload_B;
reg    cornerStreamIn0_V_V_0_sel_rd;
reg    cornerStreamIn0_V_V_0_sel_wr;
wire    cornerStreamIn0_V_V_0_sel;
wire    cornerStreamIn0_V_V_0_load_A;
wire    cornerStreamIn0_V_V_0_load_B;
reg   [1:0] cornerStreamIn0_V_V_0_state;
wire    cornerStreamIn0_V_V_0_state_cmp_full;
reg   [15:0] xStreamIn1_V_V_0_data_out;
wire    xStreamIn1_V_V_0_vld_in;
wire    xStreamIn1_V_V_0_ack_in;
reg    xStreamIn1_V_V_0_ack_out;
reg   [15:0] xStreamIn1_V_V_0_payload_A;
reg   [15:0] xStreamIn1_V_V_0_payload_B;
reg    xStreamIn1_V_V_0_sel_rd;
reg    xStreamIn1_V_V_0_sel_wr;
wire    xStreamIn1_V_V_0_sel;
wire    xStreamIn1_V_V_0_load_A;
wire    xStreamIn1_V_V_0_load_B;
reg   [1:0] xStreamIn1_V_V_0_state;
wire    xStreamIn1_V_V_0_state_cmp_full;
reg   [15:0] yStreamIn1_V_V_0_data_out;
wire    yStreamIn1_V_V_0_vld_in;
wire    yStreamIn1_V_V_0_ack_in;
reg    yStreamIn1_V_V_0_ack_out;
reg   [15:0] yStreamIn1_V_V_0_payload_A;
reg   [15:0] yStreamIn1_V_V_0_payload_B;
reg    yStreamIn1_V_V_0_sel_rd;
reg    yStreamIn1_V_V_0_sel_wr;
wire    yStreamIn1_V_V_0_sel;
wire    yStreamIn1_V_V_0_load_A;
wire    yStreamIn1_V_V_0_load_B;
reg   [1:0] yStreamIn1_V_V_0_state;
wire    yStreamIn1_V_V_0_state_cmp_full;
reg   [63:0] tsStreamIn1_V_V_0_data_out;
wire    tsStreamIn1_V_V_0_vld_in;
wire    tsStreamIn1_V_V_0_ack_in;
reg    tsStreamIn1_V_V_0_ack_out;
reg   [63:0] tsStreamIn1_V_V_0_payload_A;
reg   [63:0] tsStreamIn1_V_V_0_payload_B;
reg    tsStreamIn1_V_V_0_sel_rd;
reg    tsStreamIn1_V_V_0_sel_wr;
wire    tsStreamIn1_V_V_0_sel;
wire    tsStreamIn1_V_V_0_load_A;
wire    tsStreamIn1_V_V_0_load_B;
reg   [1:0] tsStreamIn1_V_V_0_state;
wire    tsStreamIn1_V_V_0_state_cmp_full;
reg   [7:0] polStreamIn1_V_V_0_data_out;
wire    polStreamIn1_V_V_0_vld_in;
wire    polStreamIn1_V_V_0_ack_in;
reg    polStreamIn1_V_V_0_ack_out;
reg   [7:0] polStreamIn1_V_V_0_payload_A;
reg   [7:0] polStreamIn1_V_V_0_payload_B;
reg    polStreamIn1_V_V_0_sel_rd;
reg    polStreamIn1_V_V_0_sel_wr;
wire    polStreamIn1_V_V_0_sel;
wire    polStreamIn1_V_V_0_load_A;
wire    polStreamIn1_V_V_0_load_B;
reg   [1:0] polStreamIn1_V_V_0_state;
wire    polStreamIn1_V_V_0_state_cmp_full;
reg   [7:0] cornerStreamIn1_V_V_0_data_out;
wire    cornerStreamIn1_V_V_0_vld_in;
wire    cornerStreamIn1_V_V_0_ack_in;
reg    cornerStreamIn1_V_V_0_ack_out;
reg   [7:0] cornerStreamIn1_V_V_0_payload_A;
reg   [7:0] cornerStreamIn1_V_V_0_payload_B;
reg    cornerStreamIn1_V_V_0_sel_rd;
reg    cornerStreamIn1_V_V_0_sel_wr;
wire    cornerStreamIn1_V_V_0_sel;
wire    cornerStreamIn1_V_V_0_load_A;
wire    cornerStreamIn1_V_V_0_load_B;
reg   [1:0] cornerStreamIn1_V_V_0_state;
wire    cornerStreamIn1_V_V_0_state_cmp_full;
reg   [15:0] xStreamOut_V_V_1_data_out;
reg    xStreamOut_V_V_1_vld_in;
wire    xStreamOut_V_V_1_vld_out;
wire    xStreamOut_V_V_1_ack_out;
reg   [15:0] xStreamOut_V_V_1_payload_A;
reg   [15:0] xStreamOut_V_V_1_payload_B;
reg    xStreamOut_V_V_1_sel_rd;
reg    xStreamOut_V_V_1_sel_wr;
wire    xStreamOut_V_V_1_sel;
wire    xStreamOut_V_V_1_load_A;
wire    xStreamOut_V_V_1_load_B;
reg   [1:0] xStreamOut_V_V_1_state;
wire    xStreamOut_V_V_1_state_cmp_full;
reg   [15:0] yStreamOut_V_V_1_data_out;
reg    yStreamOut_V_V_1_vld_in;
wire    yStreamOut_V_V_1_vld_out;
wire    yStreamOut_V_V_1_ack_out;
reg   [15:0] yStreamOut_V_V_1_payload_A;
reg   [15:0] yStreamOut_V_V_1_payload_B;
reg    yStreamOut_V_V_1_sel_rd;
reg    yStreamOut_V_V_1_sel_wr;
wire    yStreamOut_V_V_1_sel;
wire    yStreamOut_V_V_1_load_A;
wire    yStreamOut_V_V_1_load_B;
reg   [1:0] yStreamOut_V_V_1_state;
wire    yStreamOut_V_V_1_state_cmp_full;
reg   [63:0] tsStreamOut_V_V_1_data_out;
reg    tsStreamOut_V_V_1_vld_in;
wire    tsStreamOut_V_V_1_vld_out;
wire    tsStreamOut_V_V_1_ack_out;
reg   [63:0] tsStreamOut_V_V_1_payload_A;
reg   [63:0] tsStreamOut_V_V_1_payload_B;
reg    tsStreamOut_V_V_1_sel_rd;
reg    tsStreamOut_V_V_1_sel_wr;
wire    tsStreamOut_V_V_1_sel;
wire    tsStreamOut_V_V_1_load_A;
wire    tsStreamOut_V_V_1_load_B;
reg   [1:0] tsStreamOut_V_V_1_state;
wire    tsStreamOut_V_V_1_state_cmp_full;
reg   [7:0] polStreamOut_V_V_1_data_out;
reg    polStreamOut_V_V_1_vld_in;
wire    polStreamOut_V_V_1_vld_out;
wire    polStreamOut_V_V_1_ack_out;
reg   [7:0] polStreamOut_V_V_1_payload_A;
reg   [7:0] polStreamOut_V_V_1_payload_B;
reg    polStreamOut_V_V_1_sel_rd;
reg    polStreamOut_V_V_1_sel_wr;
wire    polStreamOut_V_V_1_sel;
wire    polStreamOut_V_V_1_load_A;
wire    polStreamOut_V_V_1_load_B;
reg   [1:0] polStreamOut_V_V_1_state;
wire    polStreamOut_V_V_1_state_cmp_full;
reg   [7:0] cornerStreamOut_V_V_1_data_out;
reg    cornerStreamOut_V_V_1_vld_in;
wire    cornerStreamOut_V_V_1_vld_out;
wire    cornerStreamOut_V_V_1_ack_out;
reg   [7:0] cornerStreamOut_V_V_1_payload_A;
reg   [7:0] cornerStreamOut_V_V_1_payload_B;
reg    cornerStreamOut_V_V_1_sel_rd;
reg    cornerStreamOut_V_V_1_sel_wr;
wire    cornerStreamOut_V_V_1_sel;
wire    cornerStreamOut_V_V_1_load_A;
wire    cornerStreamOut_V_V_1_load_B;
reg   [1:0] cornerStreamOut_V_V_1_state;
wire    cornerStreamOut_V_V_1_state_cmp_full;
reg    xStreamIn0_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    yStreamIn0_V_V_TDATA_blk_n;
reg    tsStreamIn0_V_V_TDATA_blk_n;
reg    polStreamIn0_V_V_TDATA_blk_n;
reg    cornerStreamIn0_V_V_TDATA_blk_n;
reg    xStreamIn1_V_V_TDATA_blk_n;
reg    yStreamIn1_V_V_TDATA_blk_n;
reg    tsStreamIn1_V_V_TDATA_blk_n;
reg    polStreamIn1_V_V_TDATA_blk_n;
reg    cornerStreamIn1_V_V_TDATA_blk_n;
reg    xStreamOut_V_V_TDATA_blk_n;
reg    yStreamOut_V_V_TDATA_blk_n;
reg    tsStreamOut_V_V_TDATA_blk_n;
reg    polStreamOut_V_V_TDATA_blk_n;
reg    cornerStreamOut_V_V_TDATA_blk_n;
wire   [0:0] tmp_fu_245_p1;
reg   [0:0] tmp_4_reg_287;
reg   [0:0] tmp_2_reg_292;
wire   [7:0] tmp_V_3_cast_fu_273_p1;
wire   [7:0] tmp_V_4_cast_fu_278_p1;
reg    ap_block_pp0_stage0_subdone;
reg   [7:0] ap_phi_mux_tmp_V_25_in_phi_fu_178_p4;
wire   [7:0] ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175;
reg   [63:0] ap_phi_mux_tmp_V_2_phi_fu_190_p4;
wire   [63:0] ap_phi_reg_pp0_iter1_tmp_V_2_reg_186;
reg   [0:0] ap_phi_mux_tmp_V_4_phi_fu_203_p4;
wire   [0:0] corner_V_fu_253_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_tmp_V_4_reg_200;
wire   [0:0] corner_V_1_fu_263_p2;
reg   [15:0] ap_phi_mux_tmp_V_1_phi_fu_213_p4;
wire   [15:0] ap_phi_reg_pp0_iter1_tmp_V_1_reg_209;
reg   [15:0] ap_phi_mux_tmp_V_phi_fu_227_p4;
wire   [15:0] ap_phi_reg_pp0_iter1_tmp_V_reg_223;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_V_8_fu_249_p1;
wire   [0:0] tmp_V_12_fu_259_p1;
wire   [0:0] pol0_V_fu_269_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_996;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 xStreamIn0_V_V_0_sel_rd = 1'b0;
#0 xStreamIn0_V_V_0_sel_wr = 1'b0;
#0 xStreamIn0_V_V_0_state = 2'd0;
#0 yStreamIn0_V_V_0_sel_rd = 1'b0;
#0 yStreamIn0_V_V_0_sel_wr = 1'b0;
#0 yStreamIn0_V_V_0_state = 2'd0;
#0 tsStreamIn0_V_V_0_sel_rd = 1'b0;
#0 tsStreamIn0_V_V_0_sel_wr = 1'b0;
#0 tsStreamIn0_V_V_0_state = 2'd0;
#0 polStreamIn0_V_V_0_sel_rd = 1'b0;
#0 polStreamIn0_V_V_0_sel_wr = 1'b0;
#0 polStreamIn0_V_V_0_state = 2'd0;
#0 cornerStreamIn0_V_V_0_sel_rd = 1'b0;
#0 cornerStreamIn0_V_V_0_sel_wr = 1'b0;
#0 cornerStreamIn0_V_V_0_state = 2'd0;
#0 xStreamIn1_V_V_0_sel_rd = 1'b0;
#0 xStreamIn1_V_V_0_sel_wr = 1'b0;
#0 xStreamIn1_V_V_0_state = 2'd0;
#0 yStreamIn1_V_V_0_sel_rd = 1'b0;
#0 yStreamIn1_V_V_0_sel_wr = 1'b0;
#0 yStreamIn1_V_V_0_state = 2'd0;
#0 tsStreamIn1_V_V_0_sel_rd = 1'b0;
#0 tsStreamIn1_V_V_0_sel_wr = 1'b0;
#0 tsStreamIn1_V_V_0_state = 2'd0;
#0 polStreamIn1_V_V_0_sel_rd = 1'b0;
#0 polStreamIn1_V_V_0_sel_wr = 1'b0;
#0 polStreamIn1_V_V_0_state = 2'd0;
#0 cornerStreamIn1_V_V_0_sel_rd = 1'b0;
#0 cornerStreamIn1_V_V_0_sel_wr = 1'b0;
#0 cornerStreamIn1_V_V_0_state = 2'd0;
#0 xStreamOut_V_V_1_sel_rd = 1'b0;
#0 xStreamOut_V_V_1_sel_wr = 1'b0;
#0 xStreamOut_V_V_1_state = 2'd0;
#0 yStreamOut_V_V_1_sel_rd = 1'b0;
#0 yStreamOut_V_V_1_sel_wr = 1'b0;
#0 yStreamOut_V_V_1_state = 2'd0;
#0 tsStreamOut_V_V_1_sel_rd = 1'b0;
#0 tsStreamOut_V_V_1_sel_wr = 1'b0;
#0 tsStreamOut_V_V_1_state = 2'd0;
#0 polStreamOut_V_V_1_sel_rd = 1'b0;
#0 polStreamOut_V_V_1_sel_wr = 1'b0;
#0 polStreamOut_V_V_1_state = 2'd0;
#0 cornerStreamOut_V_V_1_sel_rd = 1'b0;
#0 cornerStreamOut_V_V_1_sel_wr = 1'b0;
#0 cornerStreamOut_V_V_1_state = 2'd0;
end

eventStreamSwitch_config_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONFIG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONFIG_DATA_WIDTH ))
eventStreamSwitch_config_s_axi_U(
    .AWVALID(s_axi_config_AWVALID),
    .AWREADY(s_axi_config_AWREADY),
    .AWADDR(s_axi_config_AWADDR),
    .WVALID(s_axi_config_WVALID),
    .WREADY(s_axi_config_WREADY),
    .WDATA(s_axi_config_WDATA),
    .WSTRB(s_axi_config_WSTRB),
    .ARVALID(s_axi_config_ARVALID),
    .ARREADY(s_axi_config_ARREADY),
    .ARADDR(s_axi_config_ARADDR),
    .RVALID(s_axi_config_RVALID),
    .RREADY(s_axi_config_RREADY),
    .RDATA(s_axi_config_RDATA),
    .RRESP(s_axi_config_RRESP),
    .BVALID(s_axi_config_BVALID),
    .BREADY(s_axi_config_BREADY),
    .BRESP(s_axi_config_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .config_V(config_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamIn0_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((cornerStreamIn0_V_V_0_vld_out == 1'b1) & (cornerStreamIn0_V_V_0_ack_out == 1'b1))) begin
            cornerStreamIn0_V_V_0_sel_rd <= ~cornerStreamIn0_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamIn0_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((cornerStreamIn0_V_V_0_ack_in == 1'b1) & (cornerStreamIn0_V_V_0_vld_in == 1'b1))) begin
            cornerStreamIn0_V_V_0_sel_wr <= ~cornerStreamIn0_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamIn0_V_V_0_state <= 2'd0;
    end else begin
        if ((((cornerStreamIn0_V_V_0_vld_in == 1'b0) & (cornerStreamIn0_V_V_0_state == 2'd2)) | ((cornerStreamIn0_V_V_0_vld_in == 1'b0) & (cornerStreamIn0_V_V_0_ack_out == 1'b1) & (cornerStreamIn0_V_V_0_state == 2'd3)))) begin
            cornerStreamIn0_V_V_0_state <= 2'd2;
        end else if ((((cornerStreamIn0_V_V_0_ack_out == 1'b0) & (cornerStreamIn0_V_V_0_state == 2'd1)) | ((cornerStreamIn0_V_V_0_ack_out == 1'b0) & (cornerStreamIn0_V_V_0_vld_in == 1'b1) & (cornerStreamIn0_V_V_0_state == 2'd3)))) begin
            cornerStreamIn0_V_V_0_state <= 2'd1;
        end else if (((~((cornerStreamIn0_V_V_0_vld_in == 1'b0) & (cornerStreamIn0_V_V_0_ack_out == 1'b1)) & ~((cornerStreamIn0_V_V_0_ack_out == 1'b0) & (cornerStreamIn0_V_V_0_vld_in == 1'b1)) & (cornerStreamIn0_V_V_0_state == 2'd3)) | ((cornerStreamIn0_V_V_0_ack_out == 1'b1) & (cornerStreamIn0_V_V_0_state == 2'd1)) | ((cornerStreamIn0_V_V_0_vld_in == 1'b1) & (cornerStreamIn0_V_V_0_state == 2'd2)))) begin
            cornerStreamIn0_V_V_0_state <= 2'd3;
        end else begin
            cornerStreamIn0_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamIn1_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((cornerStreamIn1_V_V_0_vld_out == 1'b1) & (cornerStreamIn1_V_V_0_ack_out == 1'b1))) begin
            cornerStreamIn1_V_V_0_sel_rd <= ~cornerStreamIn1_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamIn1_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((cornerStreamIn1_V_V_0_ack_in == 1'b1) & (cornerStreamIn1_V_V_0_vld_in == 1'b1))) begin
            cornerStreamIn1_V_V_0_sel_wr <= ~cornerStreamIn1_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamIn1_V_V_0_state <= 2'd0;
    end else begin
        if ((((cornerStreamIn1_V_V_0_vld_in == 1'b0) & (cornerStreamIn1_V_V_0_state == 2'd2)) | ((cornerStreamIn1_V_V_0_vld_in == 1'b0) & (cornerStreamIn1_V_V_0_ack_out == 1'b1) & (cornerStreamIn1_V_V_0_state == 2'd3)))) begin
            cornerStreamIn1_V_V_0_state <= 2'd2;
        end else if ((((cornerStreamIn1_V_V_0_ack_out == 1'b0) & (cornerStreamIn1_V_V_0_state == 2'd1)) | ((cornerStreamIn1_V_V_0_ack_out == 1'b0) & (cornerStreamIn1_V_V_0_vld_in == 1'b1) & (cornerStreamIn1_V_V_0_state == 2'd3)))) begin
            cornerStreamIn1_V_V_0_state <= 2'd1;
        end else if (((~((cornerStreamIn1_V_V_0_vld_in == 1'b0) & (cornerStreamIn1_V_V_0_ack_out == 1'b1)) & ~((cornerStreamIn1_V_V_0_ack_out == 1'b0) & (cornerStreamIn1_V_V_0_vld_in == 1'b1)) & (cornerStreamIn1_V_V_0_state == 2'd3)) | ((cornerStreamIn1_V_V_0_ack_out == 1'b1) & (cornerStreamIn1_V_V_0_state == 2'd1)) | ((cornerStreamIn1_V_V_0_vld_in == 1'b1) & (cornerStreamIn1_V_V_0_state == 2'd2)))) begin
            cornerStreamIn1_V_V_0_state <= 2'd3;
        end else begin
            cornerStreamIn1_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((cornerStreamOut_V_V_1_ack_out == 1'b1) & (cornerStreamOut_V_V_1_vld_out == 1'b1))) begin
            cornerStreamOut_V_V_1_sel_rd <= ~cornerStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((cornerStreamOut_V_V_1_vld_in == 1'b1) & (cornerStreamOut_V_V_1_ack_in == 1'b1))) begin
            cornerStreamOut_V_V_1_sel_wr <= ~cornerStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cornerStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((cornerStreamOut_V_V_1_vld_in == 1'b0) & (cornerStreamOut_V_V_1_state == 2'd2)) | ((cornerStreamOut_V_V_1_vld_in == 1'b0) & (cornerStreamOut_V_V_1_ack_out == 1'b1) & (cornerStreamOut_V_V_1_state == 2'd3)))) begin
            cornerStreamOut_V_V_1_state <= 2'd2;
        end else if ((((cornerStreamOut_V_V_1_ack_out == 1'b0) & (cornerStreamOut_V_V_1_state == 2'd1)) | ((cornerStreamOut_V_V_1_ack_out == 1'b0) & (cornerStreamOut_V_V_1_vld_in == 1'b1) & (cornerStreamOut_V_V_1_state == 2'd3)))) begin
            cornerStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((cornerStreamOut_V_V_1_vld_in == 1'b0) & (cornerStreamOut_V_V_1_ack_out == 1'b1)) & ~((cornerStreamOut_V_V_1_ack_out == 1'b0) & (cornerStreamOut_V_V_1_vld_in == 1'b1)) & (cornerStreamOut_V_V_1_state == 2'd3)) | ((cornerStreamOut_V_V_1_ack_out == 1'b1) & (cornerStreamOut_V_V_1_state == 2'd1)) | ((cornerStreamOut_V_V_1_vld_in == 1'b1) & (cornerStreamOut_V_V_1_state == 2'd2)))) begin
            cornerStreamOut_V_V_1_state <= 2'd3;
        end else begin
            cornerStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn0_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((polStreamIn0_V_V_0_vld_out == 1'b1) & (polStreamIn0_V_V_0_ack_out == 1'b1))) begin
            polStreamIn0_V_V_0_sel_rd <= ~polStreamIn0_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn0_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((polStreamIn0_V_V_0_ack_in == 1'b1) & (polStreamIn0_V_V_0_vld_in == 1'b1))) begin
            polStreamIn0_V_V_0_sel_wr <= ~polStreamIn0_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn0_V_V_0_state <= 2'd0;
    end else begin
        if ((((polStreamIn0_V_V_0_vld_in == 1'b0) & (polStreamIn0_V_V_0_state == 2'd2)) | ((polStreamIn0_V_V_0_vld_in == 1'b0) & (polStreamIn0_V_V_0_ack_out == 1'b1) & (polStreamIn0_V_V_0_state == 2'd3)))) begin
            polStreamIn0_V_V_0_state <= 2'd2;
        end else if ((((polStreamIn0_V_V_0_ack_out == 1'b0) & (polStreamIn0_V_V_0_state == 2'd1)) | ((polStreamIn0_V_V_0_ack_out == 1'b0) & (polStreamIn0_V_V_0_vld_in == 1'b1) & (polStreamIn0_V_V_0_state == 2'd3)))) begin
            polStreamIn0_V_V_0_state <= 2'd1;
        end else if (((~((polStreamIn0_V_V_0_vld_in == 1'b0) & (polStreamIn0_V_V_0_ack_out == 1'b1)) & ~((polStreamIn0_V_V_0_ack_out == 1'b0) & (polStreamIn0_V_V_0_vld_in == 1'b1)) & (polStreamIn0_V_V_0_state == 2'd3)) | ((polStreamIn0_V_V_0_ack_out == 1'b1) & (polStreamIn0_V_V_0_state == 2'd1)) | ((polStreamIn0_V_V_0_vld_in == 1'b1) & (polStreamIn0_V_V_0_state == 2'd2)))) begin
            polStreamIn0_V_V_0_state <= 2'd3;
        end else begin
            polStreamIn0_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn1_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((polStreamIn1_V_V_0_vld_out == 1'b1) & (polStreamIn1_V_V_0_ack_out == 1'b1))) begin
            polStreamIn1_V_V_0_sel_rd <= ~polStreamIn1_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn1_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((polStreamIn1_V_V_0_ack_in == 1'b1) & (polStreamIn1_V_V_0_vld_in == 1'b1))) begin
            polStreamIn1_V_V_0_sel_wr <= ~polStreamIn1_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn1_V_V_0_state <= 2'd0;
    end else begin
        if ((((polStreamIn1_V_V_0_vld_in == 1'b0) & (polStreamIn1_V_V_0_state == 2'd2)) | ((polStreamIn1_V_V_0_vld_in == 1'b0) & (polStreamIn1_V_V_0_ack_out == 1'b1) & (polStreamIn1_V_V_0_state == 2'd3)))) begin
            polStreamIn1_V_V_0_state <= 2'd2;
        end else if ((((polStreamIn1_V_V_0_ack_out == 1'b0) & (polStreamIn1_V_V_0_state == 2'd1)) | ((polStreamIn1_V_V_0_ack_out == 1'b0) & (polStreamIn1_V_V_0_vld_in == 1'b1) & (polStreamIn1_V_V_0_state == 2'd3)))) begin
            polStreamIn1_V_V_0_state <= 2'd1;
        end else if (((~((polStreamIn1_V_V_0_vld_in == 1'b0) & (polStreamIn1_V_V_0_ack_out == 1'b1)) & ~((polStreamIn1_V_V_0_ack_out == 1'b0) & (polStreamIn1_V_V_0_vld_in == 1'b1)) & (polStreamIn1_V_V_0_state == 2'd3)) | ((polStreamIn1_V_V_0_ack_out == 1'b1) & (polStreamIn1_V_V_0_state == 2'd1)) | ((polStreamIn1_V_V_0_vld_in == 1'b1) & (polStreamIn1_V_V_0_state == 2'd2)))) begin
            polStreamIn1_V_V_0_state <= 2'd3;
        end else begin
            polStreamIn1_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_vld_out == 1'b1))) begin
            polStreamOut_V_V_1_sel_rd <= ~polStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_vld_in == 1'b1) & (polStreamOut_V_V_1_ack_in == 1'b1))) begin
            polStreamOut_V_V_1_sel_wr <= ~polStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_state == 2'd2)) | ((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_state == 2'd3)))) begin
            polStreamOut_V_V_1_state <= 2'd2;
        end else if ((((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_state == 2'd1)) | ((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_vld_in == 1'b1) & (polStreamOut_V_V_1_state == 2'd3)))) begin
            polStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_ack_out == 1'b1)) & ~((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_vld_in == 1'b1)) & (polStreamOut_V_V_1_state == 2'd3)) | ((polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_state == 2'd1)) | ((polStreamOut_V_V_1_vld_in == 1'b1) & (polStreamOut_V_V_1_state == 2'd2)))) begin
            polStreamOut_V_V_1_state <= 2'd3;
        end else begin
            polStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn0_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamIn0_V_V_0_vld_out == 1'b1) & (tsStreamIn0_V_V_0_ack_out == 1'b1))) begin
            tsStreamIn0_V_V_0_sel_rd <= ~tsStreamIn0_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn0_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamIn0_V_V_0_ack_in == 1'b1) & (tsStreamIn0_V_V_0_vld_in == 1'b1))) begin
            tsStreamIn0_V_V_0_sel_wr <= ~tsStreamIn0_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn0_V_V_0_state <= 2'd0;
    end else begin
        if ((((tsStreamIn0_V_V_0_vld_in == 1'b0) & (tsStreamIn0_V_V_0_state == 2'd2)) | ((tsStreamIn0_V_V_0_vld_in == 1'b0) & (tsStreamIn0_V_V_0_ack_out == 1'b1) & (tsStreamIn0_V_V_0_state == 2'd3)))) begin
            tsStreamIn0_V_V_0_state <= 2'd2;
        end else if ((((tsStreamIn0_V_V_0_ack_out == 1'b0) & (tsStreamIn0_V_V_0_state == 2'd1)) | ((tsStreamIn0_V_V_0_ack_out == 1'b0) & (tsStreamIn0_V_V_0_vld_in == 1'b1) & (tsStreamIn0_V_V_0_state == 2'd3)))) begin
            tsStreamIn0_V_V_0_state <= 2'd1;
        end else if (((~((tsStreamIn0_V_V_0_vld_in == 1'b0) & (tsStreamIn0_V_V_0_ack_out == 1'b1)) & ~((tsStreamIn0_V_V_0_ack_out == 1'b0) & (tsStreamIn0_V_V_0_vld_in == 1'b1)) & (tsStreamIn0_V_V_0_state == 2'd3)) | ((tsStreamIn0_V_V_0_ack_out == 1'b1) & (tsStreamIn0_V_V_0_state == 2'd1)) | ((tsStreamIn0_V_V_0_vld_in == 1'b1) & (tsStreamIn0_V_V_0_state == 2'd2)))) begin
            tsStreamIn0_V_V_0_state <= 2'd3;
        end else begin
            tsStreamIn0_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn1_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamIn1_V_V_0_vld_out == 1'b1) & (tsStreamIn1_V_V_0_ack_out == 1'b1))) begin
            tsStreamIn1_V_V_0_sel_rd <= ~tsStreamIn1_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn1_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamIn1_V_V_0_ack_in == 1'b1) & (tsStreamIn1_V_V_0_vld_in == 1'b1))) begin
            tsStreamIn1_V_V_0_sel_wr <= ~tsStreamIn1_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn1_V_V_0_state <= 2'd0;
    end else begin
        if ((((tsStreamIn1_V_V_0_vld_in == 1'b0) & (tsStreamIn1_V_V_0_state == 2'd2)) | ((tsStreamIn1_V_V_0_vld_in == 1'b0) & (tsStreamIn1_V_V_0_ack_out == 1'b1) & (tsStreamIn1_V_V_0_state == 2'd3)))) begin
            tsStreamIn1_V_V_0_state <= 2'd2;
        end else if ((((tsStreamIn1_V_V_0_ack_out == 1'b0) & (tsStreamIn1_V_V_0_state == 2'd1)) | ((tsStreamIn1_V_V_0_ack_out == 1'b0) & (tsStreamIn1_V_V_0_vld_in == 1'b1) & (tsStreamIn1_V_V_0_state == 2'd3)))) begin
            tsStreamIn1_V_V_0_state <= 2'd1;
        end else if (((~((tsStreamIn1_V_V_0_vld_in == 1'b0) & (tsStreamIn1_V_V_0_ack_out == 1'b1)) & ~((tsStreamIn1_V_V_0_ack_out == 1'b0) & (tsStreamIn1_V_V_0_vld_in == 1'b1)) & (tsStreamIn1_V_V_0_state == 2'd3)) | ((tsStreamIn1_V_V_0_ack_out == 1'b1) & (tsStreamIn1_V_V_0_state == 2'd1)) | ((tsStreamIn1_V_V_0_vld_in == 1'b1) & (tsStreamIn1_V_V_0_state == 2'd2)))) begin
            tsStreamIn1_V_V_0_state <= 2'd3;
        end else begin
            tsStreamIn1_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_vld_out == 1'b1))) begin
            tsStreamOut_V_V_1_sel_rd <= ~tsStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_vld_in == 1'b1) & (tsStreamOut_V_V_1_ack_in == 1'b1))) begin
            tsStreamOut_V_V_1_sel_wr <= ~tsStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_state == 2'd2)) | ((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_state == 2'd3)))) begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end else if ((((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_state == 2'd1)) | ((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_vld_in == 1'b1) & (tsStreamOut_V_V_1_state == 2'd3)))) begin
            tsStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_ack_out == 1'b1)) & ~((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_vld_in == 1'b1)) & (tsStreamOut_V_V_1_state == 2'd3)) | ((tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_state == 2'd1)) | ((tsStreamOut_V_V_1_vld_in == 1'b1) & (tsStreamOut_V_V_1_state == 2'd2)))) begin
            tsStreamOut_V_V_1_state <= 2'd3;
        end else begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn0_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((xStreamIn0_V_V_0_vld_out == 1'b1) & (xStreamIn0_V_V_0_ack_out == 1'b1))) begin
            xStreamIn0_V_V_0_sel_rd <= ~xStreamIn0_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn0_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((xStreamIn0_V_V_0_ack_in == 1'b1) & (xStreamIn0_V_V_0_vld_in == 1'b1))) begin
            xStreamIn0_V_V_0_sel_wr <= ~xStreamIn0_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn0_V_V_0_state <= 2'd0;
    end else begin
        if ((((xStreamIn0_V_V_0_vld_in == 1'b0) & (xStreamIn0_V_V_0_state == 2'd2)) | ((xStreamIn0_V_V_0_vld_in == 1'b0) & (xStreamIn0_V_V_0_ack_out == 1'b1) & (xStreamIn0_V_V_0_state == 2'd3)))) begin
            xStreamIn0_V_V_0_state <= 2'd2;
        end else if ((((xStreamIn0_V_V_0_ack_out == 1'b0) & (xStreamIn0_V_V_0_state == 2'd1)) | ((xStreamIn0_V_V_0_ack_out == 1'b0) & (xStreamIn0_V_V_0_vld_in == 1'b1) & (xStreamIn0_V_V_0_state == 2'd3)))) begin
            xStreamIn0_V_V_0_state <= 2'd1;
        end else if (((~((xStreamIn0_V_V_0_vld_in == 1'b0) & (xStreamIn0_V_V_0_ack_out == 1'b1)) & ~((xStreamIn0_V_V_0_ack_out == 1'b0) & (xStreamIn0_V_V_0_vld_in == 1'b1)) & (xStreamIn0_V_V_0_state == 2'd3)) | ((xStreamIn0_V_V_0_ack_out == 1'b1) & (xStreamIn0_V_V_0_state == 2'd1)) | ((xStreamIn0_V_V_0_vld_in == 1'b1) & (xStreamIn0_V_V_0_state == 2'd2)))) begin
            xStreamIn0_V_V_0_state <= 2'd3;
        end else begin
            xStreamIn0_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn1_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((xStreamIn1_V_V_0_vld_out == 1'b1) & (xStreamIn1_V_V_0_ack_out == 1'b1))) begin
            xStreamIn1_V_V_0_sel_rd <= ~xStreamIn1_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn1_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((xStreamIn1_V_V_0_ack_in == 1'b1) & (xStreamIn1_V_V_0_vld_in == 1'b1))) begin
            xStreamIn1_V_V_0_sel_wr <= ~xStreamIn1_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn1_V_V_0_state <= 2'd0;
    end else begin
        if ((((xStreamIn1_V_V_0_vld_in == 1'b0) & (xStreamIn1_V_V_0_state == 2'd2)) | ((xStreamIn1_V_V_0_vld_in == 1'b0) & (xStreamIn1_V_V_0_ack_out == 1'b1) & (xStreamIn1_V_V_0_state == 2'd3)))) begin
            xStreamIn1_V_V_0_state <= 2'd2;
        end else if ((((xStreamIn1_V_V_0_ack_out == 1'b0) & (xStreamIn1_V_V_0_state == 2'd1)) | ((xStreamIn1_V_V_0_ack_out == 1'b0) & (xStreamIn1_V_V_0_vld_in == 1'b1) & (xStreamIn1_V_V_0_state == 2'd3)))) begin
            xStreamIn1_V_V_0_state <= 2'd1;
        end else if (((~((xStreamIn1_V_V_0_vld_in == 1'b0) & (xStreamIn1_V_V_0_ack_out == 1'b1)) & ~((xStreamIn1_V_V_0_ack_out == 1'b0) & (xStreamIn1_V_V_0_vld_in == 1'b1)) & (xStreamIn1_V_V_0_state == 2'd3)) | ((xStreamIn1_V_V_0_ack_out == 1'b1) & (xStreamIn1_V_V_0_state == 2'd1)) | ((xStreamIn1_V_V_0_vld_in == 1'b1) & (xStreamIn1_V_V_0_state == 2'd2)))) begin
            xStreamIn1_V_V_0_state <= 2'd3;
        end else begin
            xStreamIn1_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_vld_out == 1'b1))) begin
            xStreamOut_V_V_1_sel_rd <= ~xStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_in == 1'b1) & (xStreamOut_V_V_1_vld_in == 1'b1))) begin
            xStreamOut_V_V_1_sel_wr <= ~xStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_state == 2'd2)) | ((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_state == 2'd3)))) begin
            xStreamOut_V_V_1_state <= 2'd2;
        end else if ((((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_state == 2'd1)) | ((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_vld_in == 1'b1) & (xStreamOut_V_V_1_state == 2'd3)))) begin
            xStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_ack_out == 1'b1)) & ~((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_vld_in == 1'b1)) & (xStreamOut_V_V_1_state == 2'd3)) | ((xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_state == 2'd1)) | ((xStreamOut_V_V_1_vld_in == 1'b1) & (xStreamOut_V_V_1_state == 2'd2)))) begin
            xStreamOut_V_V_1_state <= 2'd3;
        end else begin
            xStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn0_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((yStreamIn0_V_V_0_vld_out == 1'b1) & (yStreamIn0_V_V_0_ack_out == 1'b1))) begin
            yStreamIn0_V_V_0_sel_rd <= ~yStreamIn0_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn0_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((yStreamIn0_V_V_0_ack_in == 1'b1) & (yStreamIn0_V_V_0_vld_in == 1'b1))) begin
            yStreamIn0_V_V_0_sel_wr <= ~yStreamIn0_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn0_V_V_0_state <= 2'd0;
    end else begin
        if ((((yStreamIn0_V_V_0_vld_in == 1'b0) & (yStreamIn0_V_V_0_state == 2'd2)) | ((yStreamIn0_V_V_0_vld_in == 1'b0) & (yStreamIn0_V_V_0_ack_out == 1'b1) & (yStreamIn0_V_V_0_state == 2'd3)))) begin
            yStreamIn0_V_V_0_state <= 2'd2;
        end else if ((((yStreamIn0_V_V_0_ack_out == 1'b0) & (yStreamIn0_V_V_0_state == 2'd1)) | ((yStreamIn0_V_V_0_ack_out == 1'b0) & (yStreamIn0_V_V_0_vld_in == 1'b1) & (yStreamIn0_V_V_0_state == 2'd3)))) begin
            yStreamIn0_V_V_0_state <= 2'd1;
        end else if (((~((yStreamIn0_V_V_0_vld_in == 1'b0) & (yStreamIn0_V_V_0_ack_out == 1'b1)) & ~((yStreamIn0_V_V_0_ack_out == 1'b0) & (yStreamIn0_V_V_0_vld_in == 1'b1)) & (yStreamIn0_V_V_0_state == 2'd3)) | ((yStreamIn0_V_V_0_ack_out == 1'b1) & (yStreamIn0_V_V_0_state == 2'd1)) | ((yStreamIn0_V_V_0_vld_in == 1'b1) & (yStreamIn0_V_V_0_state == 2'd2)))) begin
            yStreamIn0_V_V_0_state <= 2'd3;
        end else begin
            yStreamIn0_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn1_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((yStreamIn1_V_V_0_vld_out == 1'b1) & (yStreamIn1_V_V_0_ack_out == 1'b1))) begin
            yStreamIn1_V_V_0_sel_rd <= ~yStreamIn1_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn1_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((yStreamIn1_V_V_0_ack_in == 1'b1) & (yStreamIn1_V_V_0_vld_in == 1'b1))) begin
            yStreamIn1_V_V_0_sel_wr <= ~yStreamIn1_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn1_V_V_0_state <= 2'd0;
    end else begin
        if ((((yStreamIn1_V_V_0_vld_in == 1'b0) & (yStreamIn1_V_V_0_state == 2'd2)) | ((yStreamIn1_V_V_0_vld_in == 1'b0) & (yStreamIn1_V_V_0_ack_out == 1'b1) & (yStreamIn1_V_V_0_state == 2'd3)))) begin
            yStreamIn1_V_V_0_state <= 2'd2;
        end else if ((((yStreamIn1_V_V_0_ack_out == 1'b0) & (yStreamIn1_V_V_0_state == 2'd1)) | ((yStreamIn1_V_V_0_ack_out == 1'b0) & (yStreamIn1_V_V_0_vld_in == 1'b1) & (yStreamIn1_V_V_0_state == 2'd3)))) begin
            yStreamIn1_V_V_0_state <= 2'd1;
        end else if (((~((yStreamIn1_V_V_0_vld_in == 1'b0) & (yStreamIn1_V_V_0_ack_out == 1'b1)) & ~((yStreamIn1_V_V_0_ack_out == 1'b0) & (yStreamIn1_V_V_0_vld_in == 1'b1)) & (yStreamIn1_V_V_0_state == 2'd3)) | ((yStreamIn1_V_V_0_ack_out == 1'b1) & (yStreamIn1_V_V_0_state == 2'd1)) | ((yStreamIn1_V_V_0_vld_in == 1'b1) & (yStreamIn1_V_V_0_state == 2'd2)))) begin
            yStreamIn1_V_V_0_state <= 2'd3;
        end else begin
            yStreamIn1_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_vld_out == 1'b1))) begin
            yStreamOut_V_V_1_sel_rd <= ~yStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_in == 1'b1) & (yStreamOut_V_V_1_vld_in == 1'b1))) begin
            yStreamOut_V_V_1_sel_wr <= ~yStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_state == 2'd2)) | ((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_state == 2'd3)))) begin
            yStreamOut_V_V_1_state <= 2'd2;
        end else if ((((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_state == 2'd1)) | ((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_vld_in == 1'b1) & (yStreamOut_V_V_1_state == 2'd3)))) begin
            yStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_ack_out == 1'b1)) & ~((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_vld_in == 1'b1)) & (yStreamOut_V_V_1_state == 2'd3)) | ((yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_state == 2'd1)) | ((yStreamOut_V_V_1_vld_in == 1'b1) & (yStreamOut_V_V_1_state == 2'd2)))) begin
            yStreamOut_V_V_1_state <= 2'd3;
        end else begin
            yStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((cornerStreamIn0_V_V_0_load_A == 1'b1)) begin
        cornerStreamIn0_V_V_0_payload_A <= cornerStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((cornerStreamIn0_V_V_0_load_B == 1'b1)) begin
        cornerStreamIn0_V_V_0_payload_B <= cornerStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((cornerStreamIn1_V_V_0_load_A == 1'b1)) begin
        cornerStreamIn1_V_V_0_payload_A <= cornerStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((cornerStreamIn1_V_V_0_load_B == 1'b1)) begin
        cornerStreamIn1_V_V_0_payload_B <= cornerStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((cornerStreamOut_V_V_1_load_A == 1'b1)) begin
        cornerStreamOut_V_V_1_payload_A <= tmp_V_4_cast_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((cornerStreamOut_V_V_1_load_B == 1'b1)) begin
        cornerStreamOut_V_V_1_payload_B <= tmp_V_4_cast_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn0_V_V_0_load_A == 1'b1)) begin
        polStreamIn0_V_V_0_payload_A <= polStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn0_V_V_0_load_B == 1'b1)) begin
        polStreamIn0_V_V_0_payload_B <= polStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn1_V_V_0_load_A == 1'b1)) begin
        polStreamIn1_V_V_0_payload_A <= polStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn1_V_V_0_load_B == 1'b1)) begin
        polStreamIn1_V_V_0_payload_B <= polStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_A == 1'b1)) begin
        polStreamOut_V_V_1_payload_A <= tmp_V_3_cast_fu_273_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_B == 1'b1)) begin
        polStreamOut_V_V_1_payload_B <= tmp_V_3_cast_fu_273_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_245_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_292 <= config_V[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_245_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_287 <= config_V[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_283 <= tmp_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn0_V_V_0_load_A == 1'b1)) begin
        tsStreamIn0_V_V_0_payload_A <= tsStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn0_V_V_0_load_B == 1'b1)) begin
        tsStreamIn0_V_V_0_payload_B <= tsStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn1_V_V_0_load_A == 1'b1)) begin
        tsStreamIn1_V_V_0_payload_A <= tsStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn1_V_V_0_load_B == 1'b1)) begin
        tsStreamIn1_V_V_0_payload_B <= tsStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_A == 1'b1)) begin
        tsStreamOut_V_V_1_payload_A <= ap_phi_mux_tmp_V_2_phi_fu_190_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_B == 1'b1)) begin
        tsStreamOut_V_V_1_payload_B <= ap_phi_mux_tmp_V_2_phi_fu_190_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn0_V_V_0_load_A == 1'b1)) begin
        xStreamIn0_V_V_0_payload_A <= xStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn0_V_V_0_load_B == 1'b1)) begin
        xStreamIn0_V_V_0_payload_B <= xStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn1_V_V_0_load_A == 1'b1)) begin
        xStreamIn1_V_V_0_payload_A <= xStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn1_V_V_0_load_B == 1'b1)) begin
        xStreamIn1_V_V_0_payload_B <= xStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_A == 1'b1)) begin
        xStreamOut_V_V_1_payload_A <= ap_phi_mux_tmp_V_phi_fu_227_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_B == 1'b1)) begin
        xStreamOut_V_V_1_payload_B <= ap_phi_mux_tmp_V_phi_fu_227_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn0_V_V_0_load_A == 1'b1)) begin
        yStreamIn0_V_V_0_payload_A <= yStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn0_V_V_0_load_B == 1'b1)) begin
        yStreamIn0_V_V_0_payload_B <= yStreamIn0_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn1_V_V_0_load_A == 1'b1)) begin
        yStreamIn1_V_V_0_payload_A <= yStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn1_V_V_0_load_B == 1'b1)) begin
        yStreamIn1_V_V_0_payload_B <= yStreamIn1_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_A == 1'b1)) begin
        yStreamOut_V_V_1_payload_A <= ap_phi_mux_tmp_V_1_phi_fu_213_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_B == 1'b1)) begin
        yStreamOut_V_V_1_payload_B <= ap_phi_mux_tmp_V_1_phi_fu_213_p4;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_996)) begin
        if ((tmp_reg_283 == 1'd1)) begin
            ap_phi_mux_tmp_V_1_phi_fu_213_p4 = yStreamIn1_V_V_0_data_out;
        end else if ((tmp_reg_283 == 1'd0)) begin
            ap_phi_mux_tmp_V_1_phi_fu_213_p4 = yStreamIn0_V_V_0_data_out;
        end else begin
            ap_phi_mux_tmp_V_1_phi_fu_213_p4 = ap_phi_reg_pp0_iter1_tmp_V_1_reg_209;
        end
    end else begin
        ap_phi_mux_tmp_V_1_phi_fu_213_p4 = ap_phi_reg_pp0_iter1_tmp_V_1_reg_209;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_996)) begin
        if ((tmp_reg_283 == 1'd1)) begin
            ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 = polStreamIn1_V_V_0_data_out;
        end else if ((tmp_reg_283 == 1'd0)) begin
            ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 = polStreamIn0_V_V_0_data_out;
        end else begin
            ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 = ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175;
        end
    end else begin
        ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 = ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_996)) begin
        if ((tmp_reg_283 == 1'd1)) begin
            ap_phi_mux_tmp_V_2_phi_fu_190_p4 = tsStreamIn1_V_V_0_data_out;
        end else if ((tmp_reg_283 == 1'd0)) begin
            ap_phi_mux_tmp_V_2_phi_fu_190_p4 = tsStreamIn0_V_V_0_data_out;
        end else begin
            ap_phi_mux_tmp_V_2_phi_fu_190_p4 = ap_phi_reg_pp0_iter1_tmp_V_2_reg_186;
        end
    end else begin
        ap_phi_mux_tmp_V_2_phi_fu_190_p4 = ap_phi_reg_pp0_iter1_tmp_V_2_reg_186;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_996)) begin
        if ((tmp_reg_283 == 1'd1)) begin
            ap_phi_mux_tmp_V_4_phi_fu_203_p4 = corner_V_1_fu_263_p2;
        end else if ((tmp_reg_283 == 1'd0)) begin
            ap_phi_mux_tmp_V_4_phi_fu_203_p4 = corner_V_fu_253_p2;
        end else begin
            ap_phi_mux_tmp_V_4_phi_fu_203_p4 = ap_phi_reg_pp0_iter1_tmp_V_4_reg_200;
        end
    end else begin
        ap_phi_mux_tmp_V_4_phi_fu_203_p4 = ap_phi_reg_pp0_iter1_tmp_V_4_reg_200;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_996)) begin
        if ((tmp_reg_283 == 1'd1)) begin
            ap_phi_mux_tmp_V_phi_fu_227_p4 = xStreamIn1_V_V_0_data_out;
        end else if ((tmp_reg_283 == 1'd0)) begin
            ap_phi_mux_tmp_V_phi_fu_227_p4 = xStreamIn0_V_V_0_data_out;
        end else begin
            ap_phi_mux_tmp_V_phi_fu_227_p4 = ap_phi_reg_pp0_iter1_tmp_V_reg_223;
        end
    end else begin
        ap_phi_mux_tmp_V_phi_fu_227_p4 = ap_phi_reg_pp0_iter1_tmp_V_reg_223;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cornerStreamIn0_V_V_0_ack_out = 1'b1;
    end else begin
        cornerStreamIn0_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((cornerStreamIn0_V_V_0_sel == 1'b1)) begin
        cornerStreamIn0_V_V_0_data_out = cornerStreamIn0_V_V_0_payload_B;
    end else begin
        cornerStreamIn0_V_V_0_data_out = cornerStreamIn0_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cornerStreamIn0_V_V_TDATA_blk_n = cornerStreamIn0_V_V_0_state[1'd0];
    end else begin
        cornerStreamIn0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cornerStreamIn1_V_V_0_ack_out = 1'b1;
    end else begin
        cornerStreamIn1_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((cornerStreamIn1_V_V_0_sel == 1'b1)) begin
        cornerStreamIn1_V_V_0_data_out = cornerStreamIn1_V_V_0_payload_B;
    end else begin
        cornerStreamIn1_V_V_0_data_out = cornerStreamIn1_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cornerStreamIn1_V_V_TDATA_blk_n = cornerStreamIn1_V_V_0_state[1'd0];
    end else begin
        cornerStreamIn1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((cornerStreamOut_V_V_1_sel == 1'b1)) begin
        cornerStreamOut_V_V_1_data_out = cornerStreamOut_V_V_1_payload_B;
    end else begin
        cornerStreamOut_V_V_1_data_out = cornerStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cornerStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        cornerStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        cornerStreamOut_V_V_TDATA_blk_n = cornerStreamOut_V_V_1_state[1'd1];
    end else begin
        cornerStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        polStreamIn0_V_V_0_ack_out = 1'b1;
    end else begin
        polStreamIn0_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamIn0_V_V_0_sel == 1'b1)) begin
        polStreamIn0_V_V_0_data_out = polStreamIn0_V_V_0_payload_B;
    end else begin
        polStreamIn0_V_V_0_data_out = polStreamIn0_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polStreamIn0_V_V_TDATA_blk_n = polStreamIn0_V_V_0_state[1'd0];
    end else begin
        polStreamIn0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        polStreamIn1_V_V_0_ack_out = 1'b1;
    end else begin
        polStreamIn1_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamIn1_V_V_0_sel == 1'b1)) begin
        polStreamIn1_V_V_0_data_out = polStreamIn1_V_V_0_payload_B;
    end else begin
        polStreamIn1_V_V_0_data_out = polStreamIn1_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polStreamIn1_V_V_TDATA_blk_n = polStreamIn1_V_V_0_state[1'd0];
    end else begin
        polStreamIn1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((polStreamOut_V_V_1_sel == 1'b1)) begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_B;
    end else begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        polStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        polStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        polStreamOut_V_V_TDATA_blk_n = polStreamOut_V_V_1_state[1'd1];
    end else begin
        polStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsStreamIn0_V_V_0_ack_out = 1'b1;
    end else begin
        tsStreamIn0_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamIn0_V_V_0_sel == 1'b1)) begin
        tsStreamIn0_V_V_0_data_out = tsStreamIn0_V_V_0_payload_B;
    end else begin
        tsStreamIn0_V_V_0_data_out = tsStreamIn0_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsStreamIn0_V_V_TDATA_blk_n = tsStreamIn0_V_V_0_state[1'd0];
    end else begin
        tsStreamIn0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsStreamIn1_V_V_0_ack_out = 1'b1;
    end else begin
        tsStreamIn1_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamIn1_V_V_0_sel == 1'b1)) begin
        tsStreamIn1_V_V_0_data_out = tsStreamIn1_V_V_0_payload_B;
    end else begin
        tsStreamIn1_V_V_0_data_out = tsStreamIn1_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsStreamIn1_V_V_TDATA_blk_n = tsStreamIn1_V_V_0_state[1'd0];
    end else begin
        tsStreamIn1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tsStreamOut_V_V_1_sel == 1'b1)) begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_B;
    end else begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        tsStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        tsStreamOut_V_V_TDATA_blk_n = tsStreamOut_V_V_1_state[1'd1];
    end else begin
        tsStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xStreamIn0_V_V_0_ack_out = 1'b1;
    end else begin
        xStreamIn0_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamIn0_V_V_0_sel == 1'b1)) begin
        xStreamIn0_V_V_0_data_out = xStreamIn0_V_V_0_payload_B;
    end else begin
        xStreamIn0_V_V_0_data_out = xStreamIn0_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xStreamIn0_V_V_TDATA_blk_n = xStreamIn0_V_V_0_state[1'd0];
    end else begin
        xStreamIn0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xStreamIn1_V_V_0_ack_out = 1'b1;
    end else begin
        xStreamIn1_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamIn1_V_V_0_sel == 1'b1)) begin
        xStreamIn1_V_V_0_data_out = xStreamIn1_V_V_0_payload_B;
    end else begin
        xStreamIn1_V_V_0_data_out = xStreamIn1_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xStreamIn1_V_V_TDATA_blk_n = xStreamIn1_V_V_0_state[1'd0];
    end else begin
        xStreamIn1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((xStreamOut_V_V_1_sel == 1'b1)) begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_B;
    end else begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        xStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        xStreamOut_V_V_TDATA_blk_n = xStreamOut_V_V_1_state[1'd1];
    end else begin
        xStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yStreamIn0_V_V_0_ack_out = 1'b1;
    end else begin
        yStreamIn0_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamIn0_V_V_0_sel == 1'b1)) begin
        yStreamIn0_V_V_0_data_out = yStreamIn0_V_V_0_payload_B;
    end else begin
        yStreamIn0_V_V_0_data_out = yStreamIn0_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        yStreamIn0_V_V_TDATA_blk_n = yStreamIn0_V_V_0_state[1'd0];
    end else begin
        yStreamIn0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yStreamIn1_V_V_0_ack_out = 1'b1;
    end else begin
        yStreamIn1_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamIn1_V_V_0_sel == 1'b1)) begin
        yStreamIn1_V_V_0_data_out = yStreamIn1_V_V_0_payload_B;
    end else begin
        yStreamIn1_V_V_0_data_out = yStreamIn1_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        yStreamIn1_V_V_TDATA_blk_n = yStreamIn1_V_V_0_state[1'd0];
    end else begin
        yStreamIn1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((yStreamOut_V_V_1_sel == 1'b1)) begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_B;
    end else begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        yStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        yStreamOut_V_V_TDATA_blk_n = yStreamOut_V_V_1_state[1'd1];
    end else begin
        yStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_reg_283 == 1'd1) & (cornerStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (tsStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (polStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (yStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (xStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (cornerStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (tsStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (polStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (yStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (xStreamIn0_V_V_0_vld_out == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (cornerStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (cornerStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tmp_reg_283 == 1'd1) & (cornerStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (tsStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (polStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (yStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (xStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (cornerStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (tsStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (polStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (yStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (xStreamIn0_V_V_0_vld_out == 1'b0)))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (cornerStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tmp_reg_283 == 1'd1) & (cornerStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (tsStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (polStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (yStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (xStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (cornerStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (tsStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (polStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (yStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (xStreamIn0_V_V_0_vld_out == 1'b0)))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (cornerStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((tmp_reg_283 == 1'd1) & (cornerStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (tsStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (polStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (yStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd1) & (xStreamIn1_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (cornerStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (tsStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (polStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (yStreamIn0_V_V_0_vld_out == 1'b0)) | ((tmp_reg_283 == 1'd0) & (xStreamIn0_V_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (cornerStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (cornerStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_996 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter1_tmp_V_1_reg_209 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_V_2_reg_186 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_V_4_reg_200 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_V_reg_223 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cornerStreamIn0_V_V_0_ack_in = cornerStreamIn0_V_V_0_state[1'd1];

assign cornerStreamIn0_V_V_0_load_A = (~cornerStreamIn0_V_V_0_sel_wr & cornerStreamIn0_V_V_0_state_cmp_full);

assign cornerStreamIn0_V_V_0_load_B = (cornerStreamIn0_V_V_0_state_cmp_full & cornerStreamIn0_V_V_0_sel_wr);

assign cornerStreamIn0_V_V_0_sel = cornerStreamIn0_V_V_0_sel_rd;

assign cornerStreamIn0_V_V_0_state_cmp_full = ((cornerStreamIn0_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign cornerStreamIn0_V_V_0_vld_in = cornerStreamIn0_V_V_TVALID;

assign cornerStreamIn0_V_V_0_vld_out = cornerStreamIn0_V_V_0_state[1'd0];

assign cornerStreamIn0_V_V_TREADY = cornerStreamIn0_V_V_0_state[1'd1];

assign cornerStreamIn1_V_V_0_ack_in = cornerStreamIn1_V_V_0_state[1'd1];

assign cornerStreamIn1_V_V_0_load_A = (~cornerStreamIn1_V_V_0_sel_wr & cornerStreamIn1_V_V_0_state_cmp_full);

assign cornerStreamIn1_V_V_0_load_B = (cornerStreamIn1_V_V_0_state_cmp_full & cornerStreamIn1_V_V_0_sel_wr);

assign cornerStreamIn1_V_V_0_sel = cornerStreamIn1_V_V_0_sel_rd;

assign cornerStreamIn1_V_V_0_state_cmp_full = ((cornerStreamIn1_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign cornerStreamIn1_V_V_0_vld_in = cornerStreamIn1_V_V_TVALID;

assign cornerStreamIn1_V_V_0_vld_out = cornerStreamIn1_V_V_0_state[1'd0];

assign cornerStreamIn1_V_V_TREADY = cornerStreamIn1_V_V_0_state[1'd1];

assign cornerStreamOut_V_V_1_ack_in = cornerStreamOut_V_V_1_state[1'd1];

assign cornerStreamOut_V_V_1_ack_out = cornerStreamOut_V_V_TREADY;

assign cornerStreamOut_V_V_1_load_A = (~cornerStreamOut_V_V_1_sel_wr & cornerStreamOut_V_V_1_state_cmp_full);

assign cornerStreamOut_V_V_1_load_B = (cornerStreamOut_V_V_1_state_cmp_full & cornerStreamOut_V_V_1_sel_wr);

assign cornerStreamOut_V_V_1_sel = cornerStreamOut_V_V_1_sel_rd;

assign cornerStreamOut_V_V_1_state_cmp_full = ((cornerStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign cornerStreamOut_V_V_1_vld_out = cornerStreamOut_V_V_1_state[1'd0];

assign cornerStreamOut_V_V_TDATA = cornerStreamOut_V_V_1_data_out;

assign cornerStreamOut_V_V_TVALID = cornerStreamOut_V_V_1_state[1'd0];

assign corner_V_1_fu_263_p2 = (tmp_V_12_fu_259_p1 | tmp_2_reg_292);

assign corner_V_fu_253_p2 = (tmp_V_8_fu_249_p1 | tmp_4_reg_287);

assign pol0_V_fu_269_p1 = ap_phi_mux_tmp_V_25_in_phi_fu_178_p4[0:0];

assign polStreamIn0_V_V_0_ack_in = polStreamIn0_V_V_0_state[1'd1];

assign polStreamIn0_V_V_0_load_A = (polStreamIn0_V_V_0_state_cmp_full & ~polStreamIn0_V_V_0_sel_wr);

assign polStreamIn0_V_V_0_load_B = (polStreamIn0_V_V_0_state_cmp_full & polStreamIn0_V_V_0_sel_wr);

assign polStreamIn0_V_V_0_sel = polStreamIn0_V_V_0_sel_rd;

assign polStreamIn0_V_V_0_state_cmp_full = ((polStreamIn0_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamIn0_V_V_0_vld_in = polStreamIn0_V_V_TVALID;

assign polStreamIn0_V_V_0_vld_out = polStreamIn0_V_V_0_state[1'd0];

assign polStreamIn0_V_V_TREADY = polStreamIn0_V_V_0_state[1'd1];

assign polStreamIn1_V_V_0_ack_in = polStreamIn1_V_V_0_state[1'd1];

assign polStreamIn1_V_V_0_load_A = (polStreamIn1_V_V_0_state_cmp_full & ~polStreamIn1_V_V_0_sel_wr);

assign polStreamIn1_V_V_0_load_B = (polStreamIn1_V_V_0_state_cmp_full & polStreamIn1_V_V_0_sel_wr);

assign polStreamIn1_V_V_0_sel = polStreamIn1_V_V_0_sel_rd;

assign polStreamIn1_V_V_0_state_cmp_full = ((polStreamIn1_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamIn1_V_V_0_vld_in = polStreamIn1_V_V_TVALID;

assign polStreamIn1_V_V_0_vld_out = polStreamIn1_V_V_0_state[1'd0];

assign polStreamIn1_V_V_TREADY = polStreamIn1_V_V_0_state[1'd1];

assign polStreamOut_V_V_1_ack_in = polStreamOut_V_V_1_state[1'd1];

assign polStreamOut_V_V_1_ack_out = polStreamOut_V_V_TREADY;

assign polStreamOut_V_V_1_load_A = (polStreamOut_V_V_1_state_cmp_full & ~polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_load_B = (polStreamOut_V_V_1_state_cmp_full & polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_sel = polStreamOut_V_V_1_sel_rd;

assign polStreamOut_V_V_1_state_cmp_full = ((polStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamOut_V_V_1_vld_out = polStreamOut_V_V_1_state[1'd0];

assign polStreamOut_V_V_TDATA = polStreamOut_V_V_1_data_out;

assign polStreamOut_V_V_TVALID = polStreamOut_V_V_1_state[1'd0];

assign tmp_V_12_fu_259_p1 = cornerStreamIn1_V_V_0_data_out[0:0];

assign tmp_V_3_cast_fu_273_p1 = pol0_V_fu_269_p1;

assign tmp_V_4_cast_fu_278_p1 = ap_phi_mux_tmp_V_4_phi_fu_203_p4;

assign tmp_V_8_fu_249_p1 = cornerStreamIn0_V_V_0_data_out[0:0];

assign tmp_fu_245_p1 = config_V[0:0];

assign tsStreamIn0_V_V_0_ack_in = tsStreamIn0_V_V_0_state[1'd1];

assign tsStreamIn0_V_V_0_load_A = (tsStreamIn0_V_V_0_state_cmp_full & ~tsStreamIn0_V_V_0_sel_wr);

assign tsStreamIn0_V_V_0_load_B = (tsStreamIn0_V_V_0_state_cmp_full & tsStreamIn0_V_V_0_sel_wr);

assign tsStreamIn0_V_V_0_sel = tsStreamIn0_V_V_0_sel_rd;

assign tsStreamIn0_V_V_0_state_cmp_full = ((tsStreamIn0_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamIn0_V_V_0_vld_in = tsStreamIn0_V_V_TVALID;

assign tsStreamIn0_V_V_0_vld_out = tsStreamIn0_V_V_0_state[1'd0];

assign tsStreamIn0_V_V_TREADY = tsStreamIn0_V_V_0_state[1'd1];

assign tsStreamIn1_V_V_0_ack_in = tsStreamIn1_V_V_0_state[1'd1];

assign tsStreamIn1_V_V_0_load_A = (tsStreamIn1_V_V_0_state_cmp_full & ~tsStreamIn1_V_V_0_sel_wr);

assign tsStreamIn1_V_V_0_load_B = (tsStreamIn1_V_V_0_state_cmp_full & tsStreamIn1_V_V_0_sel_wr);

assign tsStreamIn1_V_V_0_sel = tsStreamIn1_V_V_0_sel_rd;

assign tsStreamIn1_V_V_0_state_cmp_full = ((tsStreamIn1_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamIn1_V_V_0_vld_in = tsStreamIn1_V_V_TVALID;

assign tsStreamIn1_V_V_0_vld_out = tsStreamIn1_V_V_0_state[1'd0];

assign tsStreamIn1_V_V_TREADY = tsStreamIn1_V_V_0_state[1'd1];

assign tsStreamOut_V_V_1_ack_in = tsStreamOut_V_V_1_state[1'd1];

assign tsStreamOut_V_V_1_ack_out = tsStreamOut_V_V_TREADY;

assign tsStreamOut_V_V_1_load_A = (tsStreamOut_V_V_1_state_cmp_full & ~tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_load_B = (tsStreamOut_V_V_1_state_cmp_full & tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_sel = tsStreamOut_V_V_1_sel_rd;

assign tsStreamOut_V_V_1_state_cmp_full = ((tsStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamOut_V_V_1_vld_out = tsStreamOut_V_V_1_state[1'd0];

assign tsStreamOut_V_V_TDATA = tsStreamOut_V_V_1_data_out;

assign tsStreamOut_V_V_TVALID = tsStreamOut_V_V_1_state[1'd0];

assign xStreamIn0_V_V_0_ack_in = xStreamIn0_V_V_0_state[1'd1];

assign xStreamIn0_V_V_0_load_A = (xStreamIn0_V_V_0_state_cmp_full & ~xStreamIn0_V_V_0_sel_wr);

assign xStreamIn0_V_V_0_load_B = (xStreamIn0_V_V_0_state_cmp_full & xStreamIn0_V_V_0_sel_wr);

assign xStreamIn0_V_V_0_sel = xStreamIn0_V_V_0_sel_rd;

assign xStreamIn0_V_V_0_state_cmp_full = ((xStreamIn0_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamIn0_V_V_0_vld_in = xStreamIn0_V_V_TVALID;

assign xStreamIn0_V_V_0_vld_out = xStreamIn0_V_V_0_state[1'd0];

assign xStreamIn0_V_V_TREADY = xStreamIn0_V_V_0_state[1'd1];

assign xStreamIn1_V_V_0_ack_in = xStreamIn1_V_V_0_state[1'd1];

assign xStreamIn1_V_V_0_load_A = (xStreamIn1_V_V_0_state_cmp_full & ~xStreamIn1_V_V_0_sel_wr);

assign xStreamIn1_V_V_0_load_B = (xStreamIn1_V_V_0_state_cmp_full & xStreamIn1_V_V_0_sel_wr);

assign xStreamIn1_V_V_0_sel = xStreamIn1_V_V_0_sel_rd;

assign xStreamIn1_V_V_0_state_cmp_full = ((xStreamIn1_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamIn1_V_V_0_vld_in = xStreamIn1_V_V_TVALID;

assign xStreamIn1_V_V_0_vld_out = xStreamIn1_V_V_0_state[1'd0];

assign xStreamIn1_V_V_TREADY = xStreamIn1_V_V_0_state[1'd1];

assign xStreamOut_V_V_1_ack_in = xStreamOut_V_V_1_state[1'd1];

assign xStreamOut_V_V_1_ack_out = xStreamOut_V_V_TREADY;

assign xStreamOut_V_V_1_load_A = (xStreamOut_V_V_1_state_cmp_full & ~xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_load_B = (xStreamOut_V_V_1_state_cmp_full & xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_sel = xStreamOut_V_V_1_sel_rd;

assign xStreamOut_V_V_1_state_cmp_full = ((xStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamOut_V_V_1_vld_out = xStreamOut_V_V_1_state[1'd0];

assign xStreamOut_V_V_TDATA = xStreamOut_V_V_1_data_out;

assign xStreamOut_V_V_TVALID = xStreamOut_V_V_1_state[1'd0];

assign yStreamIn0_V_V_0_ack_in = yStreamIn0_V_V_0_state[1'd1];

assign yStreamIn0_V_V_0_load_A = (yStreamIn0_V_V_0_state_cmp_full & ~yStreamIn0_V_V_0_sel_wr);

assign yStreamIn0_V_V_0_load_B = (yStreamIn0_V_V_0_state_cmp_full & yStreamIn0_V_V_0_sel_wr);

assign yStreamIn0_V_V_0_sel = yStreamIn0_V_V_0_sel_rd;

assign yStreamIn0_V_V_0_state_cmp_full = ((yStreamIn0_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamIn0_V_V_0_vld_in = yStreamIn0_V_V_TVALID;

assign yStreamIn0_V_V_0_vld_out = yStreamIn0_V_V_0_state[1'd0];

assign yStreamIn0_V_V_TREADY = yStreamIn0_V_V_0_state[1'd1];

assign yStreamIn1_V_V_0_ack_in = yStreamIn1_V_V_0_state[1'd1];

assign yStreamIn1_V_V_0_load_A = (yStreamIn1_V_V_0_state_cmp_full & ~yStreamIn1_V_V_0_sel_wr);

assign yStreamIn1_V_V_0_load_B = (yStreamIn1_V_V_0_state_cmp_full & yStreamIn1_V_V_0_sel_wr);

assign yStreamIn1_V_V_0_sel = yStreamIn1_V_V_0_sel_rd;

assign yStreamIn1_V_V_0_state_cmp_full = ((yStreamIn1_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamIn1_V_V_0_vld_in = yStreamIn1_V_V_TVALID;

assign yStreamIn1_V_V_0_vld_out = yStreamIn1_V_V_0_state[1'd0];

assign yStreamIn1_V_V_TREADY = yStreamIn1_V_V_0_state[1'd1];

assign yStreamOut_V_V_1_ack_in = yStreamOut_V_V_1_state[1'd1];

assign yStreamOut_V_V_1_ack_out = yStreamOut_V_V_TREADY;

assign yStreamOut_V_V_1_load_A = (yStreamOut_V_V_1_state_cmp_full & ~yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_load_B = (yStreamOut_V_V_1_state_cmp_full & yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_sel = yStreamOut_V_V_1_sel_rd;

assign yStreamOut_V_V_1_state_cmp_full = ((yStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamOut_V_V_1_vld_out = yStreamOut_V_V_1_state[1'd0];

assign yStreamOut_V_V_TDATA = yStreamOut_V_V_1_data_out;

assign yStreamOut_V_V_TVALID = yStreamOut_V_V_1_state[1'd0];

endmodule //eventStreamSwitch
