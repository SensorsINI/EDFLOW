// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eventStreamDuplicate,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.959000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=857,HLS_SYN_LUT=858}" *)

module eventStreamDuplicate (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xStreamOut0_V_V_TREADY,
        yStreamOut0_V_V_TREADY,
        polStreamOut0_V_V_TREADY,
        tsStreamOut0_V_V_TREADY,
        custDataStreamOut0_V_V_TREADY,
        xStreamOut1_V_V_TREADY,
        yStreamOut1_V_V_TREADY,
        polStreamOut1_V_V_TREADY,
        tsStreamOut1_V_V_TREADY,
        custDataStreamOut1_V_V_TREADY,
        xStreamIn_V_V_TDATA,
        xStreamIn_V_V_TVALID,
        xStreamIn_V_V_TREADY,
        yStreamIn_V_V_TDATA,
        yStreamIn_V_V_TVALID,
        yStreamIn_V_V_TREADY,
        tsStreamIn_V_V_TDATA,
        tsStreamIn_V_V_TVALID,
        tsStreamIn_V_V_TREADY,
        polStreamIn_V_V_TDATA,
        polStreamIn_V_V_TVALID,
        polStreamIn_V_V_TREADY,
        custDataStreamIn_V_V_TDATA,
        custDataStreamIn_V_V_TVALID,
        custDataStreamIn_V_V_TREADY,
        xStreamOut0_V_V_TDATA,
        xStreamOut0_V_V_TVALID,
        yStreamOut0_V_V_TDATA,
        yStreamOut0_V_V_TVALID,
        tsStreamOut0_V_V_TDATA,
        tsStreamOut0_V_V_TVALID,
        polStreamOut0_V_V_TDATA,
        polStreamOut0_V_V_TVALID,
        custDataStreamOut0_V_V_TDATA,
        custDataStreamOut0_V_V_TVALID,
        xStreamOut1_V_V_TDATA,
        xStreamOut1_V_V_TVALID,
        yStreamOut1_V_V_TDATA,
        yStreamOut1_V_V_TVALID,
        tsStreamOut1_V_V_TDATA,
        tsStreamOut1_V_V_TVALID,
        polStreamOut1_V_V_TDATA,
        polStreamOut1_V_V_TVALID,
        custDataStreamOut1_V_V_TDATA,
        custDataStreamOut1_V_V_TVALID,
        s_axi_config_AWVALID,
        s_axi_config_AWREADY,
        s_axi_config_AWADDR,
        s_axi_config_WVALID,
        s_axi_config_WREADY,
        s_axi_config_WDATA,
        s_axi_config_WSTRB,
        s_axi_config_ARVALID,
        s_axi_config_ARREADY,
        s_axi_config_ARADDR,
        s_axi_config_RVALID,
        s_axi_config_RREADY,
        s_axi_config_RDATA,
        s_axi_config_RRESP,
        s_axi_config_BVALID,
        s_axi_config_BREADY,
        s_axi_config_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONFIG_DATA_WIDTH = 32;
parameter    C_S_AXI_CONFIG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONFIG_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   xStreamOut0_V_V_TREADY;
input   yStreamOut0_V_V_TREADY;
input   polStreamOut0_V_V_TREADY;
input   tsStreamOut0_V_V_TREADY;
input   custDataStreamOut0_V_V_TREADY;
input   xStreamOut1_V_V_TREADY;
input   yStreamOut1_V_V_TREADY;
input   polStreamOut1_V_V_TREADY;
input   tsStreamOut1_V_V_TREADY;
input   custDataStreamOut1_V_V_TREADY;
input  [15:0] xStreamIn_V_V_TDATA;
input   xStreamIn_V_V_TVALID;
output   xStreamIn_V_V_TREADY;
input  [15:0] yStreamIn_V_V_TDATA;
input   yStreamIn_V_V_TVALID;
output   yStreamIn_V_V_TREADY;
input  [63:0] tsStreamIn_V_V_TDATA;
input   tsStreamIn_V_V_TVALID;
output   tsStreamIn_V_V_TREADY;
input  [7:0] polStreamIn_V_V_TDATA;
input   polStreamIn_V_V_TVALID;
output   polStreamIn_V_V_TREADY;
input  [15:0] custDataStreamIn_V_V_TDATA;
input   custDataStreamIn_V_V_TVALID;
output   custDataStreamIn_V_V_TREADY;
output  [15:0] xStreamOut0_V_V_TDATA;
output   xStreamOut0_V_V_TVALID;
output  [15:0] yStreamOut0_V_V_TDATA;
output   yStreamOut0_V_V_TVALID;
output  [63:0] tsStreamOut0_V_V_TDATA;
output   tsStreamOut0_V_V_TVALID;
output  [7:0] polStreamOut0_V_V_TDATA;
output   polStreamOut0_V_V_TVALID;
output  [15:0] custDataStreamOut0_V_V_TDATA;
output   custDataStreamOut0_V_V_TVALID;
output  [15:0] xStreamOut1_V_V_TDATA;
output   xStreamOut1_V_V_TVALID;
output  [15:0] yStreamOut1_V_V_TDATA;
output   yStreamOut1_V_V_TVALID;
output  [63:0] tsStreamOut1_V_V_TDATA;
output   tsStreamOut1_V_V_TVALID;
output  [7:0] polStreamOut1_V_V_TDATA;
output   polStreamOut1_V_V_TVALID;
output  [15:0] custDataStreamOut1_V_V_TDATA;
output   custDataStreamOut1_V_V_TVALID;
input   s_axi_config_AWVALID;
output   s_axi_config_AWREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_AWADDR;
input   s_axi_config_WVALID;
output   s_axi_config_WREADY;
input  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_WDATA;
input  [C_S_AXI_CONFIG_WSTRB_WIDTH - 1:0] s_axi_config_WSTRB;
input   s_axi_config_ARVALID;
output   s_axi_config_ARREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_ARADDR;
output   s_axi_config_RVALID;
input   s_axi_config_RREADY;
output  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_RDATA;
output  [1:0] s_axi_config_RRESP;
output   s_axi_config_BVALID;
input   s_axi_config_BREADY;
output  [1:0] s_axi_config_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    xStreamIn_V_V_0_vld_out;
wire    yStreamIn_V_V_0_vld_out;
wire    polStreamIn_V_V_0_vld_out;
wire    tsStreamIn_V_V_0_vld_out;
wire    custDataStreamIn_V_V_0_vld_out;
reg    ap_block_state2_pp0_stage0_iter1;
wire    xStreamOut0_V_V_1_ack_in;
reg   [0:0] tmp_reg_234;
reg   [0:0] tmp_6_reg_238;
reg   [0:0] tmp_s_reg_242;
reg    ap_predicate_op23_write_state2;
wire    yStreamOut0_V_V_1_ack_in;
wire    polStreamOut0_V_V_1_ack_in;
wire    tsStreamOut0_V_V_1_ack_in;
wire    custDataStreamOut0_V_V_1_ack_in;
wire    xStreamOut1_V_V_1_ack_in;
wire    yStreamOut1_V_V_1_ack_in;
wire    polStreamOut1_V_V_1_ack_in;
wire    tsStreamOut1_V_V_1_ack_in;
wire    custDataStreamOut1_V_V_1_ack_in;
reg    ap_predicate_op34_write_state2;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] tmp_reg_234_pp0_iter1_reg;
reg   [0:0] tmp_6_reg_238_pp0_iter1_reg;
reg   [0:0] tmp_s_reg_242_pp0_iter1_reg;
reg    ap_predicate_op80_write_state3;
reg    ap_predicate_op92_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] config_V;
reg   [15:0] xStreamIn_V_V_0_data_out;
wire    xStreamIn_V_V_0_vld_in;
wire    xStreamIn_V_V_0_ack_in;
reg    xStreamIn_V_V_0_ack_out;
reg   [15:0] xStreamIn_V_V_0_payload_A;
reg   [15:0] xStreamIn_V_V_0_payload_B;
reg    xStreamIn_V_V_0_sel_rd;
reg    xStreamIn_V_V_0_sel_wr;
wire    xStreamIn_V_V_0_sel;
wire    xStreamIn_V_V_0_load_A;
wire    xStreamIn_V_V_0_load_B;
reg   [1:0] xStreamIn_V_V_0_state;
wire    xStreamIn_V_V_0_state_cmp_full;
reg   [15:0] yStreamIn_V_V_0_data_out;
wire    yStreamIn_V_V_0_vld_in;
wire    yStreamIn_V_V_0_ack_in;
reg    yStreamIn_V_V_0_ack_out;
reg   [15:0] yStreamIn_V_V_0_payload_A;
reg   [15:0] yStreamIn_V_V_0_payload_B;
reg    yStreamIn_V_V_0_sel_rd;
reg    yStreamIn_V_V_0_sel_wr;
wire    yStreamIn_V_V_0_sel;
wire    yStreamIn_V_V_0_load_A;
wire    yStreamIn_V_V_0_load_B;
reg   [1:0] yStreamIn_V_V_0_state;
wire    yStreamIn_V_V_0_state_cmp_full;
reg   [63:0] tsStreamIn_V_V_0_data_out;
wire    tsStreamIn_V_V_0_vld_in;
wire    tsStreamIn_V_V_0_ack_in;
reg    tsStreamIn_V_V_0_ack_out;
reg   [63:0] tsStreamIn_V_V_0_payload_A;
reg   [63:0] tsStreamIn_V_V_0_payload_B;
reg    tsStreamIn_V_V_0_sel_rd;
reg    tsStreamIn_V_V_0_sel_wr;
wire    tsStreamIn_V_V_0_sel;
wire    tsStreamIn_V_V_0_load_A;
wire    tsStreamIn_V_V_0_load_B;
reg   [1:0] tsStreamIn_V_V_0_state;
wire    tsStreamIn_V_V_0_state_cmp_full;
reg   [7:0] polStreamIn_V_V_0_data_out;
wire    polStreamIn_V_V_0_vld_in;
wire    polStreamIn_V_V_0_ack_in;
reg    polStreamIn_V_V_0_ack_out;
reg   [7:0] polStreamIn_V_V_0_payload_A;
reg   [7:0] polStreamIn_V_V_0_payload_B;
reg    polStreamIn_V_V_0_sel_rd;
reg    polStreamIn_V_V_0_sel_wr;
wire    polStreamIn_V_V_0_sel;
wire    polStreamIn_V_V_0_load_A;
wire    polStreamIn_V_V_0_load_B;
reg   [1:0] polStreamIn_V_V_0_state;
wire    polStreamIn_V_V_0_state_cmp_full;
reg   [15:0] custDataStreamIn_V_V_0_data_out;
wire    custDataStreamIn_V_V_0_vld_in;
wire    custDataStreamIn_V_V_0_ack_in;
reg    custDataStreamIn_V_V_0_ack_out;
reg   [15:0] custDataStreamIn_V_V_0_payload_A;
reg   [15:0] custDataStreamIn_V_V_0_payload_B;
reg    custDataStreamIn_V_V_0_sel_rd;
reg    custDataStreamIn_V_V_0_sel_wr;
wire    custDataStreamIn_V_V_0_sel;
wire    custDataStreamIn_V_V_0_load_A;
wire    custDataStreamIn_V_V_0_load_B;
reg   [1:0] custDataStreamIn_V_V_0_state;
wire    custDataStreamIn_V_V_0_state_cmp_full;
reg   [15:0] xStreamOut0_V_V_1_data_out;
reg    xStreamOut0_V_V_1_vld_in;
wire    xStreamOut0_V_V_1_vld_out;
wire    xStreamOut0_V_V_1_ack_out;
reg   [15:0] xStreamOut0_V_V_1_payload_A;
reg   [15:0] xStreamOut0_V_V_1_payload_B;
reg    xStreamOut0_V_V_1_sel_rd;
reg    xStreamOut0_V_V_1_sel_wr;
wire    xStreamOut0_V_V_1_sel;
wire    xStreamOut0_V_V_1_load_A;
wire    xStreamOut0_V_V_1_load_B;
reg   [1:0] xStreamOut0_V_V_1_state;
wire    xStreamOut0_V_V_1_state_cmp_full;
reg   [15:0] yStreamOut0_V_V_1_data_out;
reg    yStreamOut0_V_V_1_vld_in;
wire    yStreamOut0_V_V_1_vld_out;
wire    yStreamOut0_V_V_1_ack_out;
reg   [15:0] yStreamOut0_V_V_1_payload_A;
reg   [15:0] yStreamOut0_V_V_1_payload_B;
reg    yStreamOut0_V_V_1_sel_rd;
reg    yStreamOut0_V_V_1_sel_wr;
wire    yStreamOut0_V_V_1_sel;
wire    yStreamOut0_V_V_1_load_A;
wire    yStreamOut0_V_V_1_load_B;
reg   [1:0] yStreamOut0_V_V_1_state;
wire    yStreamOut0_V_V_1_state_cmp_full;
reg   [63:0] tsStreamOut0_V_V_1_data_out;
reg    tsStreamOut0_V_V_1_vld_in;
wire    tsStreamOut0_V_V_1_vld_out;
wire    tsStreamOut0_V_V_1_ack_out;
reg   [63:0] tsStreamOut0_V_V_1_payload_A;
reg   [63:0] tsStreamOut0_V_V_1_payload_B;
reg    tsStreamOut0_V_V_1_sel_rd;
reg    tsStreamOut0_V_V_1_sel_wr;
wire    tsStreamOut0_V_V_1_sel;
wire    tsStreamOut0_V_V_1_load_A;
wire    tsStreamOut0_V_V_1_load_B;
reg   [1:0] tsStreamOut0_V_V_1_state;
wire    tsStreamOut0_V_V_1_state_cmp_full;
reg   [7:0] polStreamOut0_V_V_1_data_in;
reg   [7:0] polStreamOut0_V_V_1_data_out;
reg    polStreamOut0_V_V_1_vld_in;
wire    polStreamOut0_V_V_1_vld_out;
wire    polStreamOut0_V_V_1_ack_out;
reg   [7:0] polStreamOut0_V_V_1_payload_A;
reg   [7:0] polStreamOut0_V_V_1_payload_B;
reg    polStreamOut0_V_V_1_sel_rd;
reg    polStreamOut0_V_V_1_sel_wr;
wire    polStreamOut0_V_V_1_sel;
wire    polStreamOut0_V_V_1_load_A;
wire    polStreamOut0_V_V_1_load_B;
reg   [1:0] polStreamOut0_V_V_1_state;
wire    polStreamOut0_V_V_1_state_cmp_full;
reg   [15:0] custDataStreamOut0_V_V_1_data_out;
reg    custDataStreamOut0_V_V_1_vld_in;
wire    custDataStreamOut0_V_V_1_vld_out;
wire    custDataStreamOut0_V_V_1_ack_out;
reg   [15:0] custDataStreamOut0_V_V_1_payload_A;
reg   [15:0] custDataStreamOut0_V_V_1_payload_B;
reg    custDataStreamOut0_V_V_1_sel_rd;
reg    custDataStreamOut0_V_V_1_sel_wr;
wire    custDataStreamOut0_V_V_1_sel;
wire    custDataStreamOut0_V_V_1_load_A;
wire    custDataStreamOut0_V_V_1_load_B;
reg   [1:0] custDataStreamOut0_V_V_1_state;
wire    custDataStreamOut0_V_V_1_state_cmp_full;
reg   [15:0] xStreamOut1_V_V_1_data_out;
reg    xStreamOut1_V_V_1_vld_in;
wire    xStreamOut1_V_V_1_vld_out;
wire    xStreamOut1_V_V_1_ack_out;
reg   [15:0] xStreamOut1_V_V_1_payload_A;
reg   [15:0] xStreamOut1_V_V_1_payload_B;
reg    xStreamOut1_V_V_1_sel_rd;
reg    xStreamOut1_V_V_1_sel_wr;
wire    xStreamOut1_V_V_1_sel;
wire    xStreamOut1_V_V_1_load_A;
wire    xStreamOut1_V_V_1_load_B;
reg   [1:0] xStreamOut1_V_V_1_state;
wire    xStreamOut1_V_V_1_state_cmp_full;
reg   [15:0] yStreamOut1_V_V_1_data_out;
reg    yStreamOut1_V_V_1_vld_in;
wire    yStreamOut1_V_V_1_vld_out;
wire    yStreamOut1_V_V_1_ack_out;
reg   [15:0] yStreamOut1_V_V_1_payload_A;
reg   [15:0] yStreamOut1_V_V_1_payload_B;
reg    yStreamOut1_V_V_1_sel_rd;
reg    yStreamOut1_V_V_1_sel_wr;
wire    yStreamOut1_V_V_1_sel;
wire    yStreamOut1_V_V_1_load_A;
wire    yStreamOut1_V_V_1_load_B;
reg   [1:0] yStreamOut1_V_V_1_state;
wire    yStreamOut1_V_V_1_state_cmp_full;
reg   [63:0] tsStreamOut1_V_V_1_data_out;
reg    tsStreamOut1_V_V_1_vld_in;
wire    tsStreamOut1_V_V_1_vld_out;
wire    tsStreamOut1_V_V_1_ack_out;
reg   [63:0] tsStreamOut1_V_V_1_payload_A;
reg   [63:0] tsStreamOut1_V_V_1_payload_B;
reg    tsStreamOut1_V_V_1_sel_rd;
reg    tsStreamOut1_V_V_1_sel_wr;
wire    tsStreamOut1_V_V_1_sel;
wire    tsStreamOut1_V_V_1_load_A;
wire    tsStreamOut1_V_V_1_load_B;
reg   [1:0] tsStreamOut1_V_V_1_state;
wire    tsStreamOut1_V_V_1_state_cmp_full;
reg   [7:0] polStreamOut1_V_V_1_data_in;
reg   [7:0] polStreamOut1_V_V_1_data_out;
reg    polStreamOut1_V_V_1_vld_in;
wire    polStreamOut1_V_V_1_vld_out;
wire    polStreamOut1_V_V_1_ack_out;
reg   [7:0] polStreamOut1_V_V_1_payload_A;
reg   [7:0] polStreamOut1_V_V_1_payload_B;
reg    polStreamOut1_V_V_1_sel_rd;
reg    polStreamOut1_V_V_1_sel_wr;
wire    polStreamOut1_V_V_1_sel;
wire    polStreamOut1_V_V_1_load_A;
wire    polStreamOut1_V_V_1_load_B;
reg   [1:0] polStreamOut1_V_V_1_state;
wire    polStreamOut1_V_V_1_state_cmp_full;
reg   [15:0] custDataStreamOut1_V_V_1_data_out;
reg    custDataStreamOut1_V_V_1_vld_in;
wire    custDataStreamOut1_V_V_1_vld_out;
wire    custDataStreamOut1_V_V_1_ack_out;
reg   [15:0] custDataStreamOut1_V_V_1_payload_A;
reg   [15:0] custDataStreamOut1_V_V_1_payload_B;
reg    custDataStreamOut1_V_V_1_sel_rd;
reg    custDataStreamOut1_V_V_1_sel_wr;
wire    custDataStreamOut1_V_V_1_sel;
wire    custDataStreamOut1_V_V_1_load_A;
wire    custDataStreamOut1_V_V_1_load_B;
reg   [1:0] custDataStreamOut1_V_V_1_state;
wire    custDataStreamOut1_V_V_1_state_cmp_full;
reg    xStreamIn_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    yStreamIn_V_V_TDATA_blk_n;
reg    tsStreamIn_V_V_TDATA_blk_n;
reg    polStreamIn_V_V_TDATA_blk_n;
reg    custDataStreamIn_V_V_TDATA_blk_n;
reg    xStreamOut0_V_V_TDATA_blk_n;
reg    yStreamOut0_V_V_TDATA_blk_n;
reg    tsStreamOut0_V_V_TDATA_blk_n;
reg    polStreamOut0_V_V_TDATA_blk_n;
reg    custDataStreamOut0_V_V_TDATA_blk_n;
reg    xStreamOut1_V_V_TDATA_blk_n;
reg    yStreamOut1_V_V_TDATA_blk_n;
reg    tsStreamOut1_V_V_TDATA_blk_n;
reg    polStreamOut1_V_V_TDATA_blk_n;
reg    custDataStreamOut1_V_V_TDATA_blk_n;
wire   [0:0] tmp_fu_196_p2;
wire   [0:0] tmp_6_fu_202_p2;
wire   [0:0] tmp_s_fu_208_p2;
wire   [7:0] tmp_V_17_cast_fu_218_p1;
wire   [7:0] tmp_V_7_cast_fu_224_p1;
wire   [7:0] tmp_V_2_cast_fu_229_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_2_fu_192_p1;
wire   [0:0] tmp_V_2_fu_214_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1197;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 xStreamIn_V_V_0_sel_rd = 1'b0;
#0 xStreamIn_V_V_0_sel_wr = 1'b0;
#0 xStreamIn_V_V_0_state = 2'd0;
#0 yStreamIn_V_V_0_sel_rd = 1'b0;
#0 yStreamIn_V_V_0_sel_wr = 1'b0;
#0 yStreamIn_V_V_0_state = 2'd0;
#0 tsStreamIn_V_V_0_sel_rd = 1'b0;
#0 tsStreamIn_V_V_0_sel_wr = 1'b0;
#0 tsStreamIn_V_V_0_state = 2'd0;
#0 polStreamIn_V_V_0_sel_rd = 1'b0;
#0 polStreamIn_V_V_0_sel_wr = 1'b0;
#0 polStreamIn_V_V_0_state = 2'd0;
#0 custDataStreamIn_V_V_0_sel_rd = 1'b0;
#0 custDataStreamIn_V_V_0_sel_wr = 1'b0;
#0 custDataStreamIn_V_V_0_state = 2'd0;
#0 xStreamOut0_V_V_1_sel_rd = 1'b0;
#0 xStreamOut0_V_V_1_sel_wr = 1'b0;
#0 xStreamOut0_V_V_1_state = 2'd0;
#0 yStreamOut0_V_V_1_sel_rd = 1'b0;
#0 yStreamOut0_V_V_1_sel_wr = 1'b0;
#0 yStreamOut0_V_V_1_state = 2'd0;
#0 tsStreamOut0_V_V_1_sel_rd = 1'b0;
#0 tsStreamOut0_V_V_1_sel_wr = 1'b0;
#0 tsStreamOut0_V_V_1_state = 2'd0;
#0 polStreamOut0_V_V_1_sel_rd = 1'b0;
#0 polStreamOut0_V_V_1_sel_wr = 1'b0;
#0 polStreamOut0_V_V_1_state = 2'd0;
#0 custDataStreamOut0_V_V_1_sel_rd = 1'b0;
#0 custDataStreamOut0_V_V_1_sel_wr = 1'b0;
#0 custDataStreamOut0_V_V_1_state = 2'd0;
#0 xStreamOut1_V_V_1_sel_rd = 1'b0;
#0 xStreamOut1_V_V_1_sel_wr = 1'b0;
#0 xStreamOut1_V_V_1_state = 2'd0;
#0 yStreamOut1_V_V_1_sel_rd = 1'b0;
#0 yStreamOut1_V_V_1_sel_wr = 1'b0;
#0 yStreamOut1_V_V_1_state = 2'd0;
#0 tsStreamOut1_V_V_1_sel_rd = 1'b0;
#0 tsStreamOut1_V_V_1_sel_wr = 1'b0;
#0 tsStreamOut1_V_V_1_state = 2'd0;
#0 polStreamOut1_V_V_1_sel_rd = 1'b0;
#0 polStreamOut1_V_V_1_sel_wr = 1'b0;
#0 polStreamOut1_V_V_1_state = 2'd0;
#0 custDataStreamOut1_V_V_1_sel_rd = 1'b0;
#0 custDataStreamOut1_V_V_1_sel_wr = 1'b0;
#0 custDataStreamOut1_V_V_1_state = 2'd0;
end

eventStreamDuplicate_config_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONFIG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONFIG_DATA_WIDTH ))
eventStreamDuplicate_config_s_axi_U(
    .AWVALID(s_axi_config_AWVALID),
    .AWREADY(s_axi_config_AWREADY),
    .AWADDR(s_axi_config_AWADDR),
    .WVALID(s_axi_config_WVALID),
    .WREADY(s_axi_config_WREADY),
    .WDATA(s_axi_config_WDATA),
    .WSTRB(s_axi_config_WSTRB),
    .ARVALID(s_axi_config_ARVALID),
    .ARREADY(s_axi_config_ARREADY),
    .ARADDR(s_axi_config_ARADDR),
    .RVALID(s_axi_config_RVALID),
    .RREADY(s_axi_config_RREADY),
    .RDATA(s_axi_config_RDATA),
    .RRESP(s_axi_config_RRESP),
    .BVALID(s_axi_config_BVALID),
    .BREADY(s_axi_config_BREADY),
    .BRESP(s_axi_config_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .config_V(config_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((custDataStreamIn_V_V_0_vld_out == 1'b1) & (custDataStreamIn_V_V_0_ack_out == 1'b1))) begin
            custDataStreamIn_V_V_0_sel_rd <= ~custDataStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((custDataStreamIn_V_V_0_ack_in == 1'b1) & (custDataStreamIn_V_V_0_vld_in == 1'b1))) begin
            custDataStreamIn_V_V_0_sel_wr <= ~custDataStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((custDataStreamIn_V_V_0_vld_in == 1'b0) & (custDataStreamIn_V_V_0_state == 2'd2)) | ((custDataStreamIn_V_V_0_vld_in == 1'b0) & (custDataStreamIn_V_V_0_state == 2'd3) & (custDataStreamIn_V_V_0_ack_out == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd2;
        end else if ((((custDataStreamIn_V_V_0_ack_out == 1'b0) & (custDataStreamIn_V_V_0_state == 2'd1)) | ((custDataStreamIn_V_V_0_ack_out == 1'b0) & (custDataStreamIn_V_V_0_state == 2'd3) & (custDataStreamIn_V_V_0_vld_in == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((custDataStreamIn_V_V_0_vld_in == 1'b0) & (custDataStreamIn_V_V_0_ack_out == 1'b1)) & ~((custDataStreamIn_V_V_0_ack_out == 1'b0) & (custDataStreamIn_V_V_0_vld_in == 1'b1)) & (custDataStreamIn_V_V_0_state == 2'd3)) | ((custDataStreamIn_V_V_0_state == 2'd1) & (custDataStreamIn_V_V_0_ack_out == 1'b1)) | ((custDataStreamIn_V_V_0_state == 2'd2) & (custDataStreamIn_V_V_0_vld_in == 1'b1)))) begin
            custDataStreamIn_V_V_0_state <= 2'd3;
        end else begin
            custDataStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut0_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((custDataStreamOut0_V_V_1_ack_out == 1'b1) & (custDataStreamOut0_V_V_1_vld_out == 1'b1))) begin
            custDataStreamOut0_V_V_1_sel_rd <= ~custDataStreamOut0_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut0_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((custDataStreamOut0_V_V_1_ack_in == 1'b1) & (custDataStreamOut0_V_V_1_vld_in == 1'b1))) begin
            custDataStreamOut0_V_V_1_sel_wr <= ~custDataStreamOut0_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut0_V_V_1_state <= 2'd0;
    end else begin
        if ((((custDataStreamOut0_V_V_1_vld_in == 1'b0) & (custDataStreamOut0_V_V_1_state == 2'd2)) | ((custDataStreamOut0_V_V_1_vld_in == 1'b0) & (custDataStreamOut0_V_V_1_state == 2'd3) & (custDataStreamOut0_V_V_1_ack_out == 1'b1)))) begin
            custDataStreamOut0_V_V_1_state <= 2'd2;
        end else if ((((custDataStreamOut0_V_V_1_ack_out == 1'b0) & (custDataStreamOut0_V_V_1_state == 2'd1)) | ((custDataStreamOut0_V_V_1_ack_out == 1'b0) & (custDataStreamOut0_V_V_1_state == 2'd3) & (custDataStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            custDataStreamOut0_V_V_1_state <= 2'd1;
        end else if (((~((custDataStreamOut0_V_V_1_vld_in == 1'b0) & (custDataStreamOut0_V_V_1_ack_out == 1'b1)) & ~((custDataStreamOut0_V_V_1_ack_out == 1'b0) & (custDataStreamOut0_V_V_1_vld_in == 1'b1)) & (custDataStreamOut0_V_V_1_state == 2'd3)) | ((custDataStreamOut0_V_V_1_state == 2'd1) & (custDataStreamOut0_V_V_1_ack_out == 1'b1)) | ((custDataStreamOut0_V_V_1_state == 2'd2) & (custDataStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            custDataStreamOut0_V_V_1_state <= 2'd3;
        end else begin
            custDataStreamOut0_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut1_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((custDataStreamOut1_V_V_1_ack_out == 1'b1) & (custDataStreamOut1_V_V_1_vld_out == 1'b1))) begin
            custDataStreamOut1_V_V_1_sel_rd <= ~custDataStreamOut1_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut1_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((custDataStreamOut1_V_V_1_ack_in == 1'b1) & (custDataStreamOut1_V_V_1_vld_in == 1'b1))) begin
            custDataStreamOut1_V_V_1_sel_wr <= ~custDataStreamOut1_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut1_V_V_1_state <= 2'd0;
    end else begin
        if ((((custDataStreamOut1_V_V_1_vld_in == 1'b0) & (custDataStreamOut1_V_V_1_state == 2'd2)) | ((custDataStreamOut1_V_V_1_vld_in == 1'b0) & (custDataStreamOut1_V_V_1_state == 2'd3) & (custDataStreamOut1_V_V_1_ack_out == 1'b1)))) begin
            custDataStreamOut1_V_V_1_state <= 2'd2;
        end else if ((((custDataStreamOut1_V_V_1_ack_out == 1'b0) & (custDataStreamOut1_V_V_1_state == 2'd1)) | ((custDataStreamOut1_V_V_1_ack_out == 1'b0) & (custDataStreamOut1_V_V_1_state == 2'd3) & (custDataStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            custDataStreamOut1_V_V_1_state <= 2'd1;
        end else if (((~((custDataStreamOut1_V_V_1_vld_in == 1'b0) & (custDataStreamOut1_V_V_1_ack_out == 1'b1)) & ~((custDataStreamOut1_V_V_1_ack_out == 1'b0) & (custDataStreamOut1_V_V_1_vld_in == 1'b1)) & (custDataStreamOut1_V_V_1_state == 2'd3)) | ((custDataStreamOut1_V_V_1_state == 2'd1) & (custDataStreamOut1_V_V_1_ack_out == 1'b1)) | ((custDataStreamOut1_V_V_1_state == 2'd2) & (custDataStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            custDataStreamOut1_V_V_1_state <= 2'd3;
        end else begin
            custDataStreamOut1_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_vld_out == 1'b1) & (polStreamIn_V_V_0_ack_out == 1'b1))) begin
            polStreamIn_V_V_0_sel_rd <= ~polStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_ack_in == 1'b1) & (polStreamIn_V_V_0_vld_in == 1'b1))) begin
            polStreamIn_V_V_0_sel_wr <= ~polStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_state == 2'd2)) | ((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_ack_out == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd2;
        end else if ((((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_state == 2'd1)) | ((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1)) & ~((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1)) & (polStreamIn_V_V_0_state == 2'd3)) | ((polStreamIn_V_V_0_state == 2'd1) & (polStreamIn_V_V_0_ack_out == 1'b1)) | ((polStreamIn_V_V_0_state == 2'd2) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd3;
        end else begin
            polStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut0_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((polStreamOut0_V_V_1_ack_out == 1'b1) & (polStreamOut0_V_V_1_vld_out == 1'b1))) begin
            polStreamOut0_V_V_1_sel_rd <= ~polStreamOut0_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut0_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((polStreamOut0_V_V_1_ack_in == 1'b1) & (polStreamOut0_V_V_1_vld_in == 1'b1))) begin
            polStreamOut0_V_V_1_sel_wr <= ~polStreamOut0_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut0_V_V_1_state <= 2'd0;
    end else begin
        if ((((polStreamOut0_V_V_1_vld_in == 1'b0) & (polStreamOut0_V_V_1_state == 2'd2)) | ((polStreamOut0_V_V_1_vld_in == 1'b0) & (polStreamOut0_V_V_1_state == 2'd3) & (polStreamOut0_V_V_1_ack_out == 1'b1)))) begin
            polStreamOut0_V_V_1_state <= 2'd2;
        end else if ((((polStreamOut0_V_V_1_ack_out == 1'b0) & (polStreamOut0_V_V_1_state == 2'd1)) | ((polStreamOut0_V_V_1_ack_out == 1'b0) & (polStreamOut0_V_V_1_state == 2'd3) & (polStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut0_V_V_1_state <= 2'd1;
        end else if (((~((polStreamOut0_V_V_1_vld_in == 1'b0) & (polStreamOut0_V_V_1_ack_out == 1'b1)) & ~((polStreamOut0_V_V_1_ack_out == 1'b0) & (polStreamOut0_V_V_1_vld_in == 1'b1)) & (polStreamOut0_V_V_1_state == 2'd3)) | ((polStreamOut0_V_V_1_state == 2'd1) & (polStreamOut0_V_V_1_ack_out == 1'b1)) | ((polStreamOut0_V_V_1_state == 2'd2) & (polStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut0_V_V_1_state <= 2'd3;
        end else begin
            polStreamOut0_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut1_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((polStreamOut1_V_V_1_ack_out == 1'b1) & (polStreamOut1_V_V_1_vld_out == 1'b1))) begin
            polStreamOut1_V_V_1_sel_rd <= ~polStreamOut1_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut1_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((polStreamOut1_V_V_1_vld_in == 1'b1) & (polStreamOut1_V_V_1_ack_in == 1'b1))) begin
            polStreamOut1_V_V_1_sel_wr <= ~polStreamOut1_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut1_V_V_1_state <= 2'd0;
    end else begin
        if ((((polStreamOut1_V_V_1_vld_in == 1'b0) & (polStreamOut1_V_V_1_state == 2'd2)) | ((polStreamOut1_V_V_1_vld_in == 1'b0) & (polStreamOut1_V_V_1_state == 2'd3) & (polStreamOut1_V_V_1_ack_out == 1'b1)))) begin
            polStreamOut1_V_V_1_state <= 2'd2;
        end else if ((((polStreamOut1_V_V_1_ack_out == 1'b0) & (polStreamOut1_V_V_1_state == 2'd1)) | ((polStreamOut1_V_V_1_ack_out == 1'b0) & (polStreamOut1_V_V_1_state == 2'd3) & (polStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut1_V_V_1_state <= 2'd1;
        end else if (((~((polStreamOut1_V_V_1_vld_in == 1'b0) & (polStreamOut1_V_V_1_ack_out == 1'b1)) & ~((polStreamOut1_V_V_1_ack_out == 1'b0) & (polStreamOut1_V_V_1_vld_in == 1'b1)) & (polStreamOut1_V_V_1_state == 2'd3)) | ((polStreamOut1_V_V_1_state == 2'd1) & (polStreamOut1_V_V_1_ack_out == 1'b1)) | ((polStreamOut1_V_V_1_state == 2'd2) & (polStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut1_V_V_1_state <= 2'd3;
        end else begin
            polStreamOut1_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_vld_out == 1'b1) & (tsStreamIn_V_V_0_ack_out == 1'b1))) begin
            tsStreamIn_V_V_0_sel_rd <= ~tsStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_ack_in == 1'b1) & (tsStreamIn_V_V_0_vld_in == 1'b1))) begin
            tsStreamIn_V_V_0_sel_wr <= ~tsStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_state == 2'd2)) | ((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_ack_out == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end else if ((((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_state == 2'd1)) | ((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1)) & ~((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1)) & (tsStreamIn_V_V_0_state == 2'd3)) | ((tsStreamIn_V_V_0_state == 2'd1) & (tsStreamIn_V_V_0_ack_out == 1'b1)) | ((tsStreamIn_V_V_0_state == 2'd2) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd3;
        end else begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut0_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamOut0_V_V_1_ack_out == 1'b1) & (tsStreamOut0_V_V_1_vld_out == 1'b1))) begin
            tsStreamOut0_V_V_1_sel_rd <= ~tsStreamOut0_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut0_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamOut0_V_V_1_ack_in == 1'b1) & (tsStreamOut0_V_V_1_vld_in == 1'b1))) begin
            tsStreamOut0_V_V_1_sel_wr <= ~tsStreamOut0_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut0_V_V_1_state <= 2'd0;
    end else begin
        if ((((tsStreamOut0_V_V_1_vld_in == 1'b0) & (tsStreamOut0_V_V_1_state == 2'd2)) | ((tsStreamOut0_V_V_1_vld_in == 1'b0) & (tsStreamOut0_V_V_1_state == 2'd3) & (tsStreamOut0_V_V_1_ack_out == 1'b1)))) begin
            tsStreamOut0_V_V_1_state <= 2'd2;
        end else if ((((tsStreamOut0_V_V_1_ack_out == 1'b0) & (tsStreamOut0_V_V_1_state == 2'd1)) | ((tsStreamOut0_V_V_1_ack_out == 1'b0) & (tsStreamOut0_V_V_1_state == 2'd3) & (tsStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut0_V_V_1_state <= 2'd1;
        end else if (((~((tsStreamOut0_V_V_1_vld_in == 1'b0) & (tsStreamOut0_V_V_1_ack_out == 1'b1)) & ~((tsStreamOut0_V_V_1_ack_out == 1'b0) & (tsStreamOut0_V_V_1_vld_in == 1'b1)) & (tsStreamOut0_V_V_1_state == 2'd3)) | ((tsStreamOut0_V_V_1_state == 2'd1) & (tsStreamOut0_V_V_1_ack_out == 1'b1)) | ((tsStreamOut0_V_V_1_state == 2'd2) & (tsStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut0_V_V_1_state <= 2'd3;
        end else begin
            tsStreamOut0_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut1_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamOut1_V_V_1_ack_out == 1'b1) & (tsStreamOut1_V_V_1_vld_out == 1'b1))) begin
            tsStreamOut1_V_V_1_sel_rd <= ~tsStreamOut1_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut1_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamOut1_V_V_1_vld_in == 1'b1) & (tsStreamOut1_V_V_1_ack_in == 1'b1))) begin
            tsStreamOut1_V_V_1_sel_wr <= ~tsStreamOut1_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut1_V_V_1_state <= 2'd0;
    end else begin
        if ((((tsStreamOut1_V_V_1_vld_in == 1'b0) & (tsStreamOut1_V_V_1_state == 2'd2)) | ((tsStreamOut1_V_V_1_vld_in == 1'b0) & (tsStreamOut1_V_V_1_state == 2'd3) & (tsStreamOut1_V_V_1_ack_out == 1'b1)))) begin
            tsStreamOut1_V_V_1_state <= 2'd2;
        end else if ((((tsStreamOut1_V_V_1_ack_out == 1'b0) & (tsStreamOut1_V_V_1_state == 2'd1)) | ((tsStreamOut1_V_V_1_ack_out == 1'b0) & (tsStreamOut1_V_V_1_state == 2'd3) & (tsStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut1_V_V_1_state <= 2'd1;
        end else if (((~((tsStreamOut1_V_V_1_vld_in == 1'b0) & (tsStreamOut1_V_V_1_ack_out == 1'b1)) & ~((tsStreamOut1_V_V_1_ack_out == 1'b0) & (tsStreamOut1_V_V_1_vld_in == 1'b1)) & (tsStreamOut1_V_V_1_state == 2'd3)) | ((tsStreamOut1_V_V_1_state == 2'd1) & (tsStreamOut1_V_V_1_ack_out == 1'b1)) | ((tsStreamOut1_V_V_1_state == 2'd2) & (tsStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut1_V_V_1_state <= 2'd3;
        end else begin
            tsStreamOut1_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_vld_out == 1'b1) & (xStreamIn_V_V_0_ack_out == 1'b1))) begin
            xStreamIn_V_V_0_sel_rd <= ~xStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_ack_in == 1'b1) & (xStreamIn_V_V_0_vld_in == 1'b1))) begin
            xStreamIn_V_V_0_sel_wr <= ~xStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_state == 2'd2)) | ((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_ack_out == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd2;
        end else if ((((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_state == 2'd1)) | ((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_vld_in == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1)) & ~((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1)) & (xStreamIn_V_V_0_state == 2'd3)) | ((xStreamIn_V_V_0_state == 2'd1) & (xStreamIn_V_V_0_ack_out == 1'b1)) | ((xStreamIn_V_V_0_state == 2'd2) & (xStreamIn_V_V_0_vld_in == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd3;
        end else begin
            xStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut0_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((xStreamOut0_V_V_1_ack_out == 1'b1) & (xStreamOut0_V_V_1_vld_out == 1'b1))) begin
            xStreamOut0_V_V_1_sel_rd <= ~xStreamOut0_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut0_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((xStreamOut0_V_V_1_ack_in == 1'b1) & (xStreamOut0_V_V_1_vld_in == 1'b1))) begin
            xStreamOut0_V_V_1_sel_wr <= ~xStreamOut0_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut0_V_V_1_state <= 2'd0;
    end else begin
        if ((((xStreamOut0_V_V_1_vld_in == 1'b0) & (xStreamOut0_V_V_1_state == 2'd2)) | ((xStreamOut0_V_V_1_vld_in == 1'b0) & (xStreamOut0_V_V_1_state == 2'd3) & (xStreamOut0_V_V_1_ack_out == 1'b1)))) begin
            xStreamOut0_V_V_1_state <= 2'd2;
        end else if ((((xStreamOut0_V_V_1_ack_out == 1'b0) & (xStreamOut0_V_V_1_state == 2'd1)) | ((xStreamOut0_V_V_1_ack_out == 1'b0) & (xStreamOut0_V_V_1_state == 2'd3) & (xStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut0_V_V_1_state <= 2'd1;
        end else if (((~((xStreamOut0_V_V_1_vld_in == 1'b0) & (xStreamOut0_V_V_1_ack_out == 1'b1)) & ~((xStreamOut0_V_V_1_ack_out == 1'b0) & (xStreamOut0_V_V_1_vld_in == 1'b1)) & (xStreamOut0_V_V_1_state == 2'd3)) | ((xStreamOut0_V_V_1_state == 2'd1) & (xStreamOut0_V_V_1_ack_out == 1'b1)) | ((xStreamOut0_V_V_1_state == 2'd2) & (xStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut0_V_V_1_state <= 2'd3;
        end else begin
            xStreamOut0_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut1_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((xStreamOut1_V_V_1_ack_out == 1'b1) & (xStreamOut1_V_V_1_vld_out == 1'b1))) begin
            xStreamOut1_V_V_1_sel_rd <= ~xStreamOut1_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut1_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((xStreamOut1_V_V_1_vld_in == 1'b1) & (xStreamOut1_V_V_1_ack_in == 1'b1))) begin
            xStreamOut1_V_V_1_sel_wr <= ~xStreamOut1_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut1_V_V_1_state <= 2'd0;
    end else begin
        if ((((xStreamOut1_V_V_1_vld_in == 1'b0) & (xStreamOut1_V_V_1_state == 2'd2)) | ((xStreamOut1_V_V_1_vld_in == 1'b0) & (xStreamOut1_V_V_1_state == 2'd3) & (xStreamOut1_V_V_1_ack_out == 1'b1)))) begin
            xStreamOut1_V_V_1_state <= 2'd2;
        end else if ((((xStreamOut1_V_V_1_ack_out == 1'b0) & (xStreamOut1_V_V_1_state == 2'd1)) | ((xStreamOut1_V_V_1_ack_out == 1'b0) & (xStreamOut1_V_V_1_state == 2'd3) & (xStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut1_V_V_1_state <= 2'd1;
        end else if (((~((xStreamOut1_V_V_1_vld_in == 1'b0) & (xStreamOut1_V_V_1_ack_out == 1'b1)) & ~((xStreamOut1_V_V_1_ack_out == 1'b0) & (xStreamOut1_V_V_1_vld_in == 1'b1)) & (xStreamOut1_V_V_1_state == 2'd3)) | ((xStreamOut1_V_V_1_state == 2'd1) & (xStreamOut1_V_V_1_ack_out == 1'b1)) | ((xStreamOut1_V_V_1_state == 2'd2) & (xStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut1_V_V_1_state <= 2'd3;
        end else begin
            xStreamOut1_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_vld_out == 1'b1) & (yStreamIn_V_V_0_ack_out == 1'b1))) begin
            yStreamIn_V_V_0_sel_rd <= ~yStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_ack_in == 1'b1) & (yStreamIn_V_V_0_vld_in == 1'b1))) begin
            yStreamIn_V_V_0_sel_wr <= ~yStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_state == 2'd2)) | ((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_ack_out == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd2;
        end else if ((((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_state == 2'd1)) | ((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1)) & ~((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1)) & (yStreamIn_V_V_0_state == 2'd3)) | ((yStreamIn_V_V_0_state == 2'd1) & (yStreamIn_V_V_0_ack_out == 1'b1)) | ((yStreamIn_V_V_0_state == 2'd2) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd3;
        end else begin
            yStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut0_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((yStreamOut0_V_V_1_ack_out == 1'b1) & (yStreamOut0_V_V_1_vld_out == 1'b1))) begin
            yStreamOut0_V_V_1_sel_rd <= ~yStreamOut0_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut0_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((yStreamOut0_V_V_1_ack_in == 1'b1) & (yStreamOut0_V_V_1_vld_in == 1'b1))) begin
            yStreamOut0_V_V_1_sel_wr <= ~yStreamOut0_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut0_V_V_1_state <= 2'd0;
    end else begin
        if ((((yStreamOut0_V_V_1_vld_in == 1'b0) & (yStreamOut0_V_V_1_state == 2'd2)) | ((yStreamOut0_V_V_1_vld_in == 1'b0) & (yStreamOut0_V_V_1_state == 2'd3) & (yStreamOut0_V_V_1_ack_out == 1'b1)))) begin
            yStreamOut0_V_V_1_state <= 2'd2;
        end else if ((((yStreamOut0_V_V_1_ack_out == 1'b0) & (yStreamOut0_V_V_1_state == 2'd1)) | ((yStreamOut0_V_V_1_ack_out == 1'b0) & (yStreamOut0_V_V_1_state == 2'd3) & (yStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut0_V_V_1_state <= 2'd1;
        end else if (((~((yStreamOut0_V_V_1_vld_in == 1'b0) & (yStreamOut0_V_V_1_ack_out == 1'b1)) & ~((yStreamOut0_V_V_1_ack_out == 1'b0) & (yStreamOut0_V_V_1_vld_in == 1'b1)) & (yStreamOut0_V_V_1_state == 2'd3)) | ((yStreamOut0_V_V_1_state == 2'd1) & (yStreamOut0_V_V_1_ack_out == 1'b1)) | ((yStreamOut0_V_V_1_state == 2'd2) & (yStreamOut0_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut0_V_V_1_state <= 2'd3;
        end else begin
            yStreamOut0_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut1_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((yStreamOut1_V_V_1_ack_out == 1'b1) & (yStreamOut1_V_V_1_vld_out == 1'b1))) begin
            yStreamOut1_V_V_1_sel_rd <= ~yStreamOut1_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut1_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((yStreamOut1_V_V_1_vld_in == 1'b1) & (yStreamOut1_V_V_1_ack_in == 1'b1))) begin
            yStreamOut1_V_V_1_sel_wr <= ~yStreamOut1_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut1_V_V_1_state <= 2'd0;
    end else begin
        if ((((yStreamOut1_V_V_1_vld_in == 1'b0) & (yStreamOut1_V_V_1_state == 2'd2)) | ((yStreamOut1_V_V_1_vld_in == 1'b0) & (yStreamOut1_V_V_1_state == 2'd3) & (yStreamOut1_V_V_1_ack_out == 1'b1)))) begin
            yStreamOut1_V_V_1_state <= 2'd2;
        end else if ((((yStreamOut1_V_V_1_ack_out == 1'b0) & (yStreamOut1_V_V_1_state == 2'd1)) | ((yStreamOut1_V_V_1_ack_out == 1'b0) & (yStreamOut1_V_V_1_state == 2'd3) & (yStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut1_V_V_1_state <= 2'd1;
        end else if (((~((yStreamOut1_V_V_1_vld_in == 1'b0) & (yStreamOut1_V_V_1_ack_out == 1'b1)) & ~((yStreamOut1_V_V_1_ack_out == 1'b0) & (yStreamOut1_V_V_1_vld_in == 1'b1)) & (yStreamOut1_V_V_1_state == 2'd3)) | ((yStreamOut1_V_V_1_state == 2'd1) & (yStreamOut1_V_V_1_ack_out == 1'b1)) | ((yStreamOut1_V_V_1_state == 2'd2) & (yStreamOut1_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut1_V_V_1_state <= 2'd3;
        end else begin
            yStreamOut1_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamIn_V_V_0_load_A == 1'b1)) begin
        custDataStreamIn_V_V_0_payload_A <= custDataStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamIn_V_V_0_load_B == 1'b1)) begin
        custDataStreamIn_V_V_0_payload_B <= custDataStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut0_V_V_1_load_A == 1'b1)) begin
        custDataStreamOut0_V_V_1_payload_A <= custDataStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut0_V_V_1_load_B == 1'b1)) begin
        custDataStreamOut0_V_V_1_payload_B <= custDataStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut1_V_V_1_load_A == 1'b1)) begin
        custDataStreamOut1_V_V_1_payload_A <= custDataStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut1_V_V_1_load_B == 1'b1)) begin
        custDataStreamOut1_V_V_1_payload_B <= custDataStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_A == 1'b1)) begin
        polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_B == 1'b1)) begin
        polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut0_V_V_1_load_A == 1'b1)) begin
        polStreamOut0_V_V_1_payload_A <= polStreamOut0_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut0_V_V_1_load_B == 1'b1)) begin
        polStreamOut0_V_V_1_payload_B <= polStreamOut0_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut1_V_V_1_load_A == 1'b1)) begin
        polStreamOut1_V_V_1_payload_A <= polStreamOut1_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut1_V_V_1_load_B == 1'b1)) begin
        polStreamOut1_V_V_1_payload_B <= polStreamOut1_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_196_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_reg_238 <= tmp_6_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_reg_238_pp0_iter1_reg <= tmp_6_reg_238;
        tmp_reg_234 <= tmp_fu_196_p2;
        tmp_reg_234_pp0_iter1_reg <= tmp_reg_234;
        tmp_s_reg_242_pp0_iter1_reg <= tmp_s_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_202_p2 == 1'd0) & (tmp_fu_196_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_s_reg_242 <= tmp_s_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_A == 1'b1)) begin
        tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_B == 1'b1)) begin
        tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut0_V_V_1_load_A == 1'b1)) begin
        tsStreamOut0_V_V_1_payload_A <= tsStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut0_V_V_1_load_B == 1'b1)) begin
        tsStreamOut0_V_V_1_payload_B <= tsStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut1_V_V_1_load_A == 1'b1)) begin
        tsStreamOut1_V_V_1_payload_A <= tsStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut1_V_V_1_load_B == 1'b1)) begin
        tsStreamOut1_V_V_1_payload_B <= tsStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_A == 1'b1)) begin
        xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_B == 1'b1)) begin
        xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut0_V_V_1_load_A == 1'b1)) begin
        xStreamOut0_V_V_1_payload_A <= xStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut0_V_V_1_load_B == 1'b1)) begin
        xStreamOut0_V_V_1_payload_B <= xStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut1_V_V_1_load_A == 1'b1)) begin
        xStreamOut1_V_V_1_payload_A <= xStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut1_V_V_1_load_B == 1'b1)) begin
        xStreamOut1_V_V_1_payload_B <= xStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_A == 1'b1)) begin
        yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_B == 1'b1)) begin
        yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut0_V_V_1_load_A == 1'b1)) begin
        yStreamOut0_V_V_1_payload_A <= yStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut0_V_V_1_load_B == 1'b1)) begin
        yStreamOut0_V_V_1_payload_B <= yStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut1_V_V_1_load_A == 1'b1)) begin
        yStreamOut1_V_V_1_payload_A <= yStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut1_V_V_1_load_B == 1'b1)) begin
        yStreamOut1_V_V_1_payload_B <= yStreamIn_V_V_0_data_out;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        custDataStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        custDataStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((custDataStreamIn_V_V_0_sel == 1'b1)) begin
        custDataStreamIn_V_V_0_data_out = custDataStreamIn_V_V_0_payload_B;
    end else begin
        custDataStreamIn_V_V_0_data_out = custDataStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        custDataStreamIn_V_V_TDATA_blk_n = custDataStreamIn_V_V_0_state[1'd0];
    end else begin
        custDataStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((custDataStreamOut0_V_V_1_sel == 1'b1)) begin
        custDataStreamOut0_V_V_1_data_out = custDataStreamOut0_V_V_1_payload_B;
    end else begin
        custDataStreamOut0_V_V_1_data_out = custDataStreamOut0_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tmp_reg_234 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        custDataStreamOut0_V_V_1_vld_in = 1'b1;
    end else begin
        custDataStreamOut0_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_234_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_reg_234 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        custDataStreamOut0_V_V_TDATA_blk_n = custDataStreamOut0_V_V_1_state[1'd1];
    end else begin
        custDataStreamOut0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((custDataStreamOut1_V_V_1_sel == 1'b1)) begin
        custDataStreamOut1_V_V_1_data_out = custDataStreamOut1_V_V_1_payload_B;
    end else begin
        custDataStreamOut1_V_V_1_data_out = custDataStreamOut1_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1)))) begin
        custDataStreamOut1_V_V_1_vld_in = 1'b1;
    end else begin
        custDataStreamOut1_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op92_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        custDataStreamOut1_V_V_TDATA_blk_n = custDataStreamOut1_V_V_1_state[1'd1];
    end else begin
        custDataStreamOut1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        polStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamIn_V_V_0_sel == 1'b1)) begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_B;
    end else begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        polStreamIn_V_V_TDATA_blk_n = polStreamIn_V_V_0_state[1'd0];
    end else begin
        polStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1197)) begin
        if ((tmp_reg_234 == 1'd1)) begin
            polStreamOut0_V_V_1_data_in = tmp_V_2_cast_fu_229_p1;
        end else if ((ap_predicate_op23_write_state2 == 1'b1)) begin
            polStreamOut0_V_V_1_data_in = tmp_V_17_cast_fu_218_p1;
        end else begin
            polStreamOut0_V_V_1_data_in = 'bx;
        end
    end else begin
        polStreamOut0_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((polStreamOut0_V_V_1_sel == 1'b1)) begin
        polStreamOut0_V_V_1_data_out = polStreamOut0_V_V_1_payload_B;
    end else begin
        polStreamOut0_V_V_1_data_out = polStreamOut0_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tmp_reg_234 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        polStreamOut0_V_V_1_vld_in = 1'b1;
    end else begin
        polStreamOut0_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_234_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_reg_234 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        polStreamOut0_V_V_TDATA_blk_n = polStreamOut0_V_V_1_state[1'd1];
    end else begin
        polStreamOut0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1197)) begin
        if ((ap_predicate_op34_write_state2 == 1'b1)) begin
            polStreamOut1_V_V_1_data_in = tmp_V_7_cast_fu_224_p1;
        end else if ((ap_predicate_op23_write_state2 == 1'b1)) begin
            polStreamOut1_V_V_1_data_in = tmp_V_17_cast_fu_218_p1;
        end else begin
            polStreamOut1_V_V_1_data_in = 'bx;
        end
    end else begin
        polStreamOut1_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((polStreamOut1_V_V_1_sel == 1'b1)) begin
        polStreamOut1_V_V_1_data_out = polStreamOut1_V_V_1_payload_B;
    end else begin
        polStreamOut1_V_V_1_data_out = polStreamOut1_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1)))) begin
        polStreamOut1_V_V_1_vld_in = 1'b1;
    end else begin
        polStreamOut1_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op92_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        polStreamOut1_V_V_TDATA_blk_n = polStreamOut1_V_V_1_state[1'd1];
    end else begin
        polStreamOut1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        tsStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamIn_V_V_0_sel == 1'b1)) begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_B;
    end else begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        tsStreamIn_V_V_TDATA_blk_n = tsStreamIn_V_V_0_state[1'd0];
    end else begin
        tsStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tsStreamOut0_V_V_1_sel == 1'b1)) begin
        tsStreamOut0_V_V_1_data_out = tsStreamOut0_V_V_1_payload_B;
    end else begin
        tsStreamOut0_V_V_1_data_out = tsStreamOut0_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tmp_reg_234 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tsStreamOut0_V_V_1_vld_in = 1'b1;
    end else begin
        tsStreamOut0_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_234_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_reg_234 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        tsStreamOut0_V_V_TDATA_blk_n = tsStreamOut0_V_V_1_state[1'd1];
    end else begin
        tsStreamOut0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tsStreamOut1_V_V_1_sel == 1'b1)) begin
        tsStreamOut1_V_V_1_data_out = tsStreamOut1_V_V_1_payload_B;
    end else begin
        tsStreamOut1_V_V_1_data_out = tsStreamOut1_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1)))) begin
        tsStreamOut1_V_V_1_vld_in = 1'b1;
    end else begin
        tsStreamOut1_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op92_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        tsStreamOut1_V_V_TDATA_blk_n = tsStreamOut1_V_V_1_state[1'd1];
    end else begin
        tsStreamOut1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        xStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamIn_V_V_0_sel == 1'b1)) begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_B;
    end else begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        xStreamIn_V_V_TDATA_blk_n = xStreamIn_V_V_0_state[1'd0];
    end else begin
        xStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((xStreamOut0_V_V_1_sel == 1'b1)) begin
        xStreamOut0_V_V_1_data_out = xStreamOut0_V_V_1_payload_B;
    end else begin
        xStreamOut0_V_V_1_data_out = xStreamOut0_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tmp_reg_234 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xStreamOut0_V_V_1_vld_in = 1'b1;
    end else begin
        xStreamOut0_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_234_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_reg_234 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        xStreamOut0_V_V_TDATA_blk_n = xStreamOut0_V_V_1_state[1'd1];
    end else begin
        xStreamOut0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((xStreamOut1_V_V_1_sel == 1'b1)) begin
        xStreamOut1_V_V_1_data_out = xStreamOut1_V_V_1_payload_B;
    end else begin
        xStreamOut1_V_V_1_data_out = xStreamOut1_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1)))) begin
        xStreamOut1_V_V_1_vld_in = 1'b1;
    end else begin
        xStreamOut1_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op92_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        xStreamOut1_V_V_TDATA_blk_n = xStreamOut1_V_V_1_state[1'd1];
    end else begin
        xStreamOut1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        yStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        yStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamIn_V_V_0_sel == 1'b1)) begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_B;
    end else begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        yStreamIn_V_V_TDATA_blk_n = yStreamIn_V_V_0_state[1'd0];
    end else begin
        yStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((yStreamOut0_V_V_1_sel == 1'b1)) begin
        yStreamOut0_V_V_1_data_out = yStreamOut0_V_V_1_payload_B;
    end else begin
        yStreamOut0_V_V_1_data_out = yStreamOut0_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tmp_reg_234 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        yStreamOut0_V_V_1_vld_in = 1'b1;
    end else begin
        yStreamOut0_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_234_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_reg_234 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        yStreamOut0_V_V_TDATA_blk_n = yStreamOut0_V_V_1_state[1'd1];
    end else begin
        yStreamOut0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((yStreamOut1_V_V_1_sel == 1'b1)) begin
        yStreamOut1_V_V_1_data_out = yStreamOut1_V_V_1_payload_B;
    end else begin
        yStreamOut1_V_V_1_data_out = yStreamOut1_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1)))) begin
        yStreamOut1_V_V_1_vld_in = 1'b1;
    end else begin
        yStreamOut1_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op92_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op23_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        yStreamOut1_V_V_TDATA_blk_n = yStreamOut1_V_V_1_state[1'd1];
    end else begin
        yStreamOut1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((custDataStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((custDataStreamOut0_V_V_1_ack_in == 1'b0) | (tsStreamOut0_V_V_1_ack_in == 1'b0) | (polStreamOut0_V_V_1_ack_in == 1'b0) | (yStreamOut0_V_V_1_ack_in == 1'b0) | (xStreamOut0_V_V_1_ack_in == 1'b0) | (custDataStreamOut1_V_V_1_ack_in == 1'b0) | (tsStreamOut1_V_V_1_ack_in == 1'b0) | (polStreamOut1_V_V_1_ack_in == 1'b0) | (yStreamOut1_V_V_1_ack_in == 1'b0) | (xStreamOut1_V_V_1_ack_in == 1'b0))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((custDataStreamOut0_V_V_1_ack_in == 1'b0) | (tsStreamOut0_V_V_1_ack_in == 1'b0) | (polStreamOut0_V_V_1_ack_in == 1'b0) | (yStreamOut0_V_V_1_ack_in == 1'b0) | (xStreamOut0_V_V_1_ack_in == 1'b0) | (custDataStreamOut1_V_V_1_ack_in == 1'b0) | (tsStreamOut1_V_V_1_ack_in == 1'b0) | (polStreamOut1_V_V_1_ack_in == 1'b0) | (yStreamOut1_V_V_1_ack_in == 1'b0) | (xStreamOut1_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((custDataStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((custDataStreamOut0_V_V_1_ack_in == 1'b0) | (tsStreamOut0_V_V_1_ack_in == 1'b0) | (polStreamOut0_V_V_1_ack_in == 1'b0) | (yStreamOut0_V_V_1_ack_in == 1'b0) | (xStreamOut0_V_V_1_ack_in == 1'b0) | (custDataStreamOut1_V_V_1_ack_in == 1'b0) | (tsStreamOut1_V_V_1_ack_in == 1'b0) | (polStreamOut1_V_V_1_ack_in == 1'b0) | (yStreamOut1_V_V_1_ack_in == 1'b0) | (xStreamOut1_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((custDataStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = (((tmp_reg_234 == 1'd1) & (custDataStreamOut0_V_V_1_ack_in == 1'b0)) | ((tmp_reg_234 == 1'd1) & (tsStreamOut0_V_V_1_ack_in == 1'b0)) | ((tmp_reg_234 == 1'd1) & (polStreamOut0_V_V_1_ack_in == 1'b0)) | ((tmp_reg_234 == 1'd1) & (yStreamOut0_V_V_1_ack_in == 1'b0)) | ((custDataStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tsStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((polStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((yStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((custDataStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tsStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((polStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((yStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((xStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((xStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op23_write_state2 == 1'b1)) | ((tmp_reg_234 == 1'd1) & (xStreamOut0_V_V_1_ack_in == 1'b0)) | ((custDataStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((tsStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((polStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((yStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((xStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((custDataStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = (((tmp_reg_234_pp0_iter1_reg == 1'd1) & (custDataStreamOut0_V_V_1_ack_in == 1'b0)) | ((custDataStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((tmp_reg_234_pp0_iter1_reg == 1'd1) & (tsStreamOut0_V_V_1_ack_in == 1'b0)) | ((tsStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((tmp_reg_234_pp0_iter1_reg == 1'd1) & (polStreamOut0_V_V_1_ack_in == 1'b0)) | ((polStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((tmp_reg_234_pp0_iter1_reg == 1'd1) & (yStreamOut0_V_V_1_ack_in == 1'b0)) | ((yStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((tmp_reg_234_pp0_iter1_reg == 1'd1) & (xStreamOut0_V_V_1_ack_in == 1'b0)) | ((xStreamOut0_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((custDataStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op92_write_state3 == 1'b1)) | ((custDataStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((tsStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op92_write_state3 == 1'b1)) | ((tsStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((polStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op92_write_state3 == 1'b1)) | ((polStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((yStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op92_write_state3 == 1'b1)) | ((yStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((xStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op92_write_state3 == 1'b1)) | ((xStreamOut1_V_V_1_ack_in == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((custDataStreamOut0_V_V_1_ack_in == 1'b0) | (tsStreamOut0_V_V_1_ack_in == 1'b0) | (polStreamOut0_V_V_1_ack_in == 1'b0) | (yStreamOut0_V_V_1_ack_in == 1'b0) | (xStreamOut0_V_V_1_ack_in == 1'b0) | (custDataStreamOut1_V_V_1_ack_in == 1'b0) | (tsStreamOut1_V_V_1_ack_in == 1'b0) | (polStreamOut1_V_V_1_ack_in == 1'b0) | (yStreamOut1_V_V_1_ack_in == 1'b0) | (xStreamOut1_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_1197 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op23_write_state2 = ((tmp_s_reg_242 == 1'd1) & (tmp_6_reg_238 == 1'd0) & (tmp_reg_234 == 1'd0));
end

always @ (*) begin
    ap_predicate_op34_write_state2 = ((tmp_6_reg_238 == 1'd1) & (tmp_reg_234 == 1'd0));
end

always @ (*) begin
    ap_predicate_op80_write_state3 = ((tmp_s_reg_242_pp0_iter1_reg == 1'd1) & (tmp_6_reg_238_pp0_iter1_reg == 1'd0) & (tmp_reg_234_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op92_write_state3 = ((tmp_6_reg_238_pp0_iter1_reg == 1'd1) & (tmp_reg_234_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign custDataStreamIn_V_V_0_ack_in = custDataStreamIn_V_V_0_state[1'd1];

assign custDataStreamIn_V_V_0_load_A = (~custDataStreamIn_V_V_0_sel_wr & custDataStreamIn_V_V_0_state_cmp_full);

assign custDataStreamIn_V_V_0_load_B = (custDataStreamIn_V_V_0_state_cmp_full & custDataStreamIn_V_V_0_sel_wr);

assign custDataStreamIn_V_V_0_sel = custDataStreamIn_V_V_0_sel_rd;

assign custDataStreamIn_V_V_0_state_cmp_full = ((custDataStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign custDataStreamIn_V_V_0_vld_in = custDataStreamIn_V_V_TVALID;

assign custDataStreamIn_V_V_0_vld_out = custDataStreamIn_V_V_0_state[1'd0];

assign custDataStreamIn_V_V_TREADY = custDataStreamIn_V_V_0_state[1'd1];

assign custDataStreamOut0_V_V_1_ack_in = custDataStreamOut0_V_V_1_state[1'd1];

assign custDataStreamOut0_V_V_1_ack_out = custDataStreamOut0_V_V_TREADY;

assign custDataStreamOut0_V_V_1_load_A = (~custDataStreamOut0_V_V_1_sel_wr & custDataStreamOut0_V_V_1_state_cmp_full);

assign custDataStreamOut0_V_V_1_load_B = (custDataStreamOut0_V_V_1_state_cmp_full & custDataStreamOut0_V_V_1_sel_wr);

assign custDataStreamOut0_V_V_1_sel = custDataStreamOut0_V_V_1_sel_rd;

assign custDataStreamOut0_V_V_1_state_cmp_full = ((custDataStreamOut0_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign custDataStreamOut0_V_V_1_vld_out = custDataStreamOut0_V_V_1_state[1'd0];

assign custDataStreamOut0_V_V_TDATA = custDataStreamOut0_V_V_1_data_out;

assign custDataStreamOut0_V_V_TVALID = custDataStreamOut0_V_V_1_state[1'd0];

assign custDataStreamOut1_V_V_1_ack_in = custDataStreamOut1_V_V_1_state[1'd1];

assign custDataStreamOut1_V_V_1_ack_out = custDataStreamOut1_V_V_TREADY;

assign custDataStreamOut1_V_V_1_load_A = (~custDataStreamOut1_V_V_1_sel_wr & custDataStreamOut1_V_V_1_state_cmp_full);

assign custDataStreamOut1_V_V_1_load_B = (custDataStreamOut1_V_V_1_state_cmp_full & custDataStreamOut1_V_V_1_sel_wr);

assign custDataStreamOut1_V_V_1_sel = custDataStreamOut1_V_V_1_sel_rd;

assign custDataStreamOut1_V_V_1_state_cmp_full = ((custDataStreamOut1_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign custDataStreamOut1_V_V_1_vld_out = custDataStreamOut1_V_V_1_state[1'd0];

assign custDataStreamOut1_V_V_TDATA = custDataStreamOut1_V_V_1_data_out;

assign custDataStreamOut1_V_V_TVALID = custDataStreamOut1_V_V_1_state[1'd0];

assign polStreamIn_V_V_0_ack_in = polStreamIn_V_V_0_state[1'd1];

assign polStreamIn_V_V_0_load_A = (polStreamIn_V_V_0_state_cmp_full & ~polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_load_B = (polStreamIn_V_V_0_state_cmp_full & polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_sel = polStreamIn_V_V_0_sel_rd;

assign polStreamIn_V_V_0_state_cmp_full = ((polStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamIn_V_V_0_vld_in = polStreamIn_V_V_TVALID;

assign polStreamIn_V_V_0_vld_out = polStreamIn_V_V_0_state[1'd0];

assign polStreamIn_V_V_TREADY = polStreamIn_V_V_0_state[1'd1];

assign polStreamOut0_V_V_1_ack_in = polStreamOut0_V_V_1_state[1'd1];

assign polStreamOut0_V_V_1_ack_out = polStreamOut0_V_V_TREADY;

assign polStreamOut0_V_V_1_load_A = (polStreamOut0_V_V_1_state_cmp_full & ~polStreamOut0_V_V_1_sel_wr);

assign polStreamOut0_V_V_1_load_B = (polStreamOut0_V_V_1_state_cmp_full & polStreamOut0_V_V_1_sel_wr);

assign polStreamOut0_V_V_1_sel = polStreamOut0_V_V_1_sel_rd;

assign polStreamOut0_V_V_1_state_cmp_full = ((polStreamOut0_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamOut0_V_V_1_vld_out = polStreamOut0_V_V_1_state[1'd0];

assign polStreamOut0_V_V_TDATA = polStreamOut0_V_V_1_data_out;

assign polStreamOut0_V_V_TVALID = polStreamOut0_V_V_1_state[1'd0];

assign polStreamOut1_V_V_1_ack_in = polStreamOut1_V_V_1_state[1'd1];

assign polStreamOut1_V_V_1_ack_out = polStreamOut1_V_V_TREADY;

assign polStreamOut1_V_V_1_load_A = (polStreamOut1_V_V_1_state_cmp_full & ~polStreamOut1_V_V_1_sel_wr);

assign polStreamOut1_V_V_1_load_B = (polStreamOut1_V_V_1_state_cmp_full & polStreamOut1_V_V_1_sel_wr);

assign polStreamOut1_V_V_1_sel = polStreamOut1_V_V_1_sel_rd;

assign polStreamOut1_V_V_1_state_cmp_full = ((polStreamOut1_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamOut1_V_V_1_vld_out = polStreamOut1_V_V_1_state[1'd0];

assign polStreamOut1_V_V_TDATA = polStreamOut1_V_V_1_data_out;

assign polStreamOut1_V_V_TVALID = polStreamOut1_V_V_1_state[1'd0];

assign tmp_2_fu_192_p1 = config_V[1:0];

assign tmp_6_fu_202_p2 = ((tmp_2_fu_192_p1 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_V_17_cast_fu_218_p1 = tmp_V_2_fu_214_p1;

assign tmp_V_2_cast_fu_229_p1 = tmp_V_2_fu_214_p1;

assign tmp_V_2_fu_214_p1 = polStreamIn_V_V_0_data_out[0:0];

assign tmp_V_7_cast_fu_224_p1 = tmp_V_2_fu_214_p1;

assign tmp_fu_196_p2 = ((tmp_2_fu_192_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_208_p2 = ((tmp_2_fu_192_p1 == 2'd2) ? 1'b1 : 1'b0);

assign tsStreamIn_V_V_0_ack_in = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamIn_V_V_0_load_A = (tsStreamIn_V_V_0_state_cmp_full & ~tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_load_B = (tsStreamIn_V_V_0_state_cmp_full & tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_sel = tsStreamIn_V_V_0_sel_rd;

assign tsStreamIn_V_V_0_state_cmp_full = ((tsStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamIn_V_V_0_vld_in = tsStreamIn_V_V_TVALID;

assign tsStreamIn_V_V_0_vld_out = tsStreamIn_V_V_0_state[1'd0];

assign tsStreamIn_V_V_TREADY = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamOut0_V_V_1_ack_in = tsStreamOut0_V_V_1_state[1'd1];

assign tsStreamOut0_V_V_1_ack_out = tsStreamOut0_V_V_TREADY;

assign tsStreamOut0_V_V_1_load_A = (tsStreamOut0_V_V_1_state_cmp_full & ~tsStreamOut0_V_V_1_sel_wr);

assign tsStreamOut0_V_V_1_load_B = (tsStreamOut0_V_V_1_state_cmp_full & tsStreamOut0_V_V_1_sel_wr);

assign tsStreamOut0_V_V_1_sel = tsStreamOut0_V_V_1_sel_rd;

assign tsStreamOut0_V_V_1_state_cmp_full = ((tsStreamOut0_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamOut0_V_V_1_vld_out = tsStreamOut0_V_V_1_state[1'd0];

assign tsStreamOut0_V_V_TDATA = tsStreamOut0_V_V_1_data_out;

assign tsStreamOut0_V_V_TVALID = tsStreamOut0_V_V_1_state[1'd0];

assign tsStreamOut1_V_V_1_ack_in = tsStreamOut1_V_V_1_state[1'd1];

assign tsStreamOut1_V_V_1_ack_out = tsStreamOut1_V_V_TREADY;

assign tsStreamOut1_V_V_1_load_A = (tsStreamOut1_V_V_1_state_cmp_full & ~tsStreamOut1_V_V_1_sel_wr);

assign tsStreamOut1_V_V_1_load_B = (tsStreamOut1_V_V_1_state_cmp_full & tsStreamOut1_V_V_1_sel_wr);

assign tsStreamOut1_V_V_1_sel = tsStreamOut1_V_V_1_sel_rd;

assign tsStreamOut1_V_V_1_state_cmp_full = ((tsStreamOut1_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamOut1_V_V_1_vld_out = tsStreamOut1_V_V_1_state[1'd0];

assign tsStreamOut1_V_V_TDATA = tsStreamOut1_V_V_1_data_out;

assign tsStreamOut1_V_V_TVALID = tsStreamOut1_V_V_1_state[1'd0];

assign xStreamIn_V_V_0_ack_in = xStreamIn_V_V_0_state[1'd1];

assign xStreamIn_V_V_0_load_A = (xStreamIn_V_V_0_state_cmp_full & ~xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_load_B = (xStreamIn_V_V_0_state_cmp_full & xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_sel = xStreamIn_V_V_0_sel_rd;

assign xStreamIn_V_V_0_state_cmp_full = ((xStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamIn_V_V_0_vld_in = xStreamIn_V_V_TVALID;

assign xStreamIn_V_V_0_vld_out = xStreamIn_V_V_0_state[1'd0];

assign xStreamIn_V_V_TREADY = xStreamIn_V_V_0_state[1'd1];

assign xStreamOut0_V_V_1_ack_in = xStreamOut0_V_V_1_state[1'd1];

assign xStreamOut0_V_V_1_ack_out = xStreamOut0_V_V_TREADY;

assign xStreamOut0_V_V_1_load_A = (xStreamOut0_V_V_1_state_cmp_full & ~xStreamOut0_V_V_1_sel_wr);

assign xStreamOut0_V_V_1_load_B = (xStreamOut0_V_V_1_state_cmp_full & xStreamOut0_V_V_1_sel_wr);

assign xStreamOut0_V_V_1_sel = xStreamOut0_V_V_1_sel_rd;

assign xStreamOut0_V_V_1_state_cmp_full = ((xStreamOut0_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamOut0_V_V_1_vld_out = xStreamOut0_V_V_1_state[1'd0];

assign xStreamOut0_V_V_TDATA = xStreamOut0_V_V_1_data_out;

assign xStreamOut0_V_V_TVALID = xStreamOut0_V_V_1_state[1'd0];

assign xStreamOut1_V_V_1_ack_in = xStreamOut1_V_V_1_state[1'd1];

assign xStreamOut1_V_V_1_ack_out = xStreamOut1_V_V_TREADY;

assign xStreamOut1_V_V_1_load_A = (xStreamOut1_V_V_1_state_cmp_full & ~xStreamOut1_V_V_1_sel_wr);

assign xStreamOut1_V_V_1_load_B = (xStreamOut1_V_V_1_state_cmp_full & xStreamOut1_V_V_1_sel_wr);

assign xStreamOut1_V_V_1_sel = xStreamOut1_V_V_1_sel_rd;

assign xStreamOut1_V_V_1_state_cmp_full = ((xStreamOut1_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamOut1_V_V_1_vld_out = xStreamOut1_V_V_1_state[1'd0];

assign xStreamOut1_V_V_TDATA = xStreamOut1_V_V_1_data_out;

assign xStreamOut1_V_V_TVALID = xStreamOut1_V_V_1_state[1'd0];

assign yStreamIn_V_V_0_ack_in = yStreamIn_V_V_0_state[1'd1];

assign yStreamIn_V_V_0_load_A = (yStreamIn_V_V_0_state_cmp_full & ~yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_load_B = (yStreamIn_V_V_0_state_cmp_full & yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_sel = yStreamIn_V_V_0_sel_rd;

assign yStreamIn_V_V_0_state_cmp_full = ((yStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamIn_V_V_0_vld_in = yStreamIn_V_V_TVALID;

assign yStreamIn_V_V_0_vld_out = yStreamIn_V_V_0_state[1'd0];

assign yStreamIn_V_V_TREADY = yStreamIn_V_V_0_state[1'd1];

assign yStreamOut0_V_V_1_ack_in = yStreamOut0_V_V_1_state[1'd1];

assign yStreamOut0_V_V_1_ack_out = yStreamOut0_V_V_TREADY;

assign yStreamOut0_V_V_1_load_A = (yStreamOut0_V_V_1_state_cmp_full & ~yStreamOut0_V_V_1_sel_wr);

assign yStreamOut0_V_V_1_load_B = (yStreamOut0_V_V_1_state_cmp_full & yStreamOut0_V_V_1_sel_wr);

assign yStreamOut0_V_V_1_sel = yStreamOut0_V_V_1_sel_rd;

assign yStreamOut0_V_V_1_state_cmp_full = ((yStreamOut0_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamOut0_V_V_1_vld_out = yStreamOut0_V_V_1_state[1'd0];

assign yStreamOut0_V_V_TDATA = yStreamOut0_V_V_1_data_out;

assign yStreamOut0_V_V_TVALID = yStreamOut0_V_V_1_state[1'd0];

assign yStreamOut1_V_V_1_ack_in = yStreamOut1_V_V_1_state[1'd1];

assign yStreamOut1_V_V_1_ack_out = yStreamOut1_V_V_TREADY;

assign yStreamOut1_V_V_1_load_A = (yStreamOut1_V_V_1_state_cmp_full & ~yStreamOut1_V_V_1_sel_wr);

assign yStreamOut1_V_V_1_load_B = (yStreamOut1_V_V_1_state_cmp_full & yStreamOut1_V_V_1_sel_wr);

assign yStreamOut1_V_V_1_sel = yStreamOut1_V_V_1_sel_rd;

assign yStreamOut1_V_V_1_state_cmp_full = ((yStreamOut1_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamOut1_V_V_1_vld_out = yStreamOut1_V_V_1_state[1'd0];

assign yStreamOut1_V_V_TDATA = yStreamOut1_V_V_1_data_out;

assign yStreamOut1_V_V_TVALID = yStreamOut1_V_V_1_state[1'd0];

endmodule //eventStreamDuplicate
