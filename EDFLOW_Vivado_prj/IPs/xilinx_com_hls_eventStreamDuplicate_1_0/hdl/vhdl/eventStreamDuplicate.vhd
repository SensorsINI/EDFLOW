-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eventStreamDuplicate is
generic (
    C_S_AXI_CONFIG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONFIG_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xStreamOut0_V_V_TREADY : IN STD_LOGIC;
    yStreamOut0_V_V_TREADY : IN STD_LOGIC;
    polStreamOut0_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut0_V_V_TREADY : IN STD_LOGIC;
    custDataStreamOut0_V_V_TREADY : IN STD_LOGIC;
    xStreamOut1_V_V_TREADY : IN STD_LOGIC;
    yStreamOut1_V_V_TREADY : IN STD_LOGIC;
    polStreamOut1_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut1_V_V_TREADY : IN STD_LOGIC;
    custDataStreamOut1_V_V_TREADY : IN STD_LOGIC;
    xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    xStreamIn_V_V_TVALID : IN STD_LOGIC;
    xStreamIn_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn_V_V_TVALID : IN STD_LOGIC;
    yStreamIn_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    tsStreamIn_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    polStreamIn_V_V_TVALID : IN STD_LOGIC;
    polStreamIn_V_V_TREADY : OUT STD_LOGIC;
    custDataStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    custDataStreamIn_V_V_TVALID : IN STD_LOGIC;
    custDataStreamIn_V_V_TREADY : OUT STD_LOGIC;
    xStreamOut0_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut0_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut0_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut0_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut0_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsStreamOut0_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut0_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    polStreamOut0_V_V_TVALID : OUT STD_LOGIC;
    custDataStreamOut0_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    custDataStreamOut0_V_V_TVALID : OUT STD_LOGIC;
    xStreamOut1_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut1_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut1_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut1_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut1_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsStreamOut1_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut1_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    polStreamOut1_V_V_TVALID : OUT STD_LOGIC;
    custDataStreamOut1_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    custDataStreamOut1_V_V_TVALID : OUT STD_LOGIC;
    s_axi_config_AWVALID : IN STD_LOGIC;
    s_axi_config_AWREADY : OUT STD_LOGIC;
    s_axi_config_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_WVALID : IN STD_LOGIC;
    s_axi_config_WREADY : OUT STD_LOGIC;
    s_axi_config_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH/8-1 downto 0);
    s_axi_config_ARVALID : IN STD_LOGIC;
    s_axi_config_ARREADY : OUT STD_LOGIC;
    s_axi_config_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_RVALID : OUT STD_LOGIC;
    s_axi_config_RREADY : IN STD_LOGIC;
    s_axi_config_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_config_BVALID : OUT STD_LOGIC;
    s_axi_config_BREADY : IN STD_LOGIC;
    s_axi_config_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of eventStreamDuplicate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eventStreamDuplicate,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.959000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=857,HLS_SYN_LUT=858}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal xStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal yStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal polStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal custDataStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal xStreamOut0_V_V_1_ack_in : STD_LOGIC;
    signal tmp_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op23_write_state2 : BOOLEAN;
    signal yStreamOut0_V_V_1_ack_in : STD_LOGIC;
    signal polStreamOut0_V_V_1_ack_in : STD_LOGIC;
    signal tsStreamOut0_V_V_1_ack_in : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_ack_in : STD_LOGIC;
    signal xStreamOut1_V_V_1_ack_in : STD_LOGIC;
    signal yStreamOut1_V_V_1_ack_in : STD_LOGIC;
    signal polStreamOut1_V_V_1_ack_in : STD_LOGIC;
    signal tsStreamOut1_V_V_1_ack_in : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_ack_in : STD_LOGIC;
    signal ap_predicate_op34_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal tmp_reg_234_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_238_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_242_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op80_write_state3 : BOOLEAN;
    signal ap_predicate_op92_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal config_V : STD_LOGIC_VECTOR (31 downto 0);
    signal xStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal xStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel : STD_LOGIC;
    signal xStreamIn_V_V_0_load_A : STD_LOGIC;
    signal xStreamIn_V_V_0_load_B : STD_LOGIC;
    signal xStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal yStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal yStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel : STD_LOGIC;
    signal yStreamIn_V_V_0_load_A : STD_LOGIC;
    signal yStreamIn_V_V_0_load_B : STD_LOGIC;
    signal yStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal tsStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_A : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_B : STD_LOGIC;
    signal tsStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal polStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal polStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel : STD_LOGIC;
    signal polStreamIn_V_V_0_load_A : STD_LOGIC;
    signal polStreamIn_V_V_0_load_B : STD_LOGIC;
    signal polStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal custDataStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal custDataStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal custDataStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal custDataStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal custDataStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal custDataStreamIn_V_V_0_sel : STD_LOGIC;
    signal custDataStreamIn_V_V_0_load_A : STD_LOGIC;
    signal custDataStreamIn_V_V_0_load_B : STD_LOGIC;
    signal custDataStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal custDataStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal xStreamOut0_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut0_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut0_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut0_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut0_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut0_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut0_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut0_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut0_V_V_1_sel : STD_LOGIC;
    signal xStreamOut0_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut0_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut0_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut0_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut0_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut0_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut0_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut0_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut0_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut0_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut0_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut0_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut0_V_V_1_sel : STD_LOGIC;
    signal yStreamOut0_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut0_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut0_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut0_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut0_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut0_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut0_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut0_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut0_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut0_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut0_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut0_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut0_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut0_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut0_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut0_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut0_V_V_1_state_cmp_full : STD_LOGIC;
    signal polStreamOut0_V_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut0_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut0_V_V_1_vld_in : STD_LOGIC;
    signal polStreamOut0_V_V_1_vld_out : STD_LOGIC;
    signal polStreamOut0_V_V_1_ack_out : STD_LOGIC;
    signal polStreamOut0_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut0_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut0_V_V_1_sel_rd : STD_LOGIC := '0';
    signal polStreamOut0_V_V_1_sel_wr : STD_LOGIC := '0';
    signal polStreamOut0_V_V_1_sel : STD_LOGIC;
    signal polStreamOut0_V_V_1_load_A : STD_LOGIC;
    signal polStreamOut0_V_V_1_load_B : STD_LOGIC;
    signal polStreamOut0_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamOut0_V_V_1_state_cmp_full : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut0_V_V_1_vld_in : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_vld_out : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_ack_out : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut0_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut0_V_V_1_sel_rd : STD_LOGIC := '0';
    signal custDataStreamOut0_V_V_1_sel_wr : STD_LOGIC := '0';
    signal custDataStreamOut0_V_V_1_sel : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_load_A : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_load_B : STD_LOGIC;
    signal custDataStreamOut0_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal custDataStreamOut0_V_V_1_state_cmp_full : STD_LOGIC;
    signal xStreamOut1_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut1_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut1_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut1_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut1_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut1_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut1_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut1_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut1_V_V_1_sel : STD_LOGIC;
    signal xStreamOut1_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut1_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut1_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut1_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut1_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut1_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut1_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut1_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut1_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut1_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut1_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut1_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut1_V_V_1_sel : STD_LOGIC;
    signal yStreamOut1_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut1_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut1_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut1_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut1_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut1_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut1_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut1_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut1_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut1_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut1_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut1_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut1_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut1_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut1_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut1_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut1_V_V_1_state_cmp_full : STD_LOGIC;
    signal polStreamOut1_V_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut1_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut1_V_V_1_vld_in : STD_LOGIC;
    signal polStreamOut1_V_V_1_vld_out : STD_LOGIC;
    signal polStreamOut1_V_V_1_ack_out : STD_LOGIC;
    signal polStreamOut1_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut1_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut1_V_V_1_sel_rd : STD_LOGIC := '0';
    signal polStreamOut1_V_V_1_sel_wr : STD_LOGIC := '0';
    signal polStreamOut1_V_V_1_sel : STD_LOGIC;
    signal polStreamOut1_V_V_1_load_A : STD_LOGIC;
    signal polStreamOut1_V_V_1_load_B : STD_LOGIC;
    signal polStreamOut1_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamOut1_V_V_1_state_cmp_full : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut1_V_V_1_vld_in : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_vld_out : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_ack_out : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut1_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut1_V_V_1_sel_rd : STD_LOGIC := '0';
    signal custDataStreamOut1_V_V_1_sel_wr : STD_LOGIC := '0';
    signal custDataStreamOut1_V_V_1_sel : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_load_A : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_load_B : STD_LOGIC;
    signal custDataStreamOut1_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal custDataStreamOut1_V_V_1_state_cmp_full : STD_LOGIC;
    signal xStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal yStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal custDataStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal xStreamOut0_V_V_TDATA_blk_n : STD_LOGIC;
    signal yStreamOut0_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamOut0_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamOut0_V_V_TDATA_blk_n : STD_LOGIC;
    signal custDataStreamOut0_V_V_TDATA_blk_n : STD_LOGIC;
    signal xStreamOut1_V_V_TDATA_blk_n : STD_LOGIC;
    signal yStreamOut1_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamOut1_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamOut1_V_V_TDATA_blk_n : STD_LOGIC;
    signal custDataStreamOut1_V_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_17_cast_fu_218_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_7_cast_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_2_cast_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_2_fu_192_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_V_2_fu_214_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1197 : BOOLEAN;

    component eventStreamDuplicate_config_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        config_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    eventStreamDuplicate_config_s_axi_U : component eventStreamDuplicate_config_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONFIG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONFIG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_config_AWVALID,
        AWREADY => s_axi_config_AWREADY,
        AWADDR => s_axi_config_AWADDR,
        WVALID => s_axi_config_WVALID,
        WREADY => s_axi_config_WREADY,
        WDATA => s_axi_config_WDATA,
        WSTRB => s_axi_config_WSTRB,
        ARVALID => s_axi_config_ARVALID,
        ARREADY => s_axi_config_ARREADY,
        ARADDR => s_axi_config_ARADDR,
        RVALID => s_axi_config_RVALID,
        RREADY => s_axi_config_RREADY,
        RDATA => s_axi_config_RDATA,
        RRESP => s_axi_config_RRESP,
        BVALID => s_axi_config_BVALID,
        BREADY => s_axi_config_BREADY,
        BRESP => s_axi_config_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        config_V => config_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    custDataStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((custDataStreamIn_V_V_0_vld_out = ap_const_logic_1) and (custDataStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        custDataStreamIn_V_V_0_sel_rd <= not(custDataStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((custDataStreamIn_V_V_0_ack_in = ap_const_logic_1) and (custDataStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        custDataStreamIn_V_V_0_sel_wr <= not(custDataStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((custDataStreamIn_V_V_0_vld_in = ap_const_logic_0) and (custDataStreamIn_V_V_0_state = ap_const_lv2_2)) or ((custDataStreamIn_V_V_0_vld_in = ap_const_logic_0) and (custDataStreamIn_V_V_0_state = ap_const_lv2_3) and (custDataStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    custDataStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((custDataStreamIn_V_V_0_ack_out = ap_const_logic_0) and (custDataStreamIn_V_V_0_state = ap_const_lv2_1)) or ((custDataStreamIn_V_V_0_ack_out = ap_const_logic_0) and (custDataStreamIn_V_V_0_state = ap_const_lv2_3) and (custDataStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    custDataStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((custDataStreamIn_V_V_0_vld_in = ap_const_logic_0) and (custDataStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((custDataStreamIn_V_V_0_ack_out = ap_const_logic_0) and (custDataStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (custDataStreamIn_V_V_0_state = ap_const_lv2_3)) or ((custDataStreamIn_V_V_0_state = ap_const_lv2_1) and (custDataStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((custDataStreamIn_V_V_0_state = ap_const_lv2_2) and (custDataStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    custDataStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    custDataStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut0_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut0_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((custDataStreamOut0_V_V_1_ack_out = ap_const_logic_1) and (custDataStreamOut0_V_V_1_vld_out = ap_const_logic_1))) then 
                                        custDataStreamOut0_V_V_1_sel_rd <= not(custDataStreamOut0_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut0_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut0_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((custDataStreamOut0_V_V_1_ack_in = ap_const_logic_1) and (custDataStreamOut0_V_V_1_vld_in = ap_const_logic_1))) then 
                                        custDataStreamOut0_V_V_1_sel_wr <= not(custDataStreamOut0_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut0_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut0_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((custDataStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut0_V_V_1_state = ap_const_lv2_2)) or ((custDataStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut0_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut0_V_V_1_ack_out = ap_const_logic_1)))) then 
                    custDataStreamOut0_V_V_1_state <= ap_const_lv2_2;
                elsif ((((custDataStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut0_V_V_1_state = ap_const_lv2_1)) or ((custDataStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut0_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut0_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((custDataStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut0_V_V_1_ack_out = ap_const_logic_1))) and not(((custDataStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut0_V_V_1_vld_in = ap_const_logic_1))) and (custDataStreamOut0_V_V_1_state = ap_const_lv2_3)) or ((custDataStreamOut0_V_V_1_state = ap_const_lv2_1) and (custDataStreamOut0_V_V_1_ack_out = ap_const_logic_1)) or ((custDataStreamOut0_V_V_1_state = ap_const_lv2_2) and (custDataStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut0_V_V_1_state <= ap_const_lv2_3;
                else 
                    custDataStreamOut0_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut1_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut1_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((custDataStreamOut1_V_V_1_ack_out = ap_const_logic_1) and (custDataStreamOut1_V_V_1_vld_out = ap_const_logic_1))) then 
                                        custDataStreamOut1_V_V_1_sel_rd <= not(custDataStreamOut1_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut1_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut1_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((custDataStreamOut1_V_V_1_ack_in = ap_const_logic_1) and (custDataStreamOut1_V_V_1_vld_in = ap_const_logic_1))) then 
                                        custDataStreamOut1_V_V_1_sel_wr <= not(custDataStreamOut1_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut1_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut1_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((custDataStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut1_V_V_1_state = ap_const_lv2_2)) or ((custDataStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut1_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut1_V_V_1_ack_out = ap_const_logic_1)))) then 
                    custDataStreamOut1_V_V_1_state <= ap_const_lv2_2;
                elsif ((((custDataStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut1_V_V_1_state = ap_const_lv2_1)) or ((custDataStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut1_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut1_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((custDataStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut1_V_V_1_ack_out = ap_const_logic_1))) and not(((custDataStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut1_V_V_1_vld_in = ap_const_logic_1))) and (custDataStreamOut1_V_V_1_state = ap_const_lv2_3)) or ((custDataStreamOut1_V_V_1_state = ap_const_lv2_1) and (custDataStreamOut1_V_V_1_ack_out = ap_const_logic_1)) or ((custDataStreamOut1_V_V_1_state = ap_const_lv2_2) and (custDataStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut1_V_V_1_state <= ap_const_lv2_3;
                else 
                    custDataStreamOut1_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_vld_out = ap_const_logic_1) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_rd <= not(polStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_ack_in = ap_const_logic_1) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_wr <= not(polStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_2)) or ((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_3) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_3) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (polStreamIn_V_V_0_state = ap_const_lv2_3)) or ((polStreamIn_V_V_0_state = ap_const_lv2_1) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((polStreamIn_V_V_0_state = ap_const_lv2_2) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamOut0_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut0_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamOut0_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut0_V_V_1_vld_out = ap_const_logic_1))) then 
                                        polStreamOut0_V_V_1_sel_rd <= not(polStreamOut0_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut0_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut0_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamOut0_V_V_1_ack_in = ap_const_logic_1) and (polStreamOut0_V_V_1_vld_in = ap_const_logic_1))) then 
                                        polStreamOut0_V_V_1_sel_wr <= not(polStreamOut0_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut0_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut0_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((polStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut0_V_V_1_state = ap_const_lv2_2)) or ((polStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut0_V_V_1_state = ap_const_lv2_3) and (polStreamOut0_V_V_1_ack_out = ap_const_logic_1)))) then 
                    polStreamOut0_V_V_1_state <= ap_const_lv2_2;
                elsif ((((polStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut0_V_V_1_state = ap_const_lv2_1)) or ((polStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut0_V_V_1_state = ap_const_lv2_3) and (polStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut0_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((polStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut0_V_V_1_ack_out = ap_const_logic_1))) and not(((polStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut0_V_V_1_vld_in = ap_const_logic_1))) and (polStreamOut0_V_V_1_state = ap_const_lv2_3)) or ((polStreamOut0_V_V_1_state = ap_const_lv2_1) and (polStreamOut0_V_V_1_ack_out = ap_const_logic_1)) or ((polStreamOut0_V_V_1_state = ap_const_lv2_2) and (polStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut0_V_V_1_state <= ap_const_lv2_3;
                else 
                    polStreamOut0_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamOut1_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut1_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamOut1_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut1_V_V_1_vld_out = ap_const_logic_1))) then 
                                        polStreamOut1_V_V_1_sel_rd <= not(polStreamOut1_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut1_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut1_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamOut1_V_V_1_vld_in = ap_const_logic_1) and (polStreamOut1_V_V_1_ack_in = ap_const_logic_1))) then 
                                        polStreamOut1_V_V_1_sel_wr <= not(polStreamOut1_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut1_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut1_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((polStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut1_V_V_1_state = ap_const_lv2_2)) or ((polStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut1_V_V_1_state = ap_const_lv2_3) and (polStreamOut1_V_V_1_ack_out = ap_const_logic_1)))) then 
                    polStreamOut1_V_V_1_state <= ap_const_lv2_2;
                elsif ((((polStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut1_V_V_1_state = ap_const_lv2_1)) or ((polStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut1_V_V_1_state = ap_const_lv2_3) and (polStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut1_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((polStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut1_V_V_1_ack_out = ap_const_logic_1))) and not(((polStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut1_V_V_1_vld_in = ap_const_logic_1))) and (polStreamOut1_V_V_1_state = ap_const_lv2_3)) or ((polStreamOut1_V_V_1_state = ap_const_lv2_1) and (polStreamOut1_V_V_1_ack_out = ap_const_logic_1)) or ((polStreamOut1_V_V_1_state = ap_const_lv2_2) and (polStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut1_V_V_1_state <= ap_const_lv2_3;
                else 
                    polStreamOut1_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_vld_out = ap_const_logic_1) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_rd <= not(tsStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_ack_in = ap_const_logic_1) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_wr <= not(tsStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_2)) or ((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_3) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_3) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)) or ((tsStreamIn_V_V_0_state = ap_const_lv2_1) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((tsStreamIn_V_V_0_state = ap_const_lv2_2) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut0_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut0_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut0_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut0_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut0_V_V_1_sel_rd <= not(tsStreamOut0_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut0_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut0_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut0_V_V_1_ack_in = ap_const_logic_1) and (tsStreamOut0_V_V_1_vld_in = ap_const_logic_1))) then 
                                        tsStreamOut0_V_V_1_sel_wr <= not(tsStreamOut0_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut0_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut0_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut0_V_V_1_state = ap_const_lv2_2)) or ((tsStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut0_V_V_1_state = ap_const_lv2_3) and (tsStreamOut0_V_V_1_ack_out = ap_const_logic_1)))) then 
                    tsStreamOut0_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut0_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut0_V_V_1_state = ap_const_lv2_3) and (tsStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut0_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut0_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut0_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut0_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut0_V_V_1_state = ap_const_lv2_1) and (tsStreamOut0_V_V_1_ack_out = ap_const_logic_1)) or ((tsStreamOut0_V_V_1_state = ap_const_lv2_2) and (tsStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut0_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut0_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut1_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut1_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut1_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut1_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut1_V_V_1_sel_rd <= not(tsStreamOut1_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut1_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut1_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut1_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut1_V_V_1_ack_in = ap_const_logic_1))) then 
                                        tsStreamOut1_V_V_1_sel_wr <= not(tsStreamOut1_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut1_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut1_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut1_V_V_1_state = ap_const_lv2_2)) or ((tsStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut1_V_V_1_state = ap_const_lv2_3) and (tsStreamOut1_V_V_1_ack_out = ap_const_logic_1)))) then 
                    tsStreamOut1_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut1_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut1_V_V_1_state = ap_const_lv2_3) and (tsStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut1_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut1_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut1_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut1_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut1_V_V_1_state = ap_const_lv2_1) and (tsStreamOut1_V_V_1_ack_out = ap_const_logic_1)) or ((tsStreamOut1_V_V_1_state = ap_const_lv2_2) and (tsStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut1_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut1_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_vld_out = ap_const_logic_1) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_rd <= not(xStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_ack_in = ap_const_logic_1) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_wr <= not(xStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_2)) or ((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_3) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_3) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (xStreamIn_V_V_0_state = ap_const_lv2_3)) or ((xStreamIn_V_V_0_state = ap_const_lv2_1) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((xStreamIn_V_V_0_state = ap_const_lv2_2) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut0_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut0_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut0_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut0_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut0_V_V_1_sel_rd <= not(xStreamOut0_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut0_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut0_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut0_V_V_1_ack_in = ap_const_logic_1) and (xStreamOut0_V_V_1_vld_in = ap_const_logic_1))) then 
                                        xStreamOut0_V_V_1_sel_wr <= not(xStreamOut0_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut0_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut0_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut0_V_V_1_state = ap_const_lv2_2)) or ((xStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut0_V_V_1_state = ap_const_lv2_3) and (xStreamOut0_V_V_1_ack_out = ap_const_logic_1)))) then 
                    xStreamOut0_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut0_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut0_V_V_1_state = ap_const_lv2_3) and (xStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut0_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut0_V_V_1_ack_out = ap_const_logic_1))) and not(((xStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut0_V_V_1_vld_in = ap_const_logic_1))) and (xStreamOut0_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut0_V_V_1_state = ap_const_lv2_1) and (xStreamOut0_V_V_1_ack_out = ap_const_logic_1)) or ((xStreamOut0_V_V_1_state = ap_const_lv2_2) and (xStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut0_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut0_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut1_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut1_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut1_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut1_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut1_V_V_1_sel_rd <= not(xStreamOut1_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut1_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut1_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut1_V_V_1_vld_in = ap_const_logic_1) and (xStreamOut1_V_V_1_ack_in = ap_const_logic_1))) then 
                                        xStreamOut1_V_V_1_sel_wr <= not(xStreamOut1_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut1_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut1_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut1_V_V_1_state = ap_const_lv2_2)) or ((xStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut1_V_V_1_state = ap_const_lv2_3) and (xStreamOut1_V_V_1_ack_out = ap_const_logic_1)))) then 
                    xStreamOut1_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut1_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut1_V_V_1_state = ap_const_lv2_3) and (xStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut1_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut1_V_V_1_ack_out = ap_const_logic_1))) and not(((xStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut1_V_V_1_vld_in = ap_const_logic_1))) and (xStreamOut1_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut1_V_V_1_state = ap_const_lv2_1) and (xStreamOut1_V_V_1_ack_out = ap_const_logic_1)) or ((xStreamOut1_V_V_1_state = ap_const_lv2_2) and (xStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut1_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut1_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_vld_out = ap_const_logic_1) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_rd <= not(yStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_ack_in = ap_const_logic_1) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_wr <= not(yStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_2)) or ((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_3) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_3) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (yStreamIn_V_V_0_state = ap_const_lv2_3)) or ((yStreamIn_V_V_0_state = ap_const_lv2_1) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((yStreamIn_V_V_0_state = ap_const_lv2_2) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut0_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut0_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut0_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut0_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut0_V_V_1_sel_rd <= not(yStreamOut0_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut0_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut0_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut0_V_V_1_ack_in = ap_const_logic_1) and (yStreamOut0_V_V_1_vld_in = ap_const_logic_1))) then 
                                        yStreamOut0_V_V_1_sel_wr <= not(yStreamOut0_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut0_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut0_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut0_V_V_1_state = ap_const_lv2_2)) or ((yStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut0_V_V_1_state = ap_const_lv2_3) and (yStreamOut0_V_V_1_ack_out = ap_const_logic_1)))) then 
                    yStreamOut0_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut0_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut0_V_V_1_state = ap_const_lv2_3) and (yStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut0_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut0_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut0_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut0_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut0_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut0_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut0_V_V_1_state = ap_const_lv2_1) and (yStreamOut0_V_V_1_ack_out = ap_const_logic_1)) or ((yStreamOut0_V_V_1_state = ap_const_lv2_2) and (yStreamOut0_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut0_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut0_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut1_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut1_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut1_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut1_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut1_V_V_1_sel_rd <= not(yStreamOut1_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut1_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut1_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut1_V_V_1_vld_in = ap_const_logic_1) and (yStreamOut1_V_V_1_ack_in = ap_const_logic_1))) then 
                                        yStreamOut1_V_V_1_sel_wr <= not(yStreamOut1_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut1_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut1_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut1_V_V_1_state = ap_const_lv2_2)) or ((yStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut1_V_V_1_state = ap_const_lv2_3) and (yStreamOut1_V_V_1_ack_out = ap_const_logic_1)))) then 
                    yStreamOut1_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut1_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut1_V_V_1_state = ap_const_lv2_3) and (yStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut1_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut1_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut1_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut1_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut1_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut1_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut1_V_V_1_state = ap_const_lv2_1) and (yStreamOut1_V_V_1_ack_out = ap_const_logic_1)) or ((yStreamOut1_V_V_1_state = ap_const_lv2_2) and (yStreamOut1_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut1_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut1_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                custDataStreamIn_V_V_0_payload_A <= custDataStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                custDataStreamIn_V_V_0_payload_B <= custDataStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut0_V_V_1_load_A = ap_const_logic_1)) then
                custDataStreamOut0_V_V_1_payload_A <= custDataStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut0_V_V_1_load_B = ap_const_logic_1)) then
                custDataStreamOut0_V_V_1_payload_B <= custDataStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut1_V_V_1_load_A = ap_const_logic_1)) then
                custDataStreamOut1_V_V_1_payload_A <= custDataStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut1_V_V_1_load_B = ap_const_logic_1)) then
                custDataStreamOut1_V_V_1_payload_B <= custDataStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut0_V_V_1_load_A = ap_const_logic_1)) then
                polStreamOut0_V_V_1_payload_A <= polStreamOut0_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut0_V_V_1_load_B = ap_const_logic_1)) then
                polStreamOut0_V_V_1_payload_B <= polStreamOut0_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut1_V_V_1_load_A = ap_const_logic_1)) then
                polStreamOut1_V_V_1_payload_A <= polStreamOut1_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut1_V_V_1_load_B = ap_const_logic_1)) then
                polStreamOut1_V_V_1_payload_B <= polStreamOut1_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_196_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_reg_238 <= tmp_6_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_reg_238_pp0_iter1_reg <= tmp_6_reg_238;
                tmp_reg_234 <= tmp_fu_196_p2;
                tmp_reg_234_pp0_iter1_reg <= tmp_reg_234;
                tmp_s_reg_242_pp0_iter1_reg <= tmp_s_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_202_p2 = ap_const_lv1_0) and (tmp_fu_196_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_s_reg_242 <= tmp_s_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut0_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut0_V_V_1_payload_A <= tsStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut0_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut0_V_V_1_payload_B <= tsStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut1_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut1_V_V_1_payload_A <= tsStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut1_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut1_V_V_1_payload_B <= tsStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut0_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut0_V_V_1_payload_A <= xStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut0_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut0_V_V_1_payload_B <= xStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut1_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut1_V_V_1_payload_A <= xStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut1_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut1_V_V_1_payload_B <= xStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut0_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut0_V_V_1_payload_A <= yStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut0_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut0_V_V_1_payload_B <= yStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut1_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut1_V_V_1_payload_A <= yStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut1_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut1_V_V_1_payload_B <= yStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, custDataStreamIn_V_V_0_vld_out, xStreamOut0_V_V_1_ack_in, yStreamOut0_V_V_1_ack_in, polStreamOut0_V_V_1_ack_in, tsStreamOut0_V_V_1_ack_in, custDataStreamOut0_V_V_1_ack_in, xStreamOut1_V_V_1_ack_in, yStreamOut1_V_V_1_ack_in, polStreamOut1_V_V_1_ack_in, tsStreamOut1_V_V_1_ack_in, custDataStreamOut1_V_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((custDataStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut1_V_V_1_ack_in = ap_const_logic_0))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, custDataStreamIn_V_V_0_vld_out, xStreamOut0_V_V_1_ack_in, yStreamOut0_V_V_1_ack_in, polStreamOut0_V_V_1_ack_in, tsStreamOut0_V_V_1_ack_in, custDataStreamOut0_V_V_1_ack_in, xStreamOut1_V_V_1_ack_in, yStreamOut1_V_V_1_ack_in, polStreamOut1_V_V_1_ack_in, tsStreamOut1_V_V_1_ack_in, custDataStreamOut1_V_V_1_ack_in, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((custDataStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, custDataStreamIn_V_V_0_vld_out, xStreamOut0_V_V_1_ack_in, yStreamOut0_V_V_1_ack_in, polStreamOut0_V_V_1_ack_in, tsStreamOut0_V_V_1_ack_in, custDataStreamOut0_V_V_1_ack_in, xStreamOut1_V_V_1_ack_in, yStreamOut1_V_V_1_ack_in, polStreamOut1_V_V_1_ack_in, tsStreamOut1_V_V_1_ack_in, custDataStreamOut1_V_V_1_ack_in, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((custDataStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_io_assign_proc : process(xStreamOut0_V_V_1_ack_in, tmp_reg_234, ap_predicate_op23_write_state2, yStreamOut0_V_V_1_ack_in, polStreamOut0_V_V_1_ack_in, tsStreamOut0_V_V_1_ack_in, custDataStreamOut0_V_V_1_ack_in, xStreamOut1_V_V_1_ack_in, yStreamOut1_V_V_1_ack_in, polStreamOut1_V_V_1_ack_in, tsStreamOut1_V_V_1_ack_in, custDataStreamOut1_V_V_1_ack_in, ap_predicate_op34_write_state2)
    begin
                ap_block_state2_io <= (((tmp_reg_234 = ap_const_lv1_1) and (custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((tmp_reg_234 = ap_const_lv1_1) and (tsStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((tmp_reg_234 = ap_const_lv1_1) and (polStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((tmp_reg_234 = ap_const_lv1_1) and (yStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tsStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((polStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((yStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((polStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((yStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((xStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((xStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tmp_reg_234 = ap_const_lv1_1) and (xStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)) or ((tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)) or ((polStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)) or ((yStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)) or ((xStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, custDataStreamIn_V_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((custDataStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(xStreamOut0_V_V_1_ack_in, yStreamOut0_V_V_1_ack_in, polStreamOut0_V_V_1_ack_in, tsStreamOut0_V_V_1_ack_in, custDataStreamOut0_V_V_1_ack_in, xStreamOut1_V_V_1_ack_in, yStreamOut1_V_V_1_ack_in, polStreamOut1_V_V_1_ack_in, tsStreamOut1_V_V_1_ack_in, custDataStreamOut1_V_V_1_ack_in, tmp_reg_234_pp0_iter1_reg, ap_predicate_op80_write_state3, ap_predicate_op92_write_state3)
    begin
                ap_block_state3_io <= (((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (tsStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((tsStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (polStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((polStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (yStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((yStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (xStreamOut0_V_V_1_ack_in = ap_const_logic_0)) or ((xStreamOut0_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op92_write_state3 = ap_const_boolean_1)) or ((custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op92_write_state3 = ap_const_boolean_1)) or ((tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((polStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op92_write_state3 = ap_const_boolean_1)) or ((polStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((yStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op92_write_state3 = ap_const_boolean_1)) or ((yStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)) or ((xStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op92_write_state3 = ap_const_boolean_1)) or ((xStreamOut1_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op80_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(xStreamOut0_V_V_1_ack_in, yStreamOut0_V_V_1_ack_in, polStreamOut0_V_V_1_ack_in, tsStreamOut0_V_V_1_ack_in, custDataStreamOut0_V_V_1_ack_in, xStreamOut1_V_V_1_ack_in, yStreamOut1_V_V_1_ack_in, polStreamOut1_V_V_1_ack_in, tsStreamOut1_V_V_1_ack_in, custDataStreamOut1_V_V_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((custDataStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut0_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut1_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut1_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_1197_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_1197 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op23_write_state2_assign_proc : process(tmp_reg_234, tmp_6_reg_238, tmp_s_reg_242)
    begin
                ap_predicate_op23_write_state2 <= ((tmp_s_reg_242 = ap_const_lv1_1) and (tmp_6_reg_238 = ap_const_lv1_0) and (tmp_reg_234 = ap_const_lv1_0));
    end process;


    ap_predicate_op34_write_state2_assign_proc : process(tmp_reg_234, tmp_6_reg_238)
    begin
                ap_predicate_op34_write_state2 <= ((tmp_6_reg_238 = ap_const_lv1_1) and (tmp_reg_234 = ap_const_lv1_0));
    end process;


    ap_predicate_op80_write_state3_assign_proc : process(tmp_reg_234_pp0_iter1_reg, tmp_6_reg_238_pp0_iter1_reg, tmp_s_reg_242_pp0_iter1_reg)
    begin
                ap_predicate_op80_write_state3 <= ((tmp_s_reg_242_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_238_pp0_iter1_reg = ap_const_lv1_0) and (tmp_reg_234_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op92_write_state3_assign_proc : process(tmp_reg_234_pp0_iter1_reg, tmp_6_reg_238_pp0_iter1_reg)
    begin
                ap_predicate_op92_write_state3 <= ((tmp_6_reg_238_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_234_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    custDataStreamIn_V_V_0_ack_in <= custDataStreamIn_V_V_0_state(1);

    custDataStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            custDataStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            custDataStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    custDataStreamIn_V_V_0_data_out_assign_proc : process(custDataStreamIn_V_V_0_payload_A, custDataStreamIn_V_V_0_payload_B, custDataStreamIn_V_V_0_sel)
    begin
        if ((custDataStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            custDataStreamIn_V_V_0_data_out <= custDataStreamIn_V_V_0_payload_B;
        else 
            custDataStreamIn_V_V_0_data_out <= custDataStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    custDataStreamIn_V_V_0_load_A <= (not(custDataStreamIn_V_V_0_sel_wr) and custDataStreamIn_V_V_0_state_cmp_full);
    custDataStreamIn_V_V_0_load_B <= (custDataStreamIn_V_V_0_state_cmp_full and custDataStreamIn_V_V_0_sel_wr);
    custDataStreamIn_V_V_0_sel <= custDataStreamIn_V_V_0_sel_rd;
    custDataStreamIn_V_V_0_state_cmp_full <= '0' when (custDataStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    custDataStreamIn_V_V_0_vld_in <= custDataStreamIn_V_V_TVALID;
    custDataStreamIn_V_V_0_vld_out <= custDataStreamIn_V_V_0_state(0);

    custDataStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, custDataStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            custDataStreamIn_V_V_TDATA_blk_n <= custDataStreamIn_V_V_0_state(0);
        else 
            custDataStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    custDataStreamIn_V_V_TREADY <= custDataStreamIn_V_V_0_state(1);
    custDataStreamOut0_V_V_1_ack_in <= custDataStreamOut0_V_V_1_state(1);
    custDataStreamOut0_V_V_1_ack_out <= custDataStreamOut0_V_V_TREADY;

    custDataStreamOut0_V_V_1_data_out_assign_proc : process(custDataStreamOut0_V_V_1_payload_A, custDataStreamOut0_V_V_1_payload_B, custDataStreamOut0_V_V_1_sel)
    begin
        if ((custDataStreamOut0_V_V_1_sel = ap_const_logic_1)) then 
            custDataStreamOut0_V_V_1_data_out <= custDataStreamOut0_V_V_1_payload_B;
        else 
            custDataStreamOut0_V_V_1_data_out <= custDataStreamOut0_V_V_1_payload_A;
        end if; 
    end process;

    custDataStreamOut0_V_V_1_load_A <= (not(custDataStreamOut0_V_V_1_sel_wr) and custDataStreamOut0_V_V_1_state_cmp_full);
    custDataStreamOut0_V_V_1_load_B <= (custDataStreamOut0_V_V_1_state_cmp_full and custDataStreamOut0_V_V_1_sel_wr);
    custDataStreamOut0_V_V_1_sel <= custDataStreamOut0_V_V_1_sel_rd;
    custDataStreamOut0_V_V_1_state_cmp_full <= '0' when (custDataStreamOut0_V_V_1_state = ap_const_lv2_1) else '1';

    custDataStreamOut0_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_234, ap_predicate_op23_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            custDataStreamOut0_V_V_1_vld_in <= ap_const_logic_1;
        else 
            custDataStreamOut0_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    custDataStreamOut0_V_V_1_vld_out <= custDataStreamOut0_V_V_1_state(0);
    custDataStreamOut0_V_V_TDATA <= custDataStreamOut0_V_V_1_data_out;

    custDataStreamOut0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_reg_234, ap_predicate_op23_write_state2, tmp_reg_234_pp0_iter1_reg, ap_predicate_op80_write_state3, custDataStreamOut0_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            custDataStreamOut0_V_V_TDATA_blk_n <= custDataStreamOut0_V_V_1_state(1);
        else 
            custDataStreamOut0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    custDataStreamOut0_V_V_TVALID <= custDataStreamOut0_V_V_1_state(0);
    custDataStreamOut1_V_V_1_ack_in <= custDataStreamOut1_V_V_1_state(1);
    custDataStreamOut1_V_V_1_ack_out <= custDataStreamOut1_V_V_TREADY;

    custDataStreamOut1_V_V_1_data_out_assign_proc : process(custDataStreamOut1_V_V_1_payload_A, custDataStreamOut1_V_V_1_payload_B, custDataStreamOut1_V_V_1_sel)
    begin
        if ((custDataStreamOut1_V_V_1_sel = ap_const_logic_1)) then 
            custDataStreamOut1_V_V_1_data_out <= custDataStreamOut1_V_V_1_payload_B;
        else 
            custDataStreamOut1_V_V_1_data_out <= custDataStreamOut1_V_V_1_payload_A;
        end if; 
    end process;

    custDataStreamOut1_V_V_1_load_A <= (not(custDataStreamOut1_V_V_1_sel_wr) and custDataStreamOut1_V_V_1_state_cmp_full);
    custDataStreamOut1_V_V_1_load_B <= (custDataStreamOut1_V_V_1_state_cmp_full and custDataStreamOut1_V_V_1_sel_wr);
    custDataStreamOut1_V_V_1_sel <= custDataStreamOut1_V_V_1_sel_rd;
    custDataStreamOut1_V_V_1_state_cmp_full <= '0' when (custDataStreamOut1_V_V_1_state = ap_const_lv2_1) else '1';

    custDataStreamOut1_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)))) then 
            custDataStreamOut1_V_V_1_vld_in <= ap_const_logic_1;
        else 
            custDataStreamOut1_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    custDataStreamOut1_V_V_1_vld_out <= custDataStreamOut1_V_V_1_state(0);
    custDataStreamOut1_V_V_TDATA <= custDataStreamOut1_V_V_1_data_out;

    custDataStreamOut1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_predicate_op80_write_state3, ap_predicate_op92_write_state3, custDataStreamOut1_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op92_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            custDataStreamOut1_V_V_TDATA_blk_n <= custDataStreamOut1_V_V_1_state(1);
        else 
            custDataStreamOut1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    custDataStreamOut1_V_V_TVALID <= custDataStreamOut1_V_V_1_state(0);
    polStreamIn_V_V_0_ack_in <= polStreamIn_V_V_0_state(1);

    polStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    polStreamIn_V_V_0_data_out_assign_proc : process(polStreamIn_V_V_0_payload_A, polStreamIn_V_V_0_payload_B, polStreamIn_V_V_0_sel)
    begin
        if ((polStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_B;
        else 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    polStreamIn_V_V_0_load_A <= (polStreamIn_V_V_0_state_cmp_full and not(polStreamIn_V_V_0_sel_wr));
    polStreamIn_V_V_0_load_B <= (polStreamIn_V_V_0_state_cmp_full and polStreamIn_V_V_0_sel_wr);
    polStreamIn_V_V_0_sel <= polStreamIn_V_V_0_sel_rd;
    polStreamIn_V_V_0_state_cmp_full <= '0' when (polStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    polStreamIn_V_V_0_vld_in <= polStreamIn_V_V_TVALID;
    polStreamIn_V_V_0_vld_out <= polStreamIn_V_V_0_state(0);

    polStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, polStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            polStreamIn_V_V_TDATA_blk_n <= polStreamIn_V_V_0_state(0);
        else 
            polStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamIn_V_V_TREADY <= polStreamIn_V_V_0_state(1);
    polStreamOut0_V_V_1_ack_in <= polStreamOut0_V_V_1_state(1);
    polStreamOut0_V_V_1_ack_out <= polStreamOut0_V_V_TREADY;

    polStreamOut0_V_V_1_data_in_assign_proc : process(tmp_reg_234, ap_predicate_op23_write_state2, tmp_V_17_cast_fu_218_p1, tmp_V_2_cast_fu_229_p1, ap_condition_1197)
    begin
        if ((ap_const_boolean_1 = ap_condition_1197)) then
            if ((tmp_reg_234 = ap_const_lv1_1)) then 
                polStreamOut0_V_V_1_data_in <= tmp_V_2_cast_fu_229_p1;
            elsif ((ap_predicate_op23_write_state2 = ap_const_boolean_1)) then 
                polStreamOut0_V_V_1_data_in <= tmp_V_17_cast_fu_218_p1;
            else 
                polStreamOut0_V_V_1_data_in <= "XXXXXXXX";
            end if;
        else 
            polStreamOut0_V_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    polStreamOut0_V_V_1_data_out_assign_proc : process(polStreamOut0_V_V_1_payload_A, polStreamOut0_V_V_1_payload_B, polStreamOut0_V_V_1_sel)
    begin
        if ((polStreamOut0_V_V_1_sel = ap_const_logic_1)) then 
            polStreamOut0_V_V_1_data_out <= polStreamOut0_V_V_1_payload_B;
        else 
            polStreamOut0_V_V_1_data_out <= polStreamOut0_V_V_1_payload_A;
        end if; 
    end process;

    polStreamOut0_V_V_1_load_A <= (polStreamOut0_V_V_1_state_cmp_full and not(polStreamOut0_V_V_1_sel_wr));
    polStreamOut0_V_V_1_load_B <= (polStreamOut0_V_V_1_state_cmp_full and polStreamOut0_V_V_1_sel_wr);
    polStreamOut0_V_V_1_sel <= polStreamOut0_V_V_1_sel_rd;
    polStreamOut0_V_V_1_state_cmp_full <= '0' when (polStreamOut0_V_V_1_state = ap_const_lv2_1) else '1';

    polStreamOut0_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_234, ap_predicate_op23_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            polStreamOut0_V_V_1_vld_in <= ap_const_logic_1;
        else 
            polStreamOut0_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut0_V_V_1_vld_out <= polStreamOut0_V_V_1_state(0);
    polStreamOut0_V_V_TDATA <= polStreamOut0_V_V_1_data_out;

    polStreamOut0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_reg_234, ap_predicate_op23_write_state2, tmp_reg_234_pp0_iter1_reg, ap_predicate_op80_write_state3, polStreamOut0_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            polStreamOut0_V_V_TDATA_blk_n <= polStreamOut0_V_V_1_state(1);
        else 
            polStreamOut0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamOut0_V_V_TVALID <= polStreamOut0_V_V_1_state(0);
    polStreamOut1_V_V_1_ack_in <= polStreamOut1_V_V_1_state(1);
    polStreamOut1_V_V_1_ack_out <= polStreamOut1_V_V_TREADY;

    polStreamOut1_V_V_1_data_in_assign_proc : process(ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, tmp_V_17_cast_fu_218_p1, tmp_V_7_cast_fu_224_p1, ap_condition_1197)
    begin
        if ((ap_const_boolean_1 = ap_condition_1197)) then
            if ((ap_predicate_op34_write_state2 = ap_const_boolean_1)) then 
                polStreamOut1_V_V_1_data_in <= tmp_V_7_cast_fu_224_p1;
            elsif ((ap_predicate_op23_write_state2 = ap_const_boolean_1)) then 
                polStreamOut1_V_V_1_data_in <= tmp_V_17_cast_fu_218_p1;
            else 
                polStreamOut1_V_V_1_data_in <= "XXXXXXXX";
            end if;
        else 
            polStreamOut1_V_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    polStreamOut1_V_V_1_data_out_assign_proc : process(polStreamOut1_V_V_1_payload_A, polStreamOut1_V_V_1_payload_B, polStreamOut1_V_V_1_sel)
    begin
        if ((polStreamOut1_V_V_1_sel = ap_const_logic_1)) then 
            polStreamOut1_V_V_1_data_out <= polStreamOut1_V_V_1_payload_B;
        else 
            polStreamOut1_V_V_1_data_out <= polStreamOut1_V_V_1_payload_A;
        end if; 
    end process;

    polStreamOut1_V_V_1_load_A <= (polStreamOut1_V_V_1_state_cmp_full and not(polStreamOut1_V_V_1_sel_wr));
    polStreamOut1_V_V_1_load_B <= (polStreamOut1_V_V_1_state_cmp_full and polStreamOut1_V_V_1_sel_wr);
    polStreamOut1_V_V_1_sel <= polStreamOut1_V_V_1_sel_rd;
    polStreamOut1_V_V_1_state_cmp_full <= '0' when (polStreamOut1_V_V_1_state = ap_const_lv2_1) else '1';

    polStreamOut1_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)))) then 
            polStreamOut1_V_V_1_vld_in <= ap_const_logic_1;
        else 
            polStreamOut1_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut1_V_V_1_vld_out <= polStreamOut1_V_V_1_state(0);
    polStreamOut1_V_V_TDATA <= polStreamOut1_V_V_1_data_out;

    polStreamOut1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_predicate_op80_write_state3, ap_predicate_op92_write_state3, polStreamOut1_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op92_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            polStreamOut1_V_V_TDATA_blk_n <= polStreamOut1_V_V_1_state(1);
        else 
            polStreamOut1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamOut1_V_V_TVALID <= polStreamOut1_V_V_1_state(0);
    tmp_2_fu_192_p1 <= config_V(2 - 1 downto 0);
    tmp_6_fu_202_p2 <= "1" when (tmp_2_fu_192_p1 = ap_const_lv2_1) else "0";
    tmp_V_17_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_214_p1),8));
    tmp_V_2_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_214_p1),8));
    tmp_V_2_fu_214_p1 <= polStreamIn_V_V_0_data_out(1 - 1 downto 0);
    tmp_V_7_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_214_p1),8));
    tmp_fu_196_p2 <= "1" when (tmp_2_fu_192_p1 = ap_const_lv2_0) else "0";
    tmp_s_fu_208_p2 <= "1" when (tmp_2_fu_192_p1 = ap_const_lv2_2) else "0";
    tsStreamIn_V_V_0_ack_in <= tsStreamIn_V_V_0_state(1);

    tsStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tsStreamIn_V_V_0_data_out_assign_proc : process(tsStreamIn_V_V_0_payload_A, tsStreamIn_V_V_0_payload_B, tsStreamIn_V_V_0_sel)
    begin
        if ((tsStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_B;
        else 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    tsStreamIn_V_V_0_load_A <= (tsStreamIn_V_V_0_state_cmp_full and not(tsStreamIn_V_V_0_sel_wr));
    tsStreamIn_V_V_0_load_B <= (tsStreamIn_V_V_0_state_cmp_full and tsStreamIn_V_V_0_sel_wr);
    tsStreamIn_V_V_0_sel <= tsStreamIn_V_V_0_sel_rd;
    tsStreamIn_V_V_0_state_cmp_full <= '0' when (tsStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    tsStreamIn_V_V_0_vld_in <= tsStreamIn_V_V_TVALID;
    tsStreamIn_V_V_0_vld_out <= tsStreamIn_V_V_0_state(0);

    tsStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tsStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tsStreamIn_V_V_TDATA_blk_n <= tsStreamIn_V_V_0_state(0);
        else 
            tsStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamIn_V_V_TREADY <= tsStreamIn_V_V_0_state(1);
    tsStreamOut0_V_V_1_ack_in <= tsStreamOut0_V_V_1_state(1);
    tsStreamOut0_V_V_1_ack_out <= tsStreamOut0_V_V_TREADY;

    tsStreamOut0_V_V_1_data_out_assign_proc : process(tsStreamOut0_V_V_1_payload_A, tsStreamOut0_V_V_1_payload_B, tsStreamOut0_V_V_1_sel)
    begin
        if ((tsStreamOut0_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut0_V_V_1_data_out <= tsStreamOut0_V_V_1_payload_B;
        else 
            tsStreamOut0_V_V_1_data_out <= tsStreamOut0_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut0_V_V_1_load_A <= (tsStreamOut0_V_V_1_state_cmp_full and not(tsStreamOut0_V_V_1_sel_wr));
    tsStreamOut0_V_V_1_load_B <= (tsStreamOut0_V_V_1_state_cmp_full and tsStreamOut0_V_V_1_sel_wr);
    tsStreamOut0_V_V_1_sel <= tsStreamOut0_V_V_1_sel_rd;
    tsStreamOut0_V_V_1_state_cmp_full <= '0' when (tsStreamOut0_V_V_1_state = ap_const_lv2_1) else '1';

    tsStreamOut0_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_234, ap_predicate_op23_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tsStreamOut0_V_V_1_vld_in <= ap_const_logic_1;
        else 
            tsStreamOut0_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tsStreamOut0_V_V_1_vld_out <= tsStreamOut0_V_V_1_state(0);
    tsStreamOut0_V_V_TDATA <= tsStreamOut0_V_V_1_data_out;

    tsStreamOut0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_reg_234, ap_predicate_op23_write_state2, tmp_reg_234_pp0_iter1_reg, ap_predicate_op80_write_state3, tsStreamOut0_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            tsStreamOut0_V_V_TDATA_blk_n <= tsStreamOut0_V_V_1_state(1);
        else 
            tsStreamOut0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut0_V_V_TVALID <= tsStreamOut0_V_V_1_state(0);
    tsStreamOut1_V_V_1_ack_in <= tsStreamOut1_V_V_1_state(1);
    tsStreamOut1_V_V_1_ack_out <= tsStreamOut1_V_V_TREADY;

    tsStreamOut1_V_V_1_data_out_assign_proc : process(tsStreamOut1_V_V_1_payload_A, tsStreamOut1_V_V_1_payload_B, tsStreamOut1_V_V_1_sel)
    begin
        if ((tsStreamOut1_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut1_V_V_1_data_out <= tsStreamOut1_V_V_1_payload_B;
        else 
            tsStreamOut1_V_V_1_data_out <= tsStreamOut1_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut1_V_V_1_load_A <= (tsStreamOut1_V_V_1_state_cmp_full and not(tsStreamOut1_V_V_1_sel_wr));
    tsStreamOut1_V_V_1_load_B <= (tsStreamOut1_V_V_1_state_cmp_full and tsStreamOut1_V_V_1_sel_wr);
    tsStreamOut1_V_V_1_sel <= tsStreamOut1_V_V_1_sel_rd;
    tsStreamOut1_V_V_1_state_cmp_full <= '0' when (tsStreamOut1_V_V_1_state = ap_const_lv2_1) else '1';

    tsStreamOut1_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)))) then 
            tsStreamOut1_V_V_1_vld_in <= ap_const_logic_1;
        else 
            tsStreamOut1_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tsStreamOut1_V_V_1_vld_out <= tsStreamOut1_V_V_1_state(0);
    tsStreamOut1_V_V_TDATA <= tsStreamOut1_V_V_1_data_out;

    tsStreamOut1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_predicate_op80_write_state3, ap_predicate_op92_write_state3, tsStreamOut1_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op92_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            tsStreamOut1_V_V_TDATA_blk_n <= tsStreamOut1_V_V_1_state(1);
        else 
            tsStreamOut1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut1_V_V_TVALID <= tsStreamOut1_V_V_1_state(0);
    xStreamIn_V_V_0_ack_in <= xStreamIn_V_V_0_state(1);

    xStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    xStreamIn_V_V_0_data_out_assign_proc : process(xStreamIn_V_V_0_payload_A, xStreamIn_V_V_0_payload_B, xStreamIn_V_V_0_sel)
    begin
        if ((xStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_B;
        else 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    xStreamIn_V_V_0_load_A <= (xStreamIn_V_V_0_state_cmp_full and not(xStreamIn_V_V_0_sel_wr));
    xStreamIn_V_V_0_load_B <= (xStreamIn_V_V_0_state_cmp_full and xStreamIn_V_V_0_sel_wr);
    xStreamIn_V_V_0_sel <= xStreamIn_V_V_0_sel_rd;
    xStreamIn_V_V_0_state_cmp_full <= '0' when (xStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    xStreamIn_V_V_0_vld_in <= xStreamIn_V_V_TVALID;
    xStreamIn_V_V_0_vld_out <= xStreamIn_V_V_0_state(0);

    xStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            xStreamIn_V_V_TDATA_blk_n <= xStreamIn_V_V_0_state(0);
        else 
            xStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamIn_V_V_TREADY <= xStreamIn_V_V_0_state(1);
    xStreamOut0_V_V_1_ack_in <= xStreamOut0_V_V_1_state(1);
    xStreamOut0_V_V_1_ack_out <= xStreamOut0_V_V_TREADY;

    xStreamOut0_V_V_1_data_out_assign_proc : process(xStreamOut0_V_V_1_payload_A, xStreamOut0_V_V_1_payload_B, xStreamOut0_V_V_1_sel)
    begin
        if ((xStreamOut0_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut0_V_V_1_data_out <= xStreamOut0_V_V_1_payload_B;
        else 
            xStreamOut0_V_V_1_data_out <= xStreamOut0_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut0_V_V_1_load_A <= (xStreamOut0_V_V_1_state_cmp_full and not(xStreamOut0_V_V_1_sel_wr));
    xStreamOut0_V_V_1_load_B <= (xStreamOut0_V_V_1_state_cmp_full and xStreamOut0_V_V_1_sel_wr);
    xStreamOut0_V_V_1_sel <= xStreamOut0_V_V_1_sel_rd;
    xStreamOut0_V_V_1_state_cmp_full <= '0' when (xStreamOut0_V_V_1_state = ap_const_lv2_1) else '1';

    xStreamOut0_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_234, ap_predicate_op23_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            xStreamOut0_V_V_1_vld_in <= ap_const_logic_1;
        else 
            xStreamOut0_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xStreamOut0_V_V_1_vld_out <= xStreamOut0_V_V_1_state(0);
    xStreamOut0_V_V_TDATA <= xStreamOut0_V_V_1_data_out;

    xStreamOut0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_reg_234, ap_predicate_op23_write_state2, tmp_reg_234_pp0_iter1_reg, ap_predicate_op80_write_state3, xStreamOut0_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            xStreamOut0_V_V_TDATA_blk_n <= xStreamOut0_V_V_1_state(1);
        else 
            xStreamOut0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut0_V_V_TVALID <= xStreamOut0_V_V_1_state(0);
    xStreamOut1_V_V_1_ack_in <= xStreamOut1_V_V_1_state(1);
    xStreamOut1_V_V_1_ack_out <= xStreamOut1_V_V_TREADY;

    xStreamOut1_V_V_1_data_out_assign_proc : process(xStreamOut1_V_V_1_payload_A, xStreamOut1_V_V_1_payload_B, xStreamOut1_V_V_1_sel)
    begin
        if ((xStreamOut1_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut1_V_V_1_data_out <= xStreamOut1_V_V_1_payload_B;
        else 
            xStreamOut1_V_V_1_data_out <= xStreamOut1_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut1_V_V_1_load_A <= (xStreamOut1_V_V_1_state_cmp_full and not(xStreamOut1_V_V_1_sel_wr));
    xStreamOut1_V_V_1_load_B <= (xStreamOut1_V_V_1_state_cmp_full and xStreamOut1_V_V_1_sel_wr);
    xStreamOut1_V_V_1_sel <= xStreamOut1_V_V_1_sel_rd;
    xStreamOut1_V_V_1_state_cmp_full <= '0' when (xStreamOut1_V_V_1_state = ap_const_lv2_1) else '1';

    xStreamOut1_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)))) then 
            xStreamOut1_V_V_1_vld_in <= ap_const_logic_1;
        else 
            xStreamOut1_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xStreamOut1_V_V_1_vld_out <= xStreamOut1_V_V_1_state(0);
    xStreamOut1_V_V_TDATA <= xStreamOut1_V_V_1_data_out;

    xStreamOut1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_predicate_op80_write_state3, ap_predicate_op92_write_state3, xStreamOut1_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op92_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            xStreamOut1_V_V_TDATA_blk_n <= xStreamOut1_V_V_1_state(1);
        else 
            xStreamOut1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut1_V_V_TVALID <= xStreamOut1_V_V_1_state(0);
    yStreamIn_V_V_0_ack_in <= yStreamIn_V_V_0_state(1);

    yStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    yStreamIn_V_V_0_data_out_assign_proc : process(yStreamIn_V_V_0_payload_A, yStreamIn_V_V_0_payload_B, yStreamIn_V_V_0_sel)
    begin
        if ((yStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_B;
        else 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    yStreamIn_V_V_0_load_A <= (yStreamIn_V_V_0_state_cmp_full and not(yStreamIn_V_V_0_sel_wr));
    yStreamIn_V_V_0_load_B <= (yStreamIn_V_V_0_state_cmp_full and yStreamIn_V_V_0_sel_wr);
    yStreamIn_V_V_0_sel <= yStreamIn_V_V_0_sel_rd;
    yStreamIn_V_V_0_state_cmp_full <= '0' when (yStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    yStreamIn_V_V_0_vld_in <= yStreamIn_V_V_TVALID;
    yStreamIn_V_V_0_vld_out <= yStreamIn_V_V_0_state(0);

    yStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, yStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            yStreamIn_V_V_TDATA_blk_n <= yStreamIn_V_V_0_state(0);
        else 
            yStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamIn_V_V_TREADY <= yStreamIn_V_V_0_state(1);
    yStreamOut0_V_V_1_ack_in <= yStreamOut0_V_V_1_state(1);
    yStreamOut0_V_V_1_ack_out <= yStreamOut0_V_V_TREADY;

    yStreamOut0_V_V_1_data_out_assign_proc : process(yStreamOut0_V_V_1_payload_A, yStreamOut0_V_V_1_payload_B, yStreamOut0_V_V_1_sel)
    begin
        if ((yStreamOut0_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut0_V_V_1_data_out <= yStreamOut0_V_V_1_payload_B;
        else 
            yStreamOut0_V_V_1_data_out <= yStreamOut0_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut0_V_V_1_load_A <= (yStreamOut0_V_V_1_state_cmp_full and not(yStreamOut0_V_V_1_sel_wr));
    yStreamOut0_V_V_1_load_B <= (yStreamOut0_V_V_1_state_cmp_full and yStreamOut0_V_V_1_sel_wr);
    yStreamOut0_V_V_1_sel <= yStreamOut0_V_V_1_sel_rd;
    yStreamOut0_V_V_1_state_cmp_full <= '0' when (yStreamOut0_V_V_1_state = ap_const_lv2_1) else '1';

    yStreamOut0_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_234, ap_predicate_op23_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            yStreamOut0_V_V_1_vld_in <= ap_const_logic_1;
        else 
            yStreamOut0_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yStreamOut0_V_V_1_vld_out <= yStreamOut0_V_V_1_state(0);
    yStreamOut0_V_V_TDATA <= yStreamOut0_V_V_1_data_out;

    yStreamOut0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_reg_234, ap_predicate_op23_write_state2, tmp_reg_234_pp0_iter1_reg, ap_predicate_op80_write_state3, yStreamOut0_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((tmp_reg_234_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((tmp_reg_234 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            yStreamOut0_V_V_TDATA_blk_n <= yStreamOut0_V_V_1_state(1);
        else 
            yStreamOut0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut0_V_V_TVALID <= yStreamOut0_V_V_1_state(0);
    yStreamOut1_V_V_1_ack_in <= yStreamOut1_V_V_1_state(1);
    yStreamOut1_V_V_1_ack_out <= yStreamOut1_V_V_TREADY;

    yStreamOut1_V_V_1_data_out_assign_proc : process(yStreamOut1_V_V_1_payload_A, yStreamOut1_V_V_1_payload_B, yStreamOut1_V_V_1_sel)
    begin
        if ((yStreamOut1_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut1_V_V_1_data_out <= yStreamOut1_V_V_1_payload_B;
        else 
            yStreamOut1_V_V_1_data_out <= yStreamOut1_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut1_V_V_1_load_A <= (yStreamOut1_V_V_1_state_cmp_full and not(yStreamOut1_V_V_1_sel_wr));
    yStreamOut1_V_V_1_load_B <= (yStreamOut1_V_V_1_state_cmp_full and yStreamOut1_V_V_1_sel_wr);
    yStreamOut1_V_V_1_sel <= yStreamOut1_V_V_1_sel_rd;
    yStreamOut1_V_V_1_state_cmp_full <= '0' when (yStreamOut1_V_V_1_state = ap_const_lv2_1) else '1';

    yStreamOut1_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)))) then 
            yStreamOut1_V_V_1_vld_in <= ap_const_logic_1;
        else 
            yStreamOut1_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yStreamOut1_V_V_1_vld_out <= yStreamOut1_V_V_1_state(0);
    yStreamOut1_V_V_TDATA <= yStreamOut1_V_V_1_data_out;

    yStreamOut1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op23_write_state2, ap_predicate_op34_write_state2, ap_predicate_op80_write_state3, ap_predicate_op92_write_state3, yStreamOut1_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op92_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op23_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op80_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            yStreamOut1_V_V_TDATA_blk_n <= yStreamOut1_V_V_1_state(1);
        else 
            yStreamOut1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut1_V_V_TVALID <= yStreamOut1_V_V_1_state(0);
end behav;
