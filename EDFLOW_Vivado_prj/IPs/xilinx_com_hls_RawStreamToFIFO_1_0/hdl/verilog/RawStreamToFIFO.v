// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="RawStreamToFIFO,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.289000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=393,HLS_SYN_LUT=234}" *)

module RawStreamToFIFO (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        streamIn_V_V_TDATA,
        streamIn_V_V_TVALID,
        streamIn_V_V_TREADY,
        fifoIFInFull_n_V,
        fifoIFOutData_V,
        fifoIFOutData_V_ap_vld,
        skippedData_V,
        skippedData_V_ap_vld,
        nonMonTSDiffFlgReg_V,
        nonMonTSDiffFlgReg_V_ap_vld,
        skipNumReg_V,
        lastTsReg_V,
        lastTsReg_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] streamIn_V_V_TDATA;
input   streamIn_V_V_TVALID;
output   streamIn_V_V_TREADY;
input  [0:0] fifoIFInFull_n_V;
output  [15:0] fifoIFOutData_V;
output   fifoIFOutData_V_ap_vld;
output  [15:0] skippedData_V;
output   skippedData_V_ap_vld;
output  [0:0] nonMonTSDiffFlgReg_V;
output   nonMonTSDiffFlgReg_V_ap_vld;
output  [63:0] skipNumReg_V;
output  [63:0] lastTsReg_V;
output   lastTsReg_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifoIFOutData_V_ap_vld;
reg skippedData_V_ap_vld;
reg nonMonTSDiffFlgReg_V_ap_vld;
reg lastTsReg_V_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    streamIn_V_V_0_vld_out;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] streamIn_V_V_0_data_out;
wire    streamIn_V_V_0_vld_in;
wire    streamIn_V_V_0_ack_in;
reg    streamIn_V_V_0_ack_out;
reg   [15:0] streamIn_V_V_0_payload_A;
reg   [15:0] streamIn_V_V_0_payload_B;
reg    streamIn_V_V_0_sel_rd;
reg    streamIn_V_V_0_sel_wr;
wire    streamIn_V_V_0_sel;
wire    streamIn_V_V_0_load_A;
wire    streamIn_V_V_0_load_B;
reg   [1:0] streamIn_V_V_0_state;
wire    streamIn_V_V_0_state_cmp_full;
reg   [47:0] tsWrap_V;
reg   [47:0] ts_V;
reg   [47:0] glLastTS_V;
reg   [63:0] skipNumber_V;
reg    streamIn_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] fifoIFInFull_n_V_rea_reg_291;
reg   [0:0] fifoIFInFull_n_V_rea_reg_291_pp0_iter1_reg;
reg   [15:0] tmp_V_reg_295;
wire   [0:0] tmp_fu_145_p3;
wire   [0:0] tmp_2_fu_167_p2;
wire   [63:0] tmp_3_fu_231_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] ap_phi_reg_pp0_iter0_skipNumber_V_loc_reg_135;
reg   [63:0] ap_phi_reg_pp0_iter1_skipNumber_V_loc_reg_135;
reg   [63:0] ap_phi_reg_pp0_iter2_skipNumber_V_loc_reg_135;
wire   [47:0] tmp_8_fu_181_p2;
wire   [47:0] r_V_fu_193_p2;
wire   [47:0] tmp_1_fu_213_p3;
wire   [15:0] p_Result_s_fu_281_p3;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] p_Result_9_fu_157_p4;
wire   [11:0] tmp_6_fu_173_p1;
wire   [47:0] tmp_7_fu_177_p1;
wire   [32:0] tmp_5_fu_209_p1;
wire   [14:0] tmp_4_fu_205_p1;
wire   [7:0] tmp_10_fu_269_p1;
wire   [7:0] p_Result_2_fu_272_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_166;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 streamIn_V_V_0_sel_rd = 1'b0;
#0 streamIn_V_V_0_sel_wr = 1'b0;
#0 streamIn_V_V_0_state = 2'd0;
#0 tsWrap_V = 48'd0;
#0 ts_V = 48'd0;
#0 glLastTS_V = 48'd0;
#0 skipNumber_V = 64'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        streamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((streamIn_V_V_0_ack_out == 1'b1) & (streamIn_V_V_0_vld_out == 1'b1))) begin
            streamIn_V_V_0_sel_rd <= ~streamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        streamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((streamIn_V_V_0_ack_in == 1'b1) & (streamIn_V_V_0_vld_in == 1'b1))) begin
            streamIn_V_V_0_sel_wr <= ~streamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        streamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((streamIn_V_V_0_state == 2'd2) & (streamIn_V_V_0_vld_in == 1'b0)) | ((streamIn_V_V_0_state == 2'd3) & (streamIn_V_V_0_vld_in == 1'b0) & (streamIn_V_V_0_ack_out == 1'b1)))) begin
            streamIn_V_V_0_state <= 2'd2;
        end else if ((((streamIn_V_V_0_state == 2'd1) & (streamIn_V_V_0_ack_out == 1'b0)) | ((streamIn_V_V_0_state == 2'd3) & (streamIn_V_V_0_ack_out == 1'b0) & (streamIn_V_V_0_vld_in == 1'b1)))) begin
            streamIn_V_V_0_state <= 2'd1;
        end else if (((~((streamIn_V_V_0_vld_in == 1'b0) & (streamIn_V_V_0_ack_out == 1'b1)) & ~((streamIn_V_V_0_ack_out == 1'b0) & (streamIn_V_V_0_vld_in == 1'b1)) & (streamIn_V_V_0_state == 2'd3)) | ((streamIn_V_V_0_state == 2'd1) & (streamIn_V_V_0_ack_out == 1'b1)) | ((streamIn_V_V_0_state == 2'd2) & (streamIn_V_V_0_vld_in == 1'b1)))) begin
            streamIn_V_V_0_state <= 2'd3;
        end else begin
            streamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((fifoIFInFull_n_V_rea_reg_291 == 1'd0)) begin
            ap_phi_reg_pp0_iter2_skipNumber_V_loc_reg_135 <= tmp_3_fu_231_p2;
        end else if ((fifoIFInFull_n_V_rea_reg_291 == 1'd1)) begin
            ap_phi_reg_pp0_iter2_skipNumber_V_loc_reg_135 <= skipNumber_V;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_skipNumber_V_loc_reg_135 <= ap_phi_reg_pp0_iter1_skipNumber_V_loc_reg_135;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if ((tmp_fu_145_p3 == 1'd1)) begin
            ts_V <= tmp_1_fu_213_p3;
        end else if (((tmp_2_fu_167_p2 == 1'd1) & (tmp_fu_145_p3 == 1'd0))) begin
            ts_V <= r_V_fu_193_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_skipNumber_V_loc_reg_135 <= ap_phi_reg_pp0_iter0_skipNumber_V_loc_reg_135;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoIFInFull_n_V_rea_reg_291 <= fifoIFInFull_n_V;
        fifoIFInFull_n_V_rea_reg_291_pp0_iter1_reg <= fifoIFInFull_n_V_rea_reg_291;
        tmp_V_reg_295 <= streamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        glLastTS_V <= ts_V;
    end
end

always @ (posedge ap_clk) begin
    if (((fifoIFInFull_n_V_rea_reg_291 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        skipNumber_V <= tmp_3_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((streamIn_V_V_0_load_A == 1'b1)) begin
        streamIn_V_V_0_payload_A <= streamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((streamIn_V_V_0_load_B == 1'b1)) begin
        streamIn_V_V_0_payload_B <= streamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_167_p2 == 1'd1) & (tmp_fu_145_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsWrap_V <= tmp_8_fu_181_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((fifoIFInFull_n_V_rea_reg_291_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        fifoIFOutData_V_ap_vld = 1'b1;
    end else begin
        fifoIFOutData_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        lastTsReg_V_ap_vld = 1'b1;
    end else begin
        lastTsReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b1;
    end else begin
        nonMonTSDiffFlgReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((fifoIFInFull_n_V_rea_reg_291_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        skippedData_V_ap_vld = 1'b1;
    end else begin
        skippedData_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        streamIn_V_V_0_ack_out = 1'b1;
    end else begin
        streamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((streamIn_V_V_0_sel == 1'b1)) begin
        streamIn_V_V_0_data_out = streamIn_V_V_0_payload_B;
    end else begin
        streamIn_V_V_0_data_out = streamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        streamIn_V_V_TDATA_blk_n = streamIn_V_V_0_state[1'd0];
    end else begin
        streamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((streamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((streamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((streamIn_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (streamIn_V_V_0_vld_out == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_166 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_skipNumber_V_loc_reg_135 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign fifoIFOutData_V = p_Result_s_fu_281_p3;

assign lastTsReg_V = ts_V;

assign nonMonTSDiffFlgReg_V = ((ts_V < glLastTS_V) ? 1'b1 : 1'b0);

assign p_Result_2_fu_272_p4 = {{tmp_V_reg_295[15:8]}};

assign p_Result_9_fu_157_p4 = {{streamIn_V_V_0_data_out[14:12]}};

assign p_Result_s_fu_281_p3 = {{tmp_10_fu_269_p1}, {p_Result_2_fu_272_p4}};

assign r_V_fu_193_p2 = tmp_8_fu_181_p2 << 48'd15;

assign skipNumReg_V = ap_phi_reg_pp0_iter2_skipNumber_V_loc_reg_135;

assign skippedData_V = p_Result_s_fu_281_p3;

assign streamIn_V_V_0_ack_in = streamIn_V_V_0_state[1'd1];

assign streamIn_V_V_0_load_A = (streamIn_V_V_0_state_cmp_full & ~streamIn_V_V_0_sel_wr);

assign streamIn_V_V_0_load_B = (streamIn_V_V_0_state_cmp_full & streamIn_V_V_0_sel_wr);

assign streamIn_V_V_0_sel = streamIn_V_V_0_sel_rd;

assign streamIn_V_V_0_state_cmp_full = ((streamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign streamIn_V_V_0_vld_in = streamIn_V_V_TVALID;

assign streamIn_V_V_0_vld_out = streamIn_V_V_0_state[1'd0];

assign streamIn_V_V_TREADY = streamIn_V_V_0_state[1'd1];

assign tmp_10_fu_269_p1 = tmp_V_reg_295[7:0];

assign tmp_1_fu_213_p3 = {{tmp_5_fu_209_p1}, {tmp_4_fu_205_p1}};

assign tmp_2_fu_167_p2 = ((p_Result_9_fu_157_p4 == 3'd7) ? 1'b1 : 1'b0);

assign tmp_3_fu_231_p2 = (skipNumber_V + 64'd1);

assign tmp_4_fu_205_p1 = streamIn_V_V_0_data_out[14:0];

assign tmp_5_fu_209_p1 = tsWrap_V[32:0];

assign tmp_6_fu_173_p1 = streamIn_V_V_0_data_out[11:0];

assign tmp_7_fu_177_p1 = tmp_6_fu_173_p1;

assign tmp_8_fu_181_p2 = (tsWrap_V + tmp_7_fu_177_p1);

assign tmp_fu_145_p3 = streamIn_V_V_0_data_out[32'd15];

endmodule //RawStreamToFIFO
