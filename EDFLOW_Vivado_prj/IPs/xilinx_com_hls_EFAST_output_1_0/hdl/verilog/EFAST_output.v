// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="EFAST_output,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=5,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=510,HLS_SYN_LUT=543}" *)

module EFAST_output (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xStreamOut_V_V_TREADY,
        yStreamOut_V_V_TREADY,
        tsStreamOut_V_V_TREADY,
        polStreamOut_V_V_TREADY,
        custDataStreamOut_V_V_TREADY,
        xStreamIn_V_V_TDATA,
        xStreamIn_V_V_TVALID,
        xStreamIn_V_V_TREADY,
        yStreamIn_V_V_TDATA,
        yStreamIn_V_V_TVALID,
        yStreamIn_V_V_TREADY,
        tsStreamIn_V_V_TDATA,
        tsStreamIn_V_V_TVALID,
        tsStreamIn_V_V_TREADY,
        polStreamIn_V_V_TDATA,
        polStreamIn_V_V_TVALID,
        polStreamIn_V_V_TREADY,
        isFinalCornerStream_V_V_TDATA,
        isFinalCornerStream_V_V_TVALID,
        isFinalCornerStream_V_V_TREADY,
        xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID,
        yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID,
        polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID,
        custDataStreamOut_V_V_TDATA,
        custDataStreamOut_V_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   xStreamOut_V_V_TREADY;
input   yStreamOut_V_V_TREADY;
input   tsStreamOut_V_V_TREADY;
input   polStreamOut_V_V_TREADY;
input   custDataStreamOut_V_V_TREADY;
input  [15:0] xStreamIn_V_V_TDATA;
input   xStreamIn_V_V_TVALID;
output   xStreamIn_V_V_TREADY;
input  [15:0] yStreamIn_V_V_TDATA;
input   yStreamIn_V_V_TVALID;
output   yStreamIn_V_V_TREADY;
input  [63:0] tsStreamIn_V_V_TDATA;
input   tsStreamIn_V_V_TVALID;
output   tsStreamIn_V_V_TREADY;
input  [7:0] polStreamIn_V_V_TDATA;
input   polStreamIn_V_V_TVALID;
output   polStreamIn_V_V_TREADY;
input  [7:0] isFinalCornerStream_V_V_TDATA;
input   isFinalCornerStream_V_V_TVALID;
output   isFinalCornerStream_V_V_TREADY;
output  [15:0] xStreamOut_V_V_TDATA;
output   xStreamOut_V_V_TVALID;
output  [15:0] yStreamOut_V_V_TDATA;
output   yStreamOut_V_V_TVALID;
output  [7:0] polStreamOut_V_V_TDATA;
output   polStreamOut_V_V_TVALID;
output  [63:0] tsStreamOut_V_V_TDATA;
output   tsStreamOut_V_V_TVALID;
output  [15:0] custDataStreamOut_V_V_TDATA;
output   custDataStreamOut_V_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    xStreamIn_V_V_0_vld_out;
wire    yStreamIn_V_V_0_vld_out;
wire    tsStreamIn_V_V_0_vld_out;
wire    polStreamIn_V_V_0_vld_out;
wire    isFinalCornerStream_V_V_0_vld_out;
reg    ap_block_state4_pp0_stage3_iter0;
wire    xStreamOut_V_V_1_ack_in;
wire    yStreamOut_V_V_1_ack_in;
wire    tsStreamOut_V_V_1_ack_in;
wire    polStreamOut_V_V_1_ack_in;
wire    custDataStreamOut_V_V_1_ack_in;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage3_11001;
reg   [15:0] xStreamIn_V_V_0_data_out;
wire    xStreamIn_V_V_0_vld_in;
wire    xStreamIn_V_V_0_ack_in;
reg    xStreamIn_V_V_0_ack_out;
reg   [15:0] xStreamIn_V_V_0_payload_A;
reg   [15:0] xStreamIn_V_V_0_payload_B;
reg    xStreamIn_V_V_0_sel_rd;
reg    xStreamIn_V_V_0_sel_wr;
wire    xStreamIn_V_V_0_sel;
wire    xStreamIn_V_V_0_load_A;
wire    xStreamIn_V_V_0_load_B;
reg   [1:0] xStreamIn_V_V_0_state;
wire    xStreamIn_V_V_0_state_cmp_full;
reg   [15:0] yStreamIn_V_V_0_data_out;
wire    yStreamIn_V_V_0_vld_in;
wire    yStreamIn_V_V_0_ack_in;
reg    yStreamIn_V_V_0_ack_out;
reg   [15:0] yStreamIn_V_V_0_payload_A;
reg   [15:0] yStreamIn_V_V_0_payload_B;
reg    yStreamIn_V_V_0_sel_rd;
reg    yStreamIn_V_V_0_sel_wr;
wire    yStreamIn_V_V_0_sel;
wire    yStreamIn_V_V_0_load_A;
wire    yStreamIn_V_V_0_load_B;
reg   [1:0] yStreamIn_V_V_0_state;
wire    yStreamIn_V_V_0_state_cmp_full;
reg   [63:0] tsStreamIn_V_V_0_data_out;
wire    tsStreamIn_V_V_0_vld_in;
wire    tsStreamIn_V_V_0_ack_in;
reg    tsStreamIn_V_V_0_ack_out;
reg   [63:0] tsStreamIn_V_V_0_payload_A;
reg   [63:0] tsStreamIn_V_V_0_payload_B;
reg    tsStreamIn_V_V_0_sel_rd;
reg    tsStreamIn_V_V_0_sel_wr;
wire    tsStreamIn_V_V_0_sel;
wire    tsStreamIn_V_V_0_load_A;
wire    tsStreamIn_V_V_0_load_B;
reg   [1:0] tsStreamIn_V_V_0_state;
wire    tsStreamIn_V_V_0_state_cmp_full;
reg   [7:0] polStreamIn_V_V_0_data_out;
wire    polStreamIn_V_V_0_vld_in;
wire    polStreamIn_V_V_0_ack_in;
reg    polStreamIn_V_V_0_ack_out;
reg   [7:0] polStreamIn_V_V_0_payload_A;
reg   [7:0] polStreamIn_V_V_0_payload_B;
reg    polStreamIn_V_V_0_sel_rd;
reg    polStreamIn_V_V_0_sel_wr;
wire    polStreamIn_V_V_0_sel;
wire    polStreamIn_V_V_0_load_A;
wire    polStreamIn_V_V_0_load_B;
reg   [1:0] polStreamIn_V_V_0_state;
wire    polStreamIn_V_V_0_state_cmp_full;
reg   [7:0] isFinalCornerStream_V_V_0_data_out;
wire    isFinalCornerStream_V_V_0_vld_in;
wire    isFinalCornerStream_V_V_0_ack_in;
reg    isFinalCornerStream_V_V_0_ack_out;
reg   [7:0] isFinalCornerStream_V_V_0_payload_A;
reg   [7:0] isFinalCornerStream_V_V_0_payload_B;
reg    isFinalCornerStream_V_V_0_sel_rd;
reg    isFinalCornerStream_V_V_0_sel_wr;
wire    isFinalCornerStream_V_V_0_sel;
wire    isFinalCornerStream_V_V_0_load_A;
wire    isFinalCornerStream_V_V_0_load_B;
reg   [1:0] isFinalCornerStream_V_V_0_state;
wire    isFinalCornerStream_V_V_0_state_cmp_full;
reg   [15:0] xStreamOut_V_V_1_data_out;
reg    xStreamOut_V_V_1_vld_in;
wire    xStreamOut_V_V_1_vld_out;
wire    xStreamOut_V_V_1_ack_out;
reg   [15:0] xStreamOut_V_V_1_payload_A;
reg   [15:0] xStreamOut_V_V_1_payload_B;
reg    xStreamOut_V_V_1_sel_rd;
reg    xStreamOut_V_V_1_sel_wr;
wire    xStreamOut_V_V_1_sel;
wire    xStreamOut_V_V_1_load_A;
wire    xStreamOut_V_V_1_load_B;
reg   [1:0] xStreamOut_V_V_1_state;
wire    xStreamOut_V_V_1_state_cmp_full;
reg   [15:0] yStreamOut_V_V_1_data_out;
reg    yStreamOut_V_V_1_vld_in;
wire    yStreamOut_V_V_1_vld_out;
wire    yStreamOut_V_V_1_ack_out;
reg   [15:0] yStreamOut_V_V_1_payload_A;
reg   [15:0] yStreamOut_V_V_1_payload_B;
reg    yStreamOut_V_V_1_sel_rd;
reg    yStreamOut_V_V_1_sel_wr;
wire    yStreamOut_V_V_1_sel;
wire    yStreamOut_V_V_1_load_A;
wire    yStreamOut_V_V_1_load_B;
reg   [1:0] yStreamOut_V_V_1_state;
wire    yStreamOut_V_V_1_state_cmp_full;
reg   [7:0] polStreamOut_V_V_1_data_in;
reg   [7:0] polStreamOut_V_V_1_data_out;
reg    polStreamOut_V_V_1_vld_in;
wire    polStreamOut_V_V_1_vld_out;
wire    polStreamOut_V_V_1_ack_out;
reg   [7:0] polStreamOut_V_V_1_payload_A;
reg   [7:0] polStreamOut_V_V_1_payload_B;
reg    polStreamOut_V_V_1_sel_rd;
reg    polStreamOut_V_V_1_sel_wr;
wire    polStreamOut_V_V_1_sel;
wire    polStreamOut_V_V_1_load_A;
wire    polStreamOut_V_V_1_load_B;
reg   [1:0] polStreamOut_V_V_1_state;
wire    polStreamOut_V_V_1_state_cmp_full;
reg   [63:0] tsStreamOut_V_V_1_data_out;
reg    tsStreamOut_V_V_1_vld_in;
wire    tsStreamOut_V_V_1_vld_out;
wire    tsStreamOut_V_V_1_ack_out;
reg   [63:0] tsStreamOut_V_V_1_payload_A;
reg   [63:0] tsStreamOut_V_V_1_payload_B;
reg    tsStreamOut_V_V_1_sel_rd;
reg    tsStreamOut_V_V_1_sel_wr;
wire    tsStreamOut_V_V_1_sel;
wire    tsStreamOut_V_V_1_load_A;
wire    tsStreamOut_V_V_1_load_B;
reg   [1:0] tsStreamOut_V_V_1_state;
wire    tsStreamOut_V_V_1_state_cmp_full;
reg   [15:0] custDataStreamOut_V_V_1_data_in;
reg   [15:0] custDataStreamOut_V_V_1_data_out;
reg    custDataStreamOut_V_V_1_vld_in;
wire    custDataStreamOut_V_V_1_vld_out;
wire    custDataStreamOut_V_V_1_ack_out;
reg   [15:0] custDataStreamOut_V_V_1_payload_A;
reg   [15:0] custDataStreamOut_V_V_1_payload_B;
reg    custDataStreamOut_V_V_1_sel_rd;
reg    custDataStreamOut_V_V_1_sel_wr;
wire    custDataStreamOut_V_V_1_sel;
wire    custDataStreamOut_V_V_1_load_A;
wire    custDataStreamOut_V_V_1_load_B;
reg   [1:0] custDataStreamOut_V_V_1_state;
wire    custDataStreamOut_V_V_1_state_cmp_full;
reg    xStreamIn_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg    yStreamIn_V_V_TDATA_blk_n;
reg    tsStreamIn_V_V_TDATA_blk_n;
reg    polStreamIn_V_V_TDATA_blk_n;
reg    isFinalCornerStream_V_V_TDATA_blk_n;
reg    xStreamOut_V_V_TDATA_blk_n;
reg    yStreamOut_V_V_TDATA_blk_n;
reg    polStreamOut_V_V_TDATA_blk_n;
reg    tsStreamOut_V_V_TDATA_blk_n;
reg    custDataStreamOut_V_V_TDATA_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] tmp_V_4_cast46_fu_145_p1;
wire   [15:0] tmp_V_5_cast49_fu_150_p1;
wire   [7:0] tmp_V_4_cast_fu_163_p1;
wire   [15:0] tmp_V_5_cast_fu_168_p1;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] tmp_V_3_fu_137_p1;
wire   [0:0] tmp_V_4_fu_141_p1;
wire   [0:0] tmp_V_8_fu_155_p1;
wire   [0:0] tmp_V_9_fu_159_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 xStreamIn_V_V_0_sel_rd = 1'b0;
#0 xStreamIn_V_V_0_sel_wr = 1'b0;
#0 xStreamIn_V_V_0_state = 2'd0;
#0 yStreamIn_V_V_0_sel_rd = 1'b0;
#0 yStreamIn_V_V_0_sel_wr = 1'b0;
#0 yStreamIn_V_V_0_state = 2'd0;
#0 tsStreamIn_V_V_0_sel_rd = 1'b0;
#0 tsStreamIn_V_V_0_sel_wr = 1'b0;
#0 tsStreamIn_V_V_0_state = 2'd0;
#0 polStreamIn_V_V_0_sel_rd = 1'b0;
#0 polStreamIn_V_V_0_sel_wr = 1'b0;
#0 polStreamIn_V_V_0_state = 2'd0;
#0 isFinalCornerStream_V_V_0_sel_rd = 1'b0;
#0 isFinalCornerStream_V_V_0_sel_wr = 1'b0;
#0 isFinalCornerStream_V_V_0_state = 2'd0;
#0 xStreamOut_V_V_1_sel_rd = 1'b0;
#0 xStreamOut_V_V_1_sel_wr = 1'b0;
#0 xStreamOut_V_V_1_state = 2'd0;
#0 yStreamOut_V_V_1_sel_rd = 1'b0;
#0 yStreamOut_V_V_1_sel_wr = 1'b0;
#0 yStreamOut_V_V_1_state = 2'd0;
#0 polStreamOut_V_V_1_sel_rd = 1'b0;
#0 polStreamOut_V_V_1_sel_wr = 1'b0;
#0 polStreamOut_V_V_1_state = 2'd0;
#0 tsStreamOut_V_V_1_sel_rd = 1'b0;
#0 tsStreamOut_V_V_1_sel_wr = 1'b0;
#0 tsStreamOut_V_V_1_state = 2'd0;
#0 custDataStreamOut_V_V_1_sel_rd = 1'b0;
#0 custDataStreamOut_V_V_1_sel_wr = 1'b0;
#0 custDataStreamOut_V_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((custDataStreamOut_V_V_1_ack_out == 1'b1) & (custDataStreamOut_V_V_1_vld_out == 1'b1))) begin
            custDataStreamOut_V_V_1_sel_rd <= ~custDataStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((custDataStreamOut_V_V_1_ack_in == 1'b1) & (custDataStreamOut_V_V_1_vld_in == 1'b1))) begin
            custDataStreamOut_V_V_1_sel_wr <= ~custDataStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((custDataStreamOut_V_V_1_vld_in == 1'b0) & (custDataStreamOut_V_V_1_state == 2'd2)) | ((custDataStreamOut_V_V_1_vld_in == 1'b0) & (custDataStreamOut_V_V_1_ack_out == 1'b1) & (custDataStreamOut_V_V_1_state == 2'd3)))) begin
            custDataStreamOut_V_V_1_state <= 2'd2;
        end else if ((((custDataStreamOut_V_V_1_ack_out == 1'b0) & (custDataStreamOut_V_V_1_state == 2'd1)) | ((custDataStreamOut_V_V_1_ack_out == 1'b0) & (custDataStreamOut_V_V_1_vld_in == 1'b1) & (custDataStreamOut_V_V_1_state == 2'd3)))) begin
            custDataStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((custDataStreamOut_V_V_1_vld_in == 1'b0) & (custDataStreamOut_V_V_1_ack_out == 1'b1)) & ~((custDataStreamOut_V_V_1_ack_out == 1'b0) & (custDataStreamOut_V_V_1_vld_in == 1'b1)) & (custDataStreamOut_V_V_1_state == 2'd3)) | ((custDataStreamOut_V_V_1_ack_out == 1'b1) & (custDataStreamOut_V_V_1_state == 2'd1)) | ((custDataStreamOut_V_V_1_vld_in == 1'b1) & (custDataStreamOut_V_V_1_state == 2'd2)))) begin
            custDataStreamOut_V_V_1_state <= 2'd3;
        end else begin
            custDataStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        isFinalCornerStream_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((isFinalCornerStream_V_V_0_vld_out == 1'b1) & (isFinalCornerStream_V_V_0_ack_out == 1'b1))) begin
            isFinalCornerStream_V_V_0_sel_rd <= ~isFinalCornerStream_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        isFinalCornerStream_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((isFinalCornerStream_V_V_0_ack_in == 1'b1) & (isFinalCornerStream_V_V_0_vld_in == 1'b1))) begin
            isFinalCornerStream_V_V_0_sel_wr <= ~isFinalCornerStream_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        isFinalCornerStream_V_V_0_state <= 2'd0;
    end else begin
        if ((((isFinalCornerStream_V_V_0_vld_in == 1'b0) & (isFinalCornerStream_V_V_0_state == 2'd2)) | ((isFinalCornerStream_V_V_0_vld_in == 1'b0) & (isFinalCornerStream_V_V_0_ack_out == 1'b1) & (isFinalCornerStream_V_V_0_state == 2'd3)))) begin
            isFinalCornerStream_V_V_0_state <= 2'd2;
        end else if ((((isFinalCornerStream_V_V_0_ack_out == 1'b0) & (isFinalCornerStream_V_V_0_state == 2'd1)) | ((isFinalCornerStream_V_V_0_ack_out == 1'b0) & (isFinalCornerStream_V_V_0_vld_in == 1'b1) & (isFinalCornerStream_V_V_0_state == 2'd3)))) begin
            isFinalCornerStream_V_V_0_state <= 2'd1;
        end else if (((~((isFinalCornerStream_V_V_0_vld_in == 1'b0) & (isFinalCornerStream_V_V_0_ack_out == 1'b1)) & ~((isFinalCornerStream_V_V_0_ack_out == 1'b0) & (isFinalCornerStream_V_V_0_vld_in == 1'b1)) & (isFinalCornerStream_V_V_0_state == 2'd3)) | ((isFinalCornerStream_V_V_0_ack_out == 1'b1) & (isFinalCornerStream_V_V_0_state == 2'd1)) | ((isFinalCornerStream_V_V_0_vld_in == 1'b1) & (isFinalCornerStream_V_V_0_state == 2'd2)))) begin
            isFinalCornerStream_V_V_0_state <= 2'd3;
        end else begin
            isFinalCornerStream_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_vld_out == 1'b1) & (polStreamIn_V_V_0_ack_out == 1'b1))) begin
            polStreamIn_V_V_0_sel_rd <= ~polStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_ack_in == 1'b1) & (polStreamIn_V_V_0_vld_in == 1'b1))) begin
            polStreamIn_V_V_0_sel_wr <= ~polStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_state == 2'd2)) | ((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1) & (polStreamIn_V_V_0_state == 2'd3)))) begin
            polStreamIn_V_V_0_state <= 2'd2;
        end else if ((((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_state == 2'd1)) | ((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1) & (polStreamIn_V_V_0_state == 2'd3)))) begin
            polStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1)) & ~((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1)) & (polStreamIn_V_V_0_state == 2'd3)) | ((polStreamIn_V_V_0_ack_out == 1'b1) & (polStreamIn_V_V_0_state == 2'd1)) | ((polStreamIn_V_V_0_vld_in == 1'b1) & (polStreamIn_V_V_0_state == 2'd2)))) begin
            polStreamIn_V_V_0_state <= 2'd3;
        end else begin
            polStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_vld_out == 1'b1))) begin
            polStreamOut_V_V_1_sel_rd <= ~polStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_ack_in == 1'b1) & (polStreamOut_V_V_1_vld_in == 1'b1))) begin
            polStreamOut_V_V_1_sel_wr <= ~polStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_state == 2'd2)) | ((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_state == 2'd3)))) begin
            polStreamOut_V_V_1_state <= 2'd2;
        end else if ((((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_state == 2'd1)) | ((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_vld_in == 1'b1) & (polStreamOut_V_V_1_state == 2'd3)))) begin
            polStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_ack_out == 1'b1)) & ~((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_vld_in == 1'b1)) & (polStreamOut_V_V_1_state == 2'd3)) | ((polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_state == 2'd1)) | ((polStreamOut_V_V_1_vld_in == 1'b1) & (polStreamOut_V_V_1_state == 2'd2)))) begin
            polStreamOut_V_V_1_state <= 2'd3;
        end else begin
            polStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_vld_out == 1'b1) & (tsStreamIn_V_V_0_ack_out == 1'b1))) begin
            tsStreamIn_V_V_0_sel_rd <= ~tsStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_ack_in == 1'b1) & (tsStreamIn_V_V_0_vld_in == 1'b1))) begin
            tsStreamIn_V_V_0_sel_wr <= ~tsStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_state == 2'd2)) | ((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1) & (tsStreamIn_V_V_0_state == 2'd3)))) begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end else if ((((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_state == 2'd1)) | ((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1) & (tsStreamIn_V_V_0_state == 2'd3)))) begin
            tsStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1)) & ~((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1)) & (tsStreamIn_V_V_0_state == 2'd3)) | ((tsStreamIn_V_V_0_ack_out == 1'b1) & (tsStreamIn_V_V_0_state == 2'd1)) | ((tsStreamIn_V_V_0_vld_in == 1'b1) & (tsStreamIn_V_V_0_state == 2'd2)))) begin
            tsStreamIn_V_V_0_state <= 2'd3;
        end else begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_vld_out == 1'b1))) begin
            tsStreamOut_V_V_1_sel_rd <= ~tsStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_ack_in == 1'b1) & (tsStreamOut_V_V_1_vld_in == 1'b1))) begin
            tsStreamOut_V_V_1_sel_wr <= ~tsStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_state == 2'd2)) | ((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_state == 2'd3)))) begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end else if ((((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_state == 2'd1)) | ((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_vld_in == 1'b1) & (tsStreamOut_V_V_1_state == 2'd3)))) begin
            tsStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_ack_out == 1'b1)) & ~((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_vld_in == 1'b1)) & (tsStreamOut_V_V_1_state == 2'd3)) | ((tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_state == 2'd1)) | ((tsStreamOut_V_V_1_vld_in == 1'b1) & (tsStreamOut_V_V_1_state == 2'd2)))) begin
            tsStreamOut_V_V_1_state <= 2'd3;
        end else begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_vld_out == 1'b1) & (xStreamIn_V_V_0_ack_out == 1'b1))) begin
            xStreamIn_V_V_0_sel_rd <= ~xStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_ack_in == 1'b1) & (xStreamIn_V_V_0_vld_in == 1'b1))) begin
            xStreamIn_V_V_0_sel_wr <= ~xStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_state == 2'd2)) | ((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1) & (xStreamIn_V_V_0_state == 2'd3)))) begin
            xStreamIn_V_V_0_state <= 2'd2;
        end else if ((((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_state == 2'd1)) | ((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1) & (xStreamIn_V_V_0_state == 2'd3)))) begin
            xStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1)) & ~((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1)) & (xStreamIn_V_V_0_state == 2'd3)) | ((xStreamIn_V_V_0_ack_out == 1'b1) & (xStreamIn_V_V_0_state == 2'd1)) | ((xStreamIn_V_V_0_vld_in == 1'b1) & (xStreamIn_V_V_0_state == 2'd2)))) begin
            xStreamIn_V_V_0_state <= 2'd3;
        end else begin
            xStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_vld_out == 1'b1))) begin
            xStreamOut_V_V_1_sel_rd <= ~xStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_in == 1'b1) & (xStreamOut_V_V_1_vld_in == 1'b1))) begin
            xStreamOut_V_V_1_sel_wr <= ~xStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_state == 2'd2)) | ((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_state == 2'd3)))) begin
            xStreamOut_V_V_1_state <= 2'd2;
        end else if ((((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_state == 2'd1)) | ((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_vld_in == 1'b1) & (xStreamOut_V_V_1_state == 2'd3)))) begin
            xStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_ack_out == 1'b1)) & ~((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_vld_in == 1'b1)) & (xStreamOut_V_V_1_state == 2'd3)) | ((xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_state == 2'd1)) | ((xStreamOut_V_V_1_vld_in == 1'b1) & (xStreamOut_V_V_1_state == 2'd2)))) begin
            xStreamOut_V_V_1_state <= 2'd3;
        end else begin
            xStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_vld_out == 1'b1) & (yStreamIn_V_V_0_ack_out == 1'b1))) begin
            yStreamIn_V_V_0_sel_rd <= ~yStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_ack_in == 1'b1) & (yStreamIn_V_V_0_vld_in == 1'b1))) begin
            yStreamIn_V_V_0_sel_wr <= ~yStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_state == 2'd2)) | ((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1) & (yStreamIn_V_V_0_state == 2'd3)))) begin
            yStreamIn_V_V_0_state <= 2'd2;
        end else if ((((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_state == 2'd1)) | ((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1) & (yStreamIn_V_V_0_state == 2'd3)))) begin
            yStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1)) & ~((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1)) & (yStreamIn_V_V_0_state == 2'd3)) | ((yStreamIn_V_V_0_ack_out == 1'b1) & (yStreamIn_V_V_0_state == 2'd1)) | ((yStreamIn_V_V_0_vld_in == 1'b1) & (yStreamIn_V_V_0_state == 2'd2)))) begin
            yStreamIn_V_V_0_state <= 2'd3;
        end else begin
            yStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_vld_out == 1'b1))) begin
            yStreamOut_V_V_1_sel_rd <= ~yStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_in == 1'b1) & (yStreamOut_V_V_1_vld_in == 1'b1))) begin
            yStreamOut_V_V_1_sel_wr <= ~yStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_state == 2'd2)) | ((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_state == 2'd3)))) begin
            yStreamOut_V_V_1_state <= 2'd2;
        end else if ((((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_state == 2'd1)) | ((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_vld_in == 1'b1) & (yStreamOut_V_V_1_state == 2'd3)))) begin
            yStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_ack_out == 1'b1)) & ~((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_vld_in == 1'b1)) & (yStreamOut_V_V_1_state == 2'd3)) | ((yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_state == 2'd1)) | ((yStreamOut_V_V_1_vld_in == 1'b1) & (yStreamOut_V_V_1_state == 2'd2)))) begin
            yStreamOut_V_V_1_state <= 2'd3;
        end else begin
            yStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut_V_V_1_load_A == 1'b1)) begin
        custDataStreamOut_V_V_1_payload_A <= custDataStreamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut_V_V_1_load_B == 1'b1)) begin
        custDataStreamOut_V_V_1_payload_B <= custDataStreamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((isFinalCornerStream_V_V_0_load_A == 1'b1)) begin
        isFinalCornerStream_V_V_0_payload_A <= isFinalCornerStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((isFinalCornerStream_V_V_0_load_B == 1'b1)) begin
        isFinalCornerStream_V_V_0_payload_B <= isFinalCornerStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_A == 1'b1)) begin
        polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_B == 1'b1)) begin
        polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_A == 1'b1)) begin
        polStreamOut_V_V_1_payload_A <= polStreamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_B == 1'b1)) begin
        polStreamOut_V_V_1_payload_B <= polStreamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_A == 1'b1)) begin
        tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_B == 1'b1)) begin
        tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_A == 1'b1)) begin
        tsStreamOut_V_V_1_payload_A <= tsStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_B == 1'b1)) begin
        tsStreamOut_V_V_1_payload_B <= tsStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_A == 1'b1)) begin
        xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_B == 1'b1)) begin
        xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_A == 1'b1)) begin
        xStreamOut_V_V_1_payload_A <= xStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_B == 1'b1)) begin
        xStreamOut_V_V_1_payload_B <= xStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_A == 1'b1)) begin
        yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_B == 1'b1)) begin
        yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_A == 1'b1)) begin
        yStreamOut_V_V_1_payload_A <= yStreamIn_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_B == 1'b1)) begin
        yStreamOut_V_V_1_payload_B <= yStreamIn_V_V_0_data_out;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        custDataStreamOut_V_V_1_data_in = tmp_V_5_cast_fu_168_p1;
    end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        custDataStreamOut_V_V_1_data_in = tmp_V_5_cast49_fu_150_p1;
    end else begin
        custDataStreamOut_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((custDataStreamOut_V_V_1_sel == 1'b1)) begin
        custDataStreamOut_V_V_1_data_out = custDataStreamOut_V_V_1_payload_B;
    end else begin
        custDataStreamOut_V_V_1_data_out = custDataStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        custDataStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        custDataStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        custDataStreamOut_V_V_TDATA_blk_n = custDataStreamOut_V_V_1_state[1'd1];
    end else begin
        custDataStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        isFinalCornerStream_V_V_0_ack_out = 1'b1;
    end else begin
        isFinalCornerStream_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((isFinalCornerStream_V_V_0_sel == 1'b1)) begin
        isFinalCornerStream_V_V_0_data_out = isFinalCornerStream_V_V_0_payload_B;
    end else begin
        isFinalCornerStream_V_V_0_data_out = isFinalCornerStream_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        isFinalCornerStream_V_V_TDATA_blk_n = isFinalCornerStream_V_V_0_state[1'd0];
    end else begin
        isFinalCornerStream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        polStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        polStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamIn_V_V_0_sel == 1'b1)) begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_B;
    end else begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        polStreamIn_V_V_TDATA_blk_n = polStreamIn_V_V_0_state[1'd0];
    end else begin
        polStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polStreamOut_V_V_1_data_in = tmp_V_4_cast_fu_163_p1;
    end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        polStreamOut_V_V_1_data_in = tmp_V_4_cast46_fu_145_p1;
    end else begin
        polStreamOut_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((polStreamOut_V_V_1_sel == 1'b1)) begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_B;
    end else begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        polStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        polStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        polStreamOut_V_V_TDATA_blk_n = polStreamOut_V_V_1_state[1'd1];
    end else begin
        polStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tsStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        tsStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamIn_V_V_0_sel == 1'b1)) begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_B;
    end else begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tsStreamIn_V_V_TDATA_blk_n = tsStreamIn_V_V_0_state[1'd0];
    end else begin
        tsStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tsStreamOut_V_V_1_sel == 1'b1)) begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_B;
    end else begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tsStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        tsStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tsStreamOut_V_V_TDATA_blk_n = tsStreamOut_V_V_1_state[1'd1];
    end else begin
        tsStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        xStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamIn_V_V_0_sel == 1'b1)) begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_B;
    end else begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xStreamIn_V_V_TDATA_blk_n = xStreamIn_V_V_0_state[1'd0];
    end else begin
        xStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((xStreamOut_V_V_1_sel == 1'b1)) begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_B;
    end else begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        xStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        xStreamOut_V_V_TDATA_blk_n = xStreamOut_V_V_1_state[1'd1];
    end else begin
        xStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        yStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        yStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamIn_V_V_0_sel == 1'b1)) begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_B;
    end else begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        yStreamIn_V_V_TDATA_blk_n = yStreamIn_V_V_0_state[1'd0];
    end else begin
        yStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((yStreamOut_V_V_1_sel == 1'b1)) begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_B;
    end else begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        yStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        yStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        yStreamOut_V_V_TDATA_blk_n = yStreamOut_V_V_1_state[1'd1];
    end else begin
        yStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0))) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state5_io))) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state5_io))) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state6_io))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state6_io))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((isFinalCornerStream_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = ((custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign custDataStreamOut_V_V_1_ack_in = custDataStreamOut_V_V_1_state[1'd1];

assign custDataStreamOut_V_V_1_ack_out = custDataStreamOut_V_V_TREADY;

assign custDataStreamOut_V_V_1_load_A = (~custDataStreamOut_V_V_1_sel_wr & custDataStreamOut_V_V_1_state_cmp_full);

assign custDataStreamOut_V_V_1_load_B = (custDataStreamOut_V_V_1_state_cmp_full & custDataStreamOut_V_V_1_sel_wr);

assign custDataStreamOut_V_V_1_sel = custDataStreamOut_V_V_1_sel_rd;

assign custDataStreamOut_V_V_1_state_cmp_full = ((custDataStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign custDataStreamOut_V_V_1_vld_out = custDataStreamOut_V_V_1_state[1'd0];

assign custDataStreamOut_V_V_TDATA = custDataStreamOut_V_V_1_data_out;

assign custDataStreamOut_V_V_TVALID = custDataStreamOut_V_V_1_state[1'd0];

assign isFinalCornerStream_V_V_0_ack_in = isFinalCornerStream_V_V_0_state[1'd1];

assign isFinalCornerStream_V_V_0_load_A = (isFinalCornerStream_V_V_0_state_cmp_full & ~isFinalCornerStream_V_V_0_sel_wr);

assign isFinalCornerStream_V_V_0_load_B = (isFinalCornerStream_V_V_0_state_cmp_full & isFinalCornerStream_V_V_0_sel_wr);

assign isFinalCornerStream_V_V_0_sel = isFinalCornerStream_V_V_0_sel_rd;

assign isFinalCornerStream_V_V_0_state_cmp_full = ((isFinalCornerStream_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign isFinalCornerStream_V_V_0_vld_in = isFinalCornerStream_V_V_TVALID;

assign isFinalCornerStream_V_V_0_vld_out = isFinalCornerStream_V_V_0_state[1'd0];

assign isFinalCornerStream_V_V_TREADY = isFinalCornerStream_V_V_0_state[1'd1];

assign polStreamIn_V_V_0_ack_in = polStreamIn_V_V_0_state[1'd1];

assign polStreamIn_V_V_0_load_A = (polStreamIn_V_V_0_state_cmp_full & ~polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_load_B = (polStreamIn_V_V_0_state_cmp_full & polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_sel = polStreamIn_V_V_0_sel_rd;

assign polStreamIn_V_V_0_state_cmp_full = ((polStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamIn_V_V_0_vld_in = polStreamIn_V_V_TVALID;

assign polStreamIn_V_V_0_vld_out = polStreamIn_V_V_0_state[1'd0];

assign polStreamIn_V_V_TREADY = polStreamIn_V_V_0_state[1'd1];

assign polStreamOut_V_V_1_ack_in = polStreamOut_V_V_1_state[1'd1];

assign polStreamOut_V_V_1_ack_out = polStreamOut_V_V_TREADY;

assign polStreamOut_V_V_1_load_A = (polStreamOut_V_V_1_state_cmp_full & ~polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_load_B = (polStreamOut_V_V_1_state_cmp_full & polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_sel = polStreamOut_V_V_1_sel_rd;

assign polStreamOut_V_V_1_state_cmp_full = ((polStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamOut_V_V_1_vld_out = polStreamOut_V_V_1_state[1'd0];

assign polStreamOut_V_V_TDATA = polStreamOut_V_V_1_data_out;

assign polStreamOut_V_V_TVALID = polStreamOut_V_V_1_state[1'd0];

assign tmp_V_3_fu_137_p1 = polStreamIn_V_V_0_data_out[0:0];

assign tmp_V_4_cast46_fu_145_p1 = tmp_V_3_fu_137_p1;

assign tmp_V_4_cast_fu_163_p1 = tmp_V_8_fu_155_p1;

assign tmp_V_4_fu_141_p1 = isFinalCornerStream_V_V_0_data_out[0:0];

assign tmp_V_5_cast49_fu_150_p1 = tmp_V_4_fu_141_p1;

assign tmp_V_5_cast_fu_168_p1 = tmp_V_9_fu_159_p1;

assign tmp_V_8_fu_155_p1 = polStreamIn_V_V_0_data_out[0:0];

assign tmp_V_9_fu_159_p1 = isFinalCornerStream_V_V_0_data_out[0:0];

assign tsStreamIn_V_V_0_ack_in = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamIn_V_V_0_load_A = (tsStreamIn_V_V_0_state_cmp_full & ~tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_load_B = (tsStreamIn_V_V_0_state_cmp_full & tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_sel = tsStreamIn_V_V_0_sel_rd;

assign tsStreamIn_V_V_0_state_cmp_full = ((tsStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamIn_V_V_0_vld_in = tsStreamIn_V_V_TVALID;

assign tsStreamIn_V_V_0_vld_out = tsStreamIn_V_V_0_state[1'd0];

assign tsStreamIn_V_V_TREADY = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamOut_V_V_1_ack_in = tsStreamOut_V_V_1_state[1'd1];

assign tsStreamOut_V_V_1_ack_out = tsStreamOut_V_V_TREADY;

assign tsStreamOut_V_V_1_load_A = (tsStreamOut_V_V_1_state_cmp_full & ~tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_load_B = (tsStreamOut_V_V_1_state_cmp_full & tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_sel = tsStreamOut_V_V_1_sel_rd;

assign tsStreamOut_V_V_1_state_cmp_full = ((tsStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamOut_V_V_1_vld_out = tsStreamOut_V_V_1_state[1'd0];

assign tsStreamOut_V_V_TDATA = tsStreamOut_V_V_1_data_out;

assign tsStreamOut_V_V_TVALID = tsStreamOut_V_V_1_state[1'd0];

assign xStreamIn_V_V_0_ack_in = xStreamIn_V_V_0_state[1'd1];

assign xStreamIn_V_V_0_load_A = (xStreamIn_V_V_0_state_cmp_full & ~xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_load_B = (xStreamIn_V_V_0_state_cmp_full & xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_sel = xStreamIn_V_V_0_sel_rd;

assign xStreamIn_V_V_0_state_cmp_full = ((xStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamIn_V_V_0_vld_in = xStreamIn_V_V_TVALID;

assign xStreamIn_V_V_0_vld_out = xStreamIn_V_V_0_state[1'd0];

assign xStreamIn_V_V_TREADY = xStreamIn_V_V_0_state[1'd1];

assign xStreamOut_V_V_1_ack_in = xStreamOut_V_V_1_state[1'd1];

assign xStreamOut_V_V_1_ack_out = xStreamOut_V_V_TREADY;

assign xStreamOut_V_V_1_load_A = (xStreamOut_V_V_1_state_cmp_full & ~xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_load_B = (xStreamOut_V_V_1_state_cmp_full & xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_sel = xStreamOut_V_V_1_sel_rd;

assign xStreamOut_V_V_1_state_cmp_full = ((xStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamOut_V_V_1_vld_out = xStreamOut_V_V_1_state[1'd0];

assign xStreamOut_V_V_TDATA = xStreamOut_V_V_1_data_out;

assign xStreamOut_V_V_TVALID = xStreamOut_V_V_1_state[1'd0];

assign yStreamIn_V_V_0_ack_in = yStreamIn_V_V_0_state[1'd1];

assign yStreamIn_V_V_0_load_A = (yStreamIn_V_V_0_state_cmp_full & ~yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_load_B = (yStreamIn_V_V_0_state_cmp_full & yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_sel = yStreamIn_V_V_0_sel_rd;

assign yStreamIn_V_V_0_state_cmp_full = ((yStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamIn_V_V_0_vld_in = yStreamIn_V_V_TVALID;

assign yStreamIn_V_V_0_vld_out = yStreamIn_V_V_0_state[1'd0];

assign yStreamIn_V_V_TREADY = yStreamIn_V_V_0_state[1'd1];

assign yStreamOut_V_V_1_ack_in = yStreamOut_V_V_1_state[1'd1];

assign yStreamOut_V_V_1_ack_out = yStreamOut_V_V_TREADY;

assign yStreamOut_V_V_1_load_A = (yStreamOut_V_V_1_state_cmp_full & ~yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_load_B = (yStreamOut_V_V_1_state_cmp_full & yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_sel = yStreamOut_V_V_1_sel_rd;

assign yStreamOut_V_V_1_state_cmp_full = ((yStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamOut_V_V_1_vld_out = yStreamOut_V_V_1_state[1'd0];

assign yStreamOut_V_V_TDATA = yStreamOut_V_V_1_data_out;

assign yStreamOut_V_V_TVALID = yStreamOut_V_V_1_state[1'd0];

endmodule //EFAST_output
