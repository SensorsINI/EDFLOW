-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity EFAST_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    polStreamOut_V_V_TREADY : IN STD_LOGIC;
    custDataStreamOut_V_V_TREADY : IN STD_LOGIC;
    xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    xStreamIn_V_V_TVALID : IN STD_LOGIC;
    xStreamIn_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn_V_V_TVALID : IN STD_LOGIC;
    yStreamIn_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    tsStreamIn_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    polStreamIn_V_V_TVALID : IN STD_LOGIC;
    polStreamIn_V_V_TREADY : OUT STD_LOGIC;
    isFinalCornerStream_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    isFinalCornerStream_V_V_TVALID : IN STD_LOGIC;
    isFinalCornerStream_V_V_TREADY : OUT STD_LOGIC;
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    polStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
    custDataStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    custDataStreamOut_V_V_TVALID : OUT STD_LOGIC );
end;


architecture behav of EFAST_output is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "EFAST_output,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=5,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=510,HLS_SYN_LUT=543}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal xStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal yStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal polStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_vld_out : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal xStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal custDataStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal xStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal xStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel : STD_LOGIC;
    signal xStreamIn_V_V_0_load_A : STD_LOGIC;
    signal xStreamIn_V_V_0_load_B : STD_LOGIC;
    signal xStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal yStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal yStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel : STD_LOGIC;
    signal yStreamIn_V_V_0_load_A : STD_LOGIC;
    signal yStreamIn_V_V_0_load_B : STD_LOGIC;
    signal yStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal tsStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_A : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_B : STD_LOGIC;
    signal tsStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal polStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal polStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel : STD_LOGIC;
    signal polStreamIn_V_V_0_load_A : STD_LOGIC;
    signal polStreamIn_V_V_0_load_B : STD_LOGIC;
    signal polStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal isFinalCornerStream_V_V_0_vld_in : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_ack_in : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_ack_out : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal isFinalCornerStream_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal isFinalCornerStream_V_V_0_sel_rd : STD_LOGIC := '0';
    signal isFinalCornerStream_V_V_0_sel_wr : STD_LOGIC := '0';
    signal isFinalCornerStream_V_V_0_sel : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_load_A : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_load_B : STD_LOGIC;
    signal isFinalCornerStream_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal isFinalCornerStream_V_V_0_state_cmp_full : STD_LOGIC;
    signal xStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel : STD_LOGIC;
    signal xStreamOut_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel : STD_LOGIC;
    signal yStreamOut_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal polStreamOut_V_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal polStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal polStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel : STD_LOGIC;
    signal polStreamOut_V_V_1_load_A : STD_LOGIC;
    signal polStreamOut_V_V_1_load_B : STD_LOGIC;
    signal polStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal custDataStreamOut_V_V_1_data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal custDataStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal custDataStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal custDataStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal custDataStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal custDataStreamOut_V_V_1_sel : STD_LOGIC;
    signal custDataStreamOut_V_V_1_load_A : STD_LOGIC;
    signal custDataStreamOut_V_V_1_load_B : STD_LOGIC;
    signal custDataStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal custDataStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal xStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal yStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal isFinalCornerStream_V_V_TDATA_blk_n : STD_LOGIC;
    signal xStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal yStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal custDataStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_V_4_cast46_fu_145_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_5_cast49_fu_150_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_cast_fu_163_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_5_cast_fu_168_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal tmp_V_3_fu_137_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_141_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_8_fu_155_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_9_fu_159_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((custDataStreamOut_V_V_1_ack_out = ap_const_logic_1) and (custDataStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        custDataStreamOut_V_V_1_sel_rd <= not(custDataStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((custDataStreamOut_V_V_1_ack_in = ap_const_logic_1) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        custDataStreamOut_V_V_1_sel_wr <= not(custDataStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((custDataStreamOut_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut_V_V_1_state = ap_const_lv2_2)) or ((custDataStreamOut_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1) and (custDataStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((custDataStreamOut_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut_V_V_1_state = ap_const_lv2_1)) or ((custDataStreamOut_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1) and (custDataStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((custDataStreamOut_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((custDataStreamOut_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (custDataStreamOut_V_V_1_state = ap_const_lv2_3)) or ((custDataStreamOut_V_V_1_ack_out = ap_const_logic_1) and (custDataStreamOut_V_V_1_state = ap_const_lv2_1)) or ((custDataStreamOut_V_V_1_vld_in = ap_const_logic_1) and (custDataStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    isFinalCornerStream_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                isFinalCornerStream_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_1) and (isFinalCornerStream_V_V_0_ack_out = ap_const_logic_1))) then 
                                        isFinalCornerStream_V_V_0_sel_rd <= not(isFinalCornerStream_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    isFinalCornerStream_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                isFinalCornerStream_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((isFinalCornerStream_V_V_0_ack_in = ap_const_logic_1) and (isFinalCornerStream_V_V_0_vld_in = ap_const_logic_1))) then 
                                        isFinalCornerStream_V_V_0_sel_wr <= not(isFinalCornerStream_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    isFinalCornerStream_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                isFinalCornerStream_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((isFinalCornerStream_V_V_0_vld_in = ap_const_logic_0) and (isFinalCornerStream_V_V_0_state = ap_const_lv2_2)) or ((isFinalCornerStream_V_V_0_vld_in = ap_const_logic_0) and (isFinalCornerStream_V_V_0_ack_out = ap_const_logic_1) and (isFinalCornerStream_V_V_0_state = ap_const_lv2_3)))) then 
                    isFinalCornerStream_V_V_0_state <= ap_const_lv2_2;
                elsif ((((isFinalCornerStream_V_V_0_ack_out = ap_const_logic_0) and (isFinalCornerStream_V_V_0_state = ap_const_lv2_1)) or ((isFinalCornerStream_V_V_0_ack_out = ap_const_logic_0) and (isFinalCornerStream_V_V_0_vld_in = ap_const_logic_1) and (isFinalCornerStream_V_V_0_state = ap_const_lv2_3)))) then 
                    isFinalCornerStream_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((isFinalCornerStream_V_V_0_vld_in = ap_const_logic_0) and (isFinalCornerStream_V_V_0_ack_out = ap_const_logic_1))) and not(((isFinalCornerStream_V_V_0_ack_out = ap_const_logic_0) and (isFinalCornerStream_V_V_0_vld_in = ap_const_logic_1))) and (isFinalCornerStream_V_V_0_state = ap_const_lv2_3)) or ((isFinalCornerStream_V_V_0_ack_out = ap_const_logic_1) and (isFinalCornerStream_V_V_0_state = ap_const_lv2_1)) or ((isFinalCornerStream_V_V_0_vld_in = ap_const_logic_1) and (isFinalCornerStream_V_V_0_state = ap_const_lv2_2)))) then 
                    isFinalCornerStream_V_V_0_state <= ap_const_lv2_3;
                else 
                    isFinalCornerStream_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_vld_out = ap_const_logic_1) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_rd <= not(polStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_ack_in = ap_const_logic_1) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_wr <= not(polStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_2)) or ((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (polStreamIn_V_V_0_state = ap_const_lv2_3)) or ((polStreamIn_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_rd <= not(polStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_in = ap_const_logic_1) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_wr <= not(polStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_state = ap_const_lv2_2)) or ((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_state = ap_const_lv2_1)) or ((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (polStreamOut_V_V_1_state = ap_const_lv2_3)) or ((polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_1)) or ((polStreamOut_V_V_1_vld_in = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_vld_out = ap_const_logic_1) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_rd <= not(tsStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_ack_in = ap_const_logic_1) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_wr <= not(tsStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_2)) or ((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)) or ((tsStreamIn_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_rd <= not(tsStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_in = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_wr <= not(tsStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_state = ap_const_lv2_2)) or ((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_vld_out = ap_const_logic_1) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_rd <= not(xStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_ack_in = ap_const_logic_1) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_wr <= not(xStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_2)) or ((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (xStreamIn_V_V_0_state = ap_const_lv2_3)) or ((xStreamIn_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_rd <= not(xStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_in = ap_const_logic_1) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_wr <= not(xStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_state = ap_const_lv2_2)) or ((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (xStreamOut_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut_V_V_1_vld_in = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_vld_out = ap_const_logic_1) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_rd <= not(yStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_ack_in = ap_const_logic_1) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_wr <= not(yStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_2)) or ((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (yStreamIn_V_V_0_state = ap_const_lv2_3)) or ((yStreamIn_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn_V_V_0_state = ap_const_lv2_2)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_rd <= not(yStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_in = ap_const_logic_1) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_wr <= not(yStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_state = ap_const_lv2_2)) or ((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut_V_V_1_vld_in = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                custDataStreamOut_V_V_1_payload_A <= custDataStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                custDataStreamOut_V_V_1_payload_B <= custDataStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((isFinalCornerStream_V_V_0_load_A = ap_const_logic_1)) then
                isFinalCornerStream_V_V_0_payload_A <= isFinalCornerStream_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((isFinalCornerStream_V_V_0_load_B = ap_const_logic_1)) then
                isFinalCornerStream_V_V_0_payload_B <= isFinalCornerStream_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_A <= polStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_B <= polStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_A <= tsStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_B <= tsStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_A <= xStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_B <= xStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_A <= yStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_B <= yStreamIn_V_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_reset_idle_pp0, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5_io))) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5_io))) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, ap_block_state6_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6_io))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, ap_block_state6_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6_io))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter0, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_pp0_stage3_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state4_io <= ((custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state5_io <= ((custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter1_assign_proc : process(xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, isFinalCornerStream_V_V_0_vld_out)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((isFinalCornerStream_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state6_io <= ((custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage1_iter1_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state6_pp0_stage1_iter1 <= ((custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    custDataStreamOut_V_V_1_ack_in <= custDataStreamOut_V_V_1_state(1);
    custDataStreamOut_V_V_1_ack_out <= custDataStreamOut_V_V_TREADY;

    custDataStreamOut_V_V_1_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_V_5_cast49_fu_150_p1, tmp_V_5_cast_fu_168_p1, ap_block_pp0_stage3_01001, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            custDataStreamOut_V_V_1_data_in <= tmp_V_5_cast_fu_168_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            custDataStreamOut_V_V_1_data_in <= tmp_V_5_cast49_fu_150_p1;
        else 
            custDataStreamOut_V_V_1_data_in <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    custDataStreamOut_V_V_1_data_out_assign_proc : process(custDataStreamOut_V_V_1_payload_A, custDataStreamOut_V_V_1_payload_B, custDataStreamOut_V_V_1_sel)
    begin
        if ((custDataStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            custDataStreamOut_V_V_1_data_out <= custDataStreamOut_V_V_1_payload_B;
        else 
            custDataStreamOut_V_V_1_data_out <= custDataStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    custDataStreamOut_V_V_1_load_A <= (not(custDataStreamOut_V_V_1_sel_wr) and custDataStreamOut_V_V_1_state_cmp_full);
    custDataStreamOut_V_V_1_load_B <= (custDataStreamOut_V_V_1_state_cmp_full and custDataStreamOut_V_V_1_sel_wr);
    custDataStreamOut_V_V_1_sel <= custDataStreamOut_V_V_1_sel_rd;
    custDataStreamOut_V_V_1_state_cmp_full <= '0' when (custDataStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    custDataStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            custDataStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            custDataStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    custDataStreamOut_V_V_1_vld_out <= custDataStreamOut_V_V_1_state(0);
    custDataStreamOut_V_V_TDATA <= custDataStreamOut_V_V_1_data_out;

    custDataStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, custDataStreamOut_V_V_1_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            custDataStreamOut_V_V_TDATA_blk_n <= custDataStreamOut_V_V_1_state(1);
        else 
            custDataStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    custDataStreamOut_V_V_TVALID <= custDataStreamOut_V_V_1_state(0);
    isFinalCornerStream_V_V_0_ack_in <= isFinalCornerStream_V_V_0_state(1);

    isFinalCornerStream_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            isFinalCornerStream_V_V_0_ack_out <= ap_const_logic_1;
        else 
            isFinalCornerStream_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    isFinalCornerStream_V_V_0_data_out_assign_proc : process(isFinalCornerStream_V_V_0_payload_A, isFinalCornerStream_V_V_0_payload_B, isFinalCornerStream_V_V_0_sel)
    begin
        if ((isFinalCornerStream_V_V_0_sel = ap_const_logic_1)) then 
            isFinalCornerStream_V_V_0_data_out <= isFinalCornerStream_V_V_0_payload_B;
        else 
            isFinalCornerStream_V_V_0_data_out <= isFinalCornerStream_V_V_0_payload_A;
        end if; 
    end process;

    isFinalCornerStream_V_V_0_load_A <= (isFinalCornerStream_V_V_0_state_cmp_full and not(isFinalCornerStream_V_V_0_sel_wr));
    isFinalCornerStream_V_V_0_load_B <= (isFinalCornerStream_V_V_0_state_cmp_full and isFinalCornerStream_V_V_0_sel_wr);
    isFinalCornerStream_V_V_0_sel <= isFinalCornerStream_V_V_0_sel_rd;
    isFinalCornerStream_V_V_0_state_cmp_full <= '0' when (isFinalCornerStream_V_V_0_state = ap_const_lv2_1) else '1';
    isFinalCornerStream_V_V_0_vld_in <= isFinalCornerStream_V_V_TVALID;
    isFinalCornerStream_V_V_0_vld_out <= isFinalCornerStream_V_V_0_state(0);

    isFinalCornerStream_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, isFinalCornerStream_V_V_0_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            isFinalCornerStream_V_V_TDATA_blk_n <= isFinalCornerStream_V_V_0_state(0);
        else 
            isFinalCornerStream_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    isFinalCornerStream_V_V_TREADY <= isFinalCornerStream_V_V_0_state(1);
    polStreamIn_V_V_0_ack_in <= polStreamIn_V_V_0_state(1);

    polStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    polStreamIn_V_V_0_data_out_assign_proc : process(polStreamIn_V_V_0_payload_A, polStreamIn_V_V_0_payload_B, polStreamIn_V_V_0_sel)
    begin
        if ((polStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_B;
        else 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    polStreamIn_V_V_0_load_A <= (polStreamIn_V_V_0_state_cmp_full and not(polStreamIn_V_V_0_sel_wr));
    polStreamIn_V_V_0_load_B <= (polStreamIn_V_V_0_state_cmp_full and polStreamIn_V_V_0_sel_wr);
    polStreamIn_V_V_0_sel <= polStreamIn_V_V_0_sel_rd;
    polStreamIn_V_V_0_state_cmp_full <= '0' when (polStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    polStreamIn_V_V_0_vld_in <= polStreamIn_V_V_TVALID;
    polStreamIn_V_V_0_vld_out <= polStreamIn_V_V_0_state(0);

    polStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, polStreamIn_V_V_0_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            polStreamIn_V_V_TDATA_blk_n <= polStreamIn_V_V_0_state(0);
        else 
            polStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamIn_V_V_TREADY <= polStreamIn_V_V_0_state(1);
    polStreamOut_V_V_1_ack_in <= polStreamOut_V_V_1_state(1);
    polStreamOut_V_V_1_ack_out <= polStreamOut_V_V_TREADY;

    polStreamOut_V_V_1_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_V_4_cast46_fu_145_p1, tmp_V_4_cast_fu_163_p1, ap_block_pp0_stage3_01001, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamOut_V_V_1_data_in <= tmp_V_4_cast_fu_163_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            polStreamOut_V_V_1_data_in <= tmp_V_4_cast46_fu_145_p1;
        else 
            polStreamOut_V_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    polStreamOut_V_V_1_data_out_assign_proc : process(polStreamOut_V_V_1_payload_A, polStreamOut_V_V_1_payload_B, polStreamOut_V_V_1_sel)
    begin
        if ((polStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_B;
        else 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    polStreamOut_V_V_1_load_A <= (polStreamOut_V_V_1_state_cmp_full and not(polStreamOut_V_V_1_sel_wr));
    polStreamOut_V_V_1_load_B <= (polStreamOut_V_V_1_state_cmp_full and polStreamOut_V_V_1_sel_wr);
    polStreamOut_V_V_1_sel <= polStreamOut_V_V_1_sel_rd;
    polStreamOut_V_V_1_state_cmp_full <= '0' when (polStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    polStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut_V_V_1_vld_out <= polStreamOut_V_V_1_state(0);
    polStreamOut_V_V_TDATA <= polStreamOut_V_V_1_data_out;

    polStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, polStreamOut_V_V_1_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            polStreamOut_V_V_TDATA_blk_n <= polStreamOut_V_V_1_state(1);
        else 
            polStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamOut_V_V_TVALID <= polStreamOut_V_V_1_state(0);
    tmp_V_3_fu_137_p1 <= polStreamIn_V_V_0_data_out(1 - 1 downto 0);
    tmp_V_4_cast46_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_3_fu_137_p1),8));
    tmp_V_4_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_8_fu_155_p1),8));
    tmp_V_4_fu_141_p1 <= isFinalCornerStream_V_V_0_data_out(1 - 1 downto 0);
    tmp_V_5_cast49_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_fu_141_p1),16));
    tmp_V_5_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_fu_159_p1),16));
    tmp_V_8_fu_155_p1 <= polStreamIn_V_V_0_data_out(1 - 1 downto 0);
    tmp_V_9_fu_159_p1 <= isFinalCornerStream_V_V_0_data_out(1 - 1 downto 0);
    tsStreamIn_V_V_0_ack_in <= tsStreamIn_V_V_0_state(1);

    tsStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tsStreamIn_V_V_0_data_out_assign_proc : process(tsStreamIn_V_V_0_payload_A, tsStreamIn_V_V_0_payload_B, tsStreamIn_V_V_0_sel)
    begin
        if ((tsStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_B;
        else 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    tsStreamIn_V_V_0_load_A <= (tsStreamIn_V_V_0_state_cmp_full and not(tsStreamIn_V_V_0_sel_wr));
    tsStreamIn_V_V_0_load_B <= (tsStreamIn_V_V_0_state_cmp_full and tsStreamIn_V_V_0_sel_wr);
    tsStreamIn_V_V_0_sel <= tsStreamIn_V_V_0_sel_rd;
    tsStreamIn_V_V_0_state_cmp_full <= '0' when (tsStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    tsStreamIn_V_V_0_vld_in <= tsStreamIn_V_V_TVALID;
    tsStreamIn_V_V_0_vld_out <= tsStreamIn_V_V_0_state(0);

    tsStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tsStreamIn_V_V_0_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tsStreamIn_V_V_TDATA_blk_n <= tsStreamIn_V_V_0_state(0);
        else 
            tsStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamIn_V_V_TREADY <= tsStreamIn_V_V_0_state(1);
    tsStreamOut_V_V_1_ack_in <= tsStreamOut_V_V_1_state(1);
    tsStreamOut_V_V_1_ack_out <= tsStreamOut_V_V_TREADY;

    tsStreamOut_V_V_1_data_out_assign_proc : process(tsStreamOut_V_V_1_payload_A, tsStreamOut_V_V_1_payload_B, tsStreamOut_V_V_1_sel)
    begin
        if ((tsStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_B;
        else 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut_V_V_1_load_A <= (tsStreamOut_V_V_1_state_cmp_full and not(tsStreamOut_V_V_1_sel_wr));
    tsStreamOut_V_V_1_load_B <= (tsStreamOut_V_V_1_state_cmp_full and tsStreamOut_V_V_1_sel_wr);
    tsStreamOut_V_V_1_sel <= tsStreamOut_V_V_1_sel_rd;
    tsStreamOut_V_V_1_state_cmp_full <= '0' when (tsStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    tsStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tsStreamOut_V_V_1_vld_out <= tsStreamOut_V_V_1_state(0);
    tsStreamOut_V_V_TDATA <= tsStreamOut_V_V_1_data_out;

    tsStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tsStreamOut_V_V_1_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tsStreamOut_V_V_TDATA_blk_n <= tsStreamOut_V_V_1_state(1);
        else 
            tsStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut_V_V_TVALID <= tsStreamOut_V_V_1_state(0);
    xStreamIn_V_V_0_ack_in <= xStreamIn_V_V_0_state(1);

    xStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    xStreamIn_V_V_0_data_out_assign_proc : process(xStreamIn_V_V_0_payload_A, xStreamIn_V_V_0_payload_B, xStreamIn_V_V_0_sel)
    begin
        if ((xStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_B;
        else 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    xStreamIn_V_V_0_load_A <= (xStreamIn_V_V_0_state_cmp_full and not(xStreamIn_V_V_0_sel_wr));
    xStreamIn_V_V_0_load_B <= (xStreamIn_V_V_0_state_cmp_full and xStreamIn_V_V_0_sel_wr);
    xStreamIn_V_V_0_sel <= xStreamIn_V_V_0_sel_rd;
    xStreamIn_V_V_0_state_cmp_full <= '0' when (xStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    xStreamIn_V_V_0_vld_in <= xStreamIn_V_V_TVALID;
    xStreamIn_V_V_0_vld_out <= xStreamIn_V_V_0_state(0);

    xStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, xStreamIn_V_V_0_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            xStreamIn_V_V_TDATA_blk_n <= xStreamIn_V_V_0_state(0);
        else 
            xStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamIn_V_V_TREADY <= xStreamIn_V_V_0_state(1);
    xStreamOut_V_V_1_ack_in <= xStreamOut_V_V_1_state(1);
    xStreamOut_V_V_1_ack_out <= xStreamOut_V_V_TREADY;

    xStreamOut_V_V_1_data_out_assign_proc : process(xStreamOut_V_V_1_payload_A, xStreamOut_V_V_1_payload_B, xStreamOut_V_V_1_sel)
    begin
        if ((xStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_B;
        else 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut_V_V_1_load_A <= (xStreamOut_V_V_1_state_cmp_full and not(xStreamOut_V_V_1_sel_wr));
    xStreamOut_V_V_1_load_B <= (xStreamOut_V_V_1_state_cmp_full and xStreamOut_V_V_1_sel_wr);
    xStreamOut_V_V_1_sel <= xStreamOut_V_V_1_sel_rd;
    xStreamOut_V_V_1_state_cmp_full <= '0' when (xStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    xStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xStreamOut_V_V_1_vld_out <= xStreamOut_V_V_1_state(0);
    xStreamOut_V_V_TDATA <= xStreamOut_V_V_1_data_out;

    xStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, xStreamOut_V_V_1_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            xStreamOut_V_V_TDATA_blk_n <= xStreamOut_V_V_1_state(1);
        else 
            xStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut_V_V_TVALID <= xStreamOut_V_V_1_state(0);
    yStreamIn_V_V_0_ack_in <= yStreamIn_V_V_0_state(1);

    yStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    yStreamIn_V_V_0_data_out_assign_proc : process(yStreamIn_V_V_0_payload_A, yStreamIn_V_V_0_payload_B, yStreamIn_V_V_0_sel)
    begin
        if ((yStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_B;
        else 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    yStreamIn_V_V_0_load_A <= (yStreamIn_V_V_0_state_cmp_full and not(yStreamIn_V_V_0_sel_wr));
    yStreamIn_V_V_0_load_B <= (yStreamIn_V_V_0_state_cmp_full and yStreamIn_V_V_0_sel_wr);
    yStreamIn_V_V_0_sel <= yStreamIn_V_V_0_sel_rd;
    yStreamIn_V_V_0_state_cmp_full <= '0' when (yStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    yStreamIn_V_V_0_vld_in <= yStreamIn_V_V_TVALID;
    yStreamIn_V_V_0_vld_out <= yStreamIn_V_V_0_state(0);

    yStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, yStreamIn_V_V_0_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            yStreamIn_V_V_TDATA_blk_n <= yStreamIn_V_V_0_state(0);
        else 
            yStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamIn_V_V_TREADY <= yStreamIn_V_V_0_state(1);
    yStreamOut_V_V_1_ack_in <= yStreamOut_V_V_1_state(1);
    yStreamOut_V_V_1_ack_out <= yStreamOut_V_V_TREADY;

    yStreamOut_V_V_1_data_out_assign_proc : process(yStreamOut_V_V_1_payload_A, yStreamOut_V_V_1_payload_B, yStreamOut_V_V_1_sel)
    begin
        if ((yStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_B;
        else 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut_V_V_1_load_A <= (yStreamOut_V_V_1_state_cmp_full and not(yStreamOut_V_V_1_sel_wr));
    yStreamOut_V_V_1_load_B <= (yStreamOut_V_V_1_state_cmp_full and yStreamOut_V_V_1_sel_wr);
    yStreamOut_V_V_1_sel <= yStreamOut_V_V_1_sel_rd;
    yStreamOut_V_V_1_state_cmp_full <= '0' when (yStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    yStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yStreamOut_V_V_1_vld_out <= yStreamOut_V_V_1_state(0);
    yStreamOut_V_V_TDATA <= yStreamOut_V_V_1_data_out;

    yStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, yStreamOut_V_V_1_state, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            yStreamOut_V_V_TDATA_blk_n <= yStreamOut_V_V_1_state(1);
        else 
            yStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut_V_V_TVALID <= yStreamOut_V_V_1_state(0);
end behav;
