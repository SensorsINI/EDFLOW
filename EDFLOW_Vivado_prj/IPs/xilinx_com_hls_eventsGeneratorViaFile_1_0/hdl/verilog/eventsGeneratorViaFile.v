// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eventsGeneratorViaFile,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=427,HLS_SYN_LUT=448}" *)

module eventsGeneratorViaFile (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID,
        xStreamOut_V_V_TREADY,
        yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID,
        yStreamOut_V_V_TREADY,
        tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TREADY,
        polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID,
        polStreamOut_V_V_TREADY,
        custDataStreamOut_V_V_TDATA,
        custDataStreamOut_V_V_TVALID,
        custDataStreamOut_V_V_TREADY,
        s_axi_config_AWVALID,
        s_axi_config_AWREADY,
        s_axi_config_AWADDR,
        s_axi_config_WVALID,
        s_axi_config_WREADY,
        s_axi_config_WDATA,
        s_axi_config_WSTRB,
        s_axi_config_ARVALID,
        s_axi_config_ARREADY,
        s_axi_config_ARADDR,
        s_axi_config_RVALID,
        s_axi_config_RREADY,
        s_axi_config_RDATA,
        s_axi_config_RRESP,
        s_axi_config_BVALID,
        s_axi_config_BREADY,
        s_axi_config_BRESP
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONFIG_DATA_WIDTH = 32;
parameter    C_S_AXI_CONFIG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONFIG_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] xStreamOut_V_V_TDATA;
output   xStreamOut_V_V_TVALID;
input   xStreamOut_V_V_TREADY;
output  [15:0] yStreamOut_V_V_TDATA;
output   yStreamOut_V_V_TVALID;
input   yStreamOut_V_V_TREADY;
output  [63:0] tsStreamOut_V_V_TDATA;
output   tsStreamOut_V_V_TVALID;
input   tsStreamOut_V_V_TREADY;
output  [7:0] polStreamOut_V_V_TDATA;
output   polStreamOut_V_V_TVALID;
input   polStreamOut_V_V_TREADY;
output  [15:0] custDataStreamOut_V_V_TDATA;
output   custDataStreamOut_V_V_TVALID;
input   custDataStreamOut_V_V_TREADY;
input   s_axi_config_AWVALID;
output   s_axi_config_AWREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_AWADDR;
input   s_axi_config_WVALID;
output   s_axi_config_WREADY;
input  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_WDATA;
input  [C_S_AXI_CONFIG_WSTRB_WIDTH - 1:0] s_axi_config_WSTRB;
input   s_axi_config_ARVALID;
output   s_axi_config_ARREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_ARADDR;
output   s_axi_config_RVALID;
input   s_axi_config_RREADY;
output  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_RDATA;
output  [1:0] s_axi_config_RRESP;
output   s_axi_config_BVALID;
input   s_axi_config_BREADY;
output  [1:0] s_axi_config_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] input_V;
reg   [63:0] input_V_preg;
wire    input_V_ap_vld;
reg   [63:0] input_V_in_sig;
reg    input_V_ap_vld_preg;
reg    input_V_ap_vld_in_sig;
reg   [15:0] xStreamOut_V_V_1_data_out;
reg    xStreamOut_V_V_1_vld_in;
wire    xStreamOut_V_V_1_vld_out;
wire    xStreamOut_V_V_1_ack_in;
wire    xStreamOut_V_V_1_ack_out;
reg   [15:0] xStreamOut_V_V_1_payload_A;
reg   [15:0] xStreamOut_V_V_1_payload_B;
reg    xStreamOut_V_V_1_sel_rd;
reg    xStreamOut_V_V_1_sel_wr;
wire    xStreamOut_V_V_1_sel;
wire    xStreamOut_V_V_1_load_A;
wire    xStreamOut_V_V_1_load_B;
reg   [1:0] xStreamOut_V_V_1_state;
wire    xStreamOut_V_V_1_state_cmp_full;
reg   [15:0] yStreamOut_V_V_1_data_out;
reg    yStreamOut_V_V_1_vld_in;
wire    yStreamOut_V_V_1_vld_out;
wire    yStreamOut_V_V_1_ack_in;
wire    yStreamOut_V_V_1_ack_out;
reg   [15:0] yStreamOut_V_V_1_payload_A;
reg   [15:0] yStreamOut_V_V_1_payload_B;
reg    yStreamOut_V_V_1_sel_rd;
reg    yStreamOut_V_V_1_sel_wr;
wire    yStreamOut_V_V_1_sel;
wire    yStreamOut_V_V_1_load_A;
wire    yStreamOut_V_V_1_load_B;
reg   [1:0] yStreamOut_V_V_1_state;
wire    yStreamOut_V_V_1_state_cmp_full;
reg   [63:0] tsStreamOut_V_V_1_data_out;
reg    tsStreamOut_V_V_1_vld_in;
wire    tsStreamOut_V_V_1_vld_out;
wire    tsStreamOut_V_V_1_ack_in;
wire    tsStreamOut_V_V_1_ack_out;
reg   [63:0] tsStreamOut_V_V_1_payload_A;
reg   [63:0] tsStreamOut_V_V_1_payload_B;
reg    tsStreamOut_V_V_1_sel_rd;
reg    tsStreamOut_V_V_1_sel_wr;
wire    tsStreamOut_V_V_1_sel;
wire    tsStreamOut_V_V_1_load_A;
wire    tsStreamOut_V_V_1_load_B;
reg   [1:0] tsStreamOut_V_V_1_state;
wire    tsStreamOut_V_V_1_state_cmp_full;
reg   [7:0] polStreamOut_V_V_1_data_out;
reg    polStreamOut_V_V_1_vld_in;
wire    polStreamOut_V_V_1_vld_out;
wire    polStreamOut_V_V_1_ack_in;
wire    polStreamOut_V_V_1_ack_out;
reg   [7:0] polStreamOut_V_V_1_payload_A;
reg   [7:0] polStreamOut_V_V_1_payload_B;
reg    polStreamOut_V_V_1_sel_rd;
reg    polStreamOut_V_V_1_sel_wr;
wire    polStreamOut_V_V_1_sel;
wire    polStreamOut_V_V_1_load_A;
wire    polStreamOut_V_V_1_load_B;
reg   [1:0] polStreamOut_V_V_1_state;
wire    polStreamOut_V_V_1_state_cmp_full;
reg   [15:0] custDataStreamOut_V_V_1_data_out;
reg    custDataStreamOut_V_V_1_vld_in;
wire    custDataStreamOut_V_V_1_vld_out;
wire    custDataStreamOut_V_V_1_ack_in;
wire    custDataStreamOut_V_V_1_ack_out;
reg   [15:0] custDataStreamOut_V_V_1_payload_A;
reg   [15:0] custDataStreamOut_V_V_1_payload_B;
reg    custDataStreamOut_V_V_1_sel_rd;
reg    custDataStreamOut_V_V_1_sel_wr;
wire    custDataStreamOut_V_V_1_sel;
wire    custDataStreamOut_V_V_1_load_A;
wire    custDataStreamOut_V_V_1_load_B;
reg   [1:0] custDataStreamOut_V_V_1_state;
wire    custDataStreamOut_V_V_1_state_cmp_full;
reg    input_V_blk_n;
reg    xStreamOut_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    yStreamOut_V_V_TDATA_blk_n;
reg    tsStreamOut_V_V_TDATA_blk_n;
reg    polStreamOut_V_V_TDATA_blk_n;
reg    custDataStreamOut_V_V_TDATA_blk_n;
wire   [15:0] tmp_V_fu_117_p1;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire   [15:0] tmp_V_1_fu_132_p1;
wire   [15:0] tmp_V_4_fu_149_p1;
wire   [63:0] r_V_2_fu_164_p1;
wire   [7:0] tmp_V_3_cast_fu_169_p1;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [9:0] x_V_fu_107_p4;
wire   [8:0] y_V_fu_122_p4;
wire   [10:0] custData_V_fu_145_p1;
wire   [31:0] r_V_fu_154_p4;
wire   [0:0] pol_V_fu_137_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 input_V_preg = 64'd0;
#0 input_V_ap_vld_preg = 1'b0;
#0 xStreamOut_V_V_1_sel_rd = 1'b0;
#0 xStreamOut_V_V_1_sel_wr = 1'b0;
#0 xStreamOut_V_V_1_state = 2'd0;
#0 yStreamOut_V_V_1_sel_rd = 1'b0;
#0 yStreamOut_V_V_1_sel_wr = 1'b0;
#0 yStreamOut_V_V_1_state = 2'd0;
#0 tsStreamOut_V_V_1_sel_rd = 1'b0;
#0 tsStreamOut_V_V_1_sel_wr = 1'b0;
#0 tsStreamOut_V_V_1_state = 2'd0;
#0 polStreamOut_V_V_1_sel_rd = 1'b0;
#0 polStreamOut_V_V_1_sel_wr = 1'b0;
#0 polStreamOut_V_V_1_state = 2'd0;
#0 custDataStreamOut_V_V_1_sel_rd = 1'b0;
#0 custDataStreamOut_V_V_1_sel_wr = 1'b0;
#0 custDataStreamOut_V_V_1_state = 2'd0;
end

eventsGeneratorViaFile_config_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONFIG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONFIG_DATA_WIDTH ))
eventsGeneratorViaFile_config_s_axi_U(
    .AWVALID(s_axi_config_AWVALID),
    .AWREADY(s_axi_config_AWREADY),
    .AWADDR(s_axi_config_AWADDR),
    .WVALID(s_axi_config_WVALID),
    .WREADY(s_axi_config_WREADY),
    .WDATA(s_axi_config_WDATA),
    .WSTRB(s_axi_config_WSTRB),
    .ARVALID(s_axi_config_ARVALID),
    .ARREADY(s_axi_config_ARREADY),
    .ARADDR(s_axi_config_ARADDR),
    .RVALID(s_axi_config_RVALID),
    .RREADY(s_axi_config_RREADY),
    .RDATA(s_axi_config_RDATA),
    .RRESP(s_axi_config_RRESP),
    .BVALID(s_axi_config_BVALID),
    .BREADY(s_axi_config_BREADY),
    .BRESP(s_axi_config_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_V(input_V),
    .input_V_ap_vld(input_V_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((custDataStreamOut_V_V_1_ack_out == 1'b1) & (custDataStreamOut_V_V_1_vld_out == 1'b1))) begin
            custDataStreamOut_V_V_1_sel_rd <= ~custDataStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((custDataStreamOut_V_V_1_ack_in == 1'b1) & (custDataStreamOut_V_V_1_vld_in == 1'b1))) begin
            custDataStreamOut_V_V_1_sel_wr <= ~custDataStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        custDataStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((custDataStreamOut_V_V_1_state == 2'd2) & (custDataStreamOut_V_V_1_vld_in == 1'b0)) | ((custDataStreamOut_V_V_1_state == 2'd3) & (custDataStreamOut_V_V_1_vld_in == 1'b0) & (custDataStreamOut_V_V_1_ack_out == 1'b1)))) begin
            custDataStreamOut_V_V_1_state <= 2'd2;
        end else if ((((custDataStreamOut_V_V_1_state == 2'd1) & (custDataStreamOut_V_V_1_ack_out == 1'b0)) | ((custDataStreamOut_V_V_1_state == 2'd3) & (custDataStreamOut_V_V_1_ack_out == 1'b0) & (custDataStreamOut_V_V_1_vld_in == 1'b1)))) begin
            custDataStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((custDataStreamOut_V_V_1_vld_in == 1'b0) & (custDataStreamOut_V_V_1_ack_out == 1'b1)) & ~((custDataStreamOut_V_V_1_ack_out == 1'b0) & (custDataStreamOut_V_V_1_vld_in == 1'b1)) & (custDataStreamOut_V_V_1_state == 2'd3)) | ((custDataStreamOut_V_V_1_state == 2'd1) & (custDataStreamOut_V_V_1_ack_out == 1'b1)) | ((custDataStreamOut_V_V_1_state == 2'd2) & (custDataStreamOut_V_V_1_vld_in == 1'b1)))) begin
            custDataStreamOut_V_V_1_state <= 2'd3;
        end else begin
            custDataStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((~((xStreamOut_V_V_1_ack_in == 1'b0) | (custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
            input_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_V_ap_vld == 1'b1))) begin
            input_V_ap_vld_preg <= input_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_preg <= 64'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_V_ap_vld == 1'b1))) begin
            input_V_preg <= input_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_vld_out == 1'b1))) begin
            polStreamOut_V_V_1_sel_rd <= ~polStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_ack_in == 1'b1) & (polStreamOut_V_V_1_vld_in == 1'b1))) begin
            polStreamOut_V_V_1_sel_wr <= ~polStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((polStreamOut_V_V_1_state == 2'd2) & (polStreamOut_V_V_1_vld_in == 1'b0)) | ((polStreamOut_V_V_1_state == 2'd3) & (polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_ack_out == 1'b1)))) begin
            polStreamOut_V_V_1_state <= 2'd2;
        end else if ((((polStreamOut_V_V_1_state == 2'd1) & (polStreamOut_V_V_1_ack_out == 1'b0)) | ((polStreamOut_V_V_1_state == 2'd3) & (polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_ack_out == 1'b1)) & ~((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_vld_in == 1'b1)) & (polStreamOut_V_V_1_state == 2'd3)) | ((polStreamOut_V_V_1_state == 2'd1) & (polStreamOut_V_V_1_ack_out == 1'b1)) | ((polStreamOut_V_V_1_state == 2'd2) & (polStreamOut_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut_V_V_1_state <= 2'd3;
        end else begin
            polStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_vld_out == 1'b1))) begin
            tsStreamOut_V_V_1_sel_rd <= ~tsStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_ack_in == 1'b1) & (tsStreamOut_V_V_1_vld_in == 1'b1))) begin
            tsStreamOut_V_V_1_sel_wr <= ~tsStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((tsStreamOut_V_V_1_state == 2'd2) & (tsStreamOut_V_V_1_vld_in == 1'b0)) | ((tsStreamOut_V_V_1_state == 2'd3) & (tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_ack_out == 1'b1)))) begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end else if ((((tsStreamOut_V_V_1_state == 2'd1) & (tsStreamOut_V_V_1_ack_out == 1'b0)) | ((tsStreamOut_V_V_1_state == 2'd3) & (tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_ack_out == 1'b1)) & ~((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_vld_in == 1'b1)) & (tsStreamOut_V_V_1_state == 2'd3)) | ((tsStreamOut_V_V_1_state == 2'd1) & (tsStreamOut_V_V_1_ack_out == 1'b1)) | ((tsStreamOut_V_V_1_state == 2'd2) & (tsStreamOut_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut_V_V_1_state <= 2'd3;
        end else begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_vld_out == 1'b1))) begin
            xStreamOut_V_V_1_sel_rd <= ~xStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_in == 1'b1) & (xStreamOut_V_V_1_vld_in == 1'b1))) begin
            xStreamOut_V_V_1_sel_wr <= ~xStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((xStreamOut_V_V_1_state == 2'd2) & (xStreamOut_V_V_1_vld_in == 1'b0)) | ((xStreamOut_V_V_1_state == 2'd3) & (xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_ack_out == 1'b1)))) begin
            xStreamOut_V_V_1_state <= 2'd2;
        end else if ((((xStreamOut_V_V_1_state == 2'd1) & (xStreamOut_V_V_1_ack_out == 1'b0)) | ((xStreamOut_V_V_1_state == 2'd3) & (xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_ack_out == 1'b1)) & ~((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_vld_in == 1'b1)) & (xStreamOut_V_V_1_state == 2'd3)) | ((xStreamOut_V_V_1_state == 2'd1) & (xStreamOut_V_V_1_ack_out == 1'b1)) | ((xStreamOut_V_V_1_state == 2'd2) & (xStreamOut_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut_V_V_1_state <= 2'd3;
        end else begin
            xStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_vld_out == 1'b1))) begin
            yStreamOut_V_V_1_sel_rd <= ~yStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_in == 1'b1) & (yStreamOut_V_V_1_vld_in == 1'b1))) begin
            yStreamOut_V_V_1_sel_wr <= ~yStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((yStreamOut_V_V_1_state == 2'd2) & (yStreamOut_V_V_1_vld_in == 1'b0)) | ((yStreamOut_V_V_1_state == 2'd3) & (yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_ack_out == 1'b1)))) begin
            yStreamOut_V_V_1_state <= 2'd2;
        end else if ((((yStreamOut_V_V_1_state == 2'd1) & (yStreamOut_V_V_1_ack_out == 1'b0)) | ((yStreamOut_V_V_1_state == 2'd3) & (yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_ack_out == 1'b1)) & ~((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_vld_in == 1'b1)) & (yStreamOut_V_V_1_state == 2'd3)) | ((yStreamOut_V_V_1_state == 2'd1) & (yStreamOut_V_V_1_ack_out == 1'b1)) | ((yStreamOut_V_V_1_state == 2'd2) & (yStreamOut_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut_V_V_1_state <= 2'd3;
        end else begin
            yStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut_V_V_1_load_A == 1'b1)) begin
        custDataStreamOut_V_V_1_payload_A <= tmp_V_4_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((custDataStreamOut_V_V_1_load_B == 1'b1)) begin
        custDataStreamOut_V_V_1_payload_B <= tmp_V_4_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_A == 1'b1)) begin
        polStreamOut_V_V_1_payload_A <= tmp_V_3_cast_fu_169_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_B == 1'b1)) begin
        polStreamOut_V_V_1_payload_B <= tmp_V_3_cast_fu_169_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_A == 1'b1)) begin
        tsStreamOut_V_V_1_payload_A <= r_V_2_fu_164_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_B == 1'b1)) begin
        tsStreamOut_V_V_1_payload_B <= r_V_2_fu_164_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_A == 1'b1)) begin
        xStreamOut_V_V_1_payload_A <= tmp_V_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_B == 1'b1)) begin
        xStreamOut_V_V_1_payload_B <= tmp_V_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_A == 1'b1)) begin
        yStreamOut_V_V_1_payload_A <= tmp_V_1_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_B == 1'b1)) begin
        yStreamOut_V_V_1_payload_B <= tmp_V_1_fu_132_p1;
    end
end

always @ (*) begin
    if ((~((xStreamOut_V_V_1_ack_in == 1'b0) | (custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((xStreamOut_V_V_1_ack_in == 1'b0) | (custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((custDataStreamOut_V_V_1_sel == 1'b1)) begin
        custDataStreamOut_V_V_1_data_out = custDataStreamOut_V_V_1_payload_B;
    end else begin
        custDataStreamOut_V_V_1_data_out = custDataStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (input_V_ap_vld_in_sig == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        custDataStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        custDataStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        custDataStreamOut_V_V_TDATA_blk_n = custDataStreamOut_V_V_1_state[1'd1];
    end else begin
        custDataStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((input_V_ap_vld == 1'b1)) begin
        input_V_ap_vld_in_sig = input_V_ap_vld;
    end else begin
        input_V_ap_vld_in_sig = input_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V_blk_n = input_V_ap_vld;
    end else begin
        input_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((input_V_ap_vld == 1'b1)) begin
        input_V_in_sig = input_V;
    end else begin
        input_V_in_sig = input_V_preg;
    end
end

always @ (*) begin
    if ((polStreamOut_V_V_1_sel == 1'b1)) begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_B;
    end else begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (input_V_ap_vld_in_sig == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        polStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        polStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        polStreamOut_V_V_TDATA_blk_n = polStreamOut_V_V_1_state[1'd1];
    end else begin
        polStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tsStreamOut_V_V_1_sel == 1'b1)) begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_B;
    end else begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (input_V_ap_vld_in_sig == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        tsStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        tsStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tsStreamOut_V_V_TDATA_blk_n = tsStreamOut_V_V_1_state[1'd1];
    end else begin
        tsStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((xStreamOut_V_V_1_sel == 1'b1)) begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_B;
    end else begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (input_V_ap_vld_in_sig == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        xStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        xStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        xStreamOut_V_V_TDATA_blk_n = xStreamOut_V_V_1_state[1'd1];
    end else begin
        xStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((yStreamOut_V_V_1_sel == 1'b1)) begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_B;
    end else begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (input_V_ap_vld_in_sig == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        yStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        yStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        yStreamOut_V_V_TDATA_blk_n = yStreamOut_V_V_1_state[1'd1];
    end else begin
        yStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (input_V_ap_vld_in_sig == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((xStreamOut_V_V_1_ack_in == 1'b0) | (custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (input_V_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state1_io = ((xStreamOut_V_V_1_ack_in == 1'b0) | (custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((xStreamOut_V_V_1_ack_in == 1'b0) | (custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((xStreamOut_V_V_1_ack_in == 1'b0) | (custDataStreamOut_V_V_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign custDataStreamOut_V_V_1_ack_in = custDataStreamOut_V_V_1_state[1'd1];

assign custDataStreamOut_V_V_1_ack_out = custDataStreamOut_V_V_TREADY;

assign custDataStreamOut_V_V_1_load_A = (~custDataStreamOut_V_V_1_sel_wr & custDataStreamOut_V_V_1_state_cmp_full);

assign custDataStreamOut_V_V_1_load_B = (custDataStreamOut_V_V_1_state_cmp_full & custDataStreamOut_V_V_1_sel_wr);

assign custDataStreamOut_V_V_1_sel = custDataStreamOut_V_V_1_sel_rd;

assign custDataStreamOut_V_V_1_state_cmp_full = ((custDataStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign custDataStreamOut_V_V_1_vld_out = custDataStreamOut_V_V_1_state[1'd0];

assign custDataStreamOut_V_V_TDATA = custDataStreamOut_V_V_1_data_out;

assign custDataStreamOut_V_V_TVALID = custDataStreamOut_V_V_1_state[1'd0];

assign custData_V_fu_145_p1 = input_V_in_sig[10:0];

assign polStreamOut_V_V_1_ack_in = polStreamOut_V_V_1_state[1'd1];

assign polStreamOut_V_V_1_ack_out = polStreamOut_V_V_TREADY;

assign polStreamOut_V_V_1_load_A = (polStreamOut_V_V_1_state_cmp_full & ~polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_load_B = (polStreamOut_V_V_1_state_cmp_full & polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_sel = polStreamOut_V_V_1_sel_rd;

assign polStreamOut_V_V_1_state_cmp_full = ((polStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamOut_V_V_1_vld_out = polStreamOut_V_V_1_state[1'd0];

assign polStreamOut_V_V_TDATA = polStreamOut_V_V_1_data_out;

assign polStreamOut_V_V_TVALID = polStreamOut_V_V_1_state[1'd0];

assign pol_V_fu_137_p3 = input_V_in_sig[32'd11];

assign r_V_2_fu_164_p1 = r_V_fu_154_p4;

assign r_V_fu_154_p4 = {{input_V_in_sig[63:32]}};

assign tmp_V_1_fu_132_p1 = y_V_fu_122_p4;

assign tmp_V_3_cast_fu_169_p1 = pol_V_fu_137_p3;

assign tmp_V_4_fu_149_p1 = custData_V_fu_145_p1;

assign tmp_V_fu_117_p1 = x_V_fu_107_p4;

assign tsStreamOut_V_V_1_ack_in = tsStreamOut_V_V_1_state[1'd1];

assign tsStreamOut_V_V_1_ack_out = tsStreamOut_V_V_TREADY;

assign tsStreamOut_V_V_1_load_A = (tsStreamOut_V_V_1_state_cmp_full & ~tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_load_B = (tsStreamOut_V_V_1_state_cmp_full & tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_sel = tsStreamOut_V_V_1_sel_rd;

assign tsStreamOut_V_V_1_state_cmp_full = ((tsStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamOut_V_V_1_vld_out = tsStreamOut_V_V_1_state[1'd0];

assign tsStreamOut_V_V_TDATA = tsStreamOut_V_V_1_data_out;

assign tsStreamOut_V_V_TVALID = tsStreamOut_V_V_1_state[1'd0];

assign xStreamOut_V_V_1_ack_in = xStreamOut_V_V_1_state[1'd1];

assign xStreamOut_V_V_1_ack_out = xStreamOut_V_V_TREADY;

assign xStreamOut_V_V_1_load_A = (xStreamOut_V_V_1_state_cmp_full & ~xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_load_B = (xStreamOut_V_V_1_state_cmp_full & xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_sel = xStreamOut_V_V_1_sel_rd;

assign xStreamOut_V_V_1_state_cmp_full = ((xStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamOut_V_V_1_vld_out = xStreamOut_V_V_1_state[1'd0];

assign xStreamOut_V_V_TDATA = xStreamOut_V_V_1_data_out;

assign xStreamOut_V_V_TVALID = xStreamOut_V_V_1_state[1'd0];

assign x_V_fu_107_p4 = {{input_V_in_sig[21:12]}};

assign yStreamOut_V_V_1_ack_in = yStreamOut_V_V_1_state[1'd1];

assign yStreamOut_V_V_1_ack_out = yStreamOut_V_V_TREADY;

assign yStreamOut_V_V_1_load_A = (yStreamOut_V_V_1_state_cmp_full & ~yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_load_B = (yStreamOut_V_V_1_state_cmp_full & yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_sel = yStreamOut_V_V_1_sel_rd;

assign yStreamOut_V_V_1_state_cmp_full = ((yStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamOut_V_V_1_vld_out = yStreamOut_V_V_1_state[1'd0];

assign yStreamOut_V_V_TDATA = yStreamOut_V_V_1_data_out;

assign yStreamOut_V_V_TVALID = yStreamOut_V_V_1_state[1'd0];

assign y_V_fu_122_p4 = {{input_V_in_sig[30:22]}};

endmodule //eventsGeneratorViaFile
