// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module randomGenerator (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] lfsr;
wire   [15:0] randomRet_write_assi_fu_78_p3;
wire   [0:0] tmp_1_fu_26_p3;
wire   [0:0] tmp_fu_22_p1;
wire   [0:0] tmp_2_fu_34_p3;
wire   [0:0] tmp_3_fu_42_p3;
wire   [0:0] tmp2_fu_66_p2;
wire   [0:0] tmp1_fu_60_p2;
wire   [0:0] bit1_fu_72_p2;
wire   [14:0] tmp_6_fu_50_p4;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 lfsr = 16'd44257;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lfsr <= randomRet_write_assi_fu_78_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign bit1_fu_72_p2 = (tmp2_fu_66_p2 ^ tmp1_fu_60_p2);

assign randomRet_write_assi_fu_78_p3 = {{bit1_fu_72_p2}, {tmp_6_fu_50_p4}};

assign tmp1_fu_60_p2 = (tmp_fu_22_p1 ^ tmp_1_fu_26_p3);

assign tmp2_fu_66_p2 = (tmp_3_fu_42_p3 ^ tmp_2_fu_34_p3);

assign tmp_1_fu_26_p3 = lfsr[32'd2];

assign tmp_2_fu_34_p3 = lfsr[32'd3];

assign tmp_3_fu_42_p3 = lfsr[32'd5];

assign tmp_6_fu_50_p4 = {{lfsr[15:1]}};

assign tmp_fu_22_p1 = lfsr[0:0];

endmodule //randomGenerator
