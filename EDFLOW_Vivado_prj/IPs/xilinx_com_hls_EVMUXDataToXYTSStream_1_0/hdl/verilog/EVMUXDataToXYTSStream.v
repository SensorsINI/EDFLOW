// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="EVMUXDataToXYTSStream,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.289000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=909,HLS_SYN_LUT=819}" *)

module EVMUXDataToXYTSStream (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tsStreamOut_V_V_TREADY,
        yStreamOut_V_V_TREADY,
        xStreamOut_V_V_TREADY,
        polStreamOut_V_V_TREADY,
        eventFIFOIn_V,
        eventFIFODataValid_V,
        dataReg_V,
        dataReg_V_ap_vld,
        xRegReg_V,
        xRegReg_V_ap_vld,
        yRegReg_V,
        yRegReg_V_ap_vld,
        tsRegReg_V,
        tsRegReg_V_ap_vld,
        polRegReg_V,
        polRegReg_V_ap_vld,
        tsWrapRegReg_V,
        tsWrapRegReg_V_ap_vld,
        xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID,
        yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID,
        polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID,
        s_axi_config_AWVALID,
        s_axi_config_AWREADY,
        s_axi_config_AWADDR,
        s_axi_config_WVALID,
        s_axi_config_WREADY,
        s_axi_config_WDATA,
        s_axi_config_WSTRB,
        s_axi_config_ARVALID,
        s_axi_config_ARREADY,
        s_axi_config_ARADDR,
        s_axi_config_RVALID,
        s_axi_config_RREADY,
        s_axi_config_RDATA,
        s_axi_config_RRESP,
        s_axi_config_BVALID,
        s_axi_config_BREADY,
        s_axi_config_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONFIG_DATA_WIDTH = 32;
parameter    C_S_AXI_CONFIG_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONFIG_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   tsStreamOut_V_V_TREADY;
input   yStreamOut_V_V_TREADY;
input   xStreamOut_V_V_TREADY;
input   polStreamOut_V_V_TREADY;
input  [15:0] eventFIFOIn_V;
input  [0:0] eventFIFODataValid_V;
output  [15:0] dataReg_V;
output   dataReg_V_ap_vld;
output  [15:0] xRegReg_V;
output   xRegReg_V_ap_vld;
output  [15:0] yRegReg_V;
output   yRegReg_V_ap_vld;
output  [63:0] tsRegReg_V;
output   tsRegReg_V_ap_vld;
output  [0:0] polRegReg_V;
output   polRegReg_V_ap_vld;
output  [47:0] tsWrapRegReg_V;
output   tsWrapRegReg_V_ap_vld;
output  [15:0] xStreamOut_V_V_TDATA;
output   xStreamOut_V_V_TVALID;
output  [15:0] yStreamOut_V_V_TDATA;
output   yStreamOut_V_V_TVALID;
output  [63:0] tsStreamOut_V_V_TDATA;
output   tsStreamOut_V_V_TVALID;
output  [7:0] polStreamOut_V_V_TDATA;
output   polStreamOut_V_V_TVALID;
input   s_axi_config_AWVALID;
output   s_axi_config_AWREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_AWADDR;
input   s_axi_config_WVALID;
output   s_axi_config_WREADY;
input  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_WDATA;
input  [C_S_AXI_CONFIG_WSTRB_WIDTH - 1:0] s_axi_config_WSTRB;
input   s_axi_config_ARVALID;
output   s_axi_config_ARREADY;
input  [C_S_AXI_CONFIG_ADDR_WIDTH - 1:0] s_axi_config_ARADDR;
output   s_axi_config_RVALID;
input   s_axi_config_RREADY;
output  [C_S_AXI_CONFIG_DATA_WIDTH - 1:0] s_axi_config_RDATA;
output  [1:0] s_axi_config_RRESP;
output   s_axi_config_BVALID;
input   s_axi_config_BREADY;
output  [1:0] s_axi_config_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dataReg_V_ap_vld;
reg xRegReg_V_ap_vld;
reg yRegReg_V_ap_vld;
reg tsRegReg_V_ap_vld;
reg polRegReg_V_ap_vld;
reg tsWrapRegReg_V_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    tsStreamOut_V_V_1_ack_in;
wire   [0:0] eventFIFODataValid_V_1_read_fu_124_p2;
wire   [0:0] tmp_fu_372_p3;
wire   [0:0] tmp_2_fu_394_p2;
wire   [0:0] icmp_fu_416_p2;
reg    ap_predicate_op37_write_state1;
wire    yStreamOut_V_V_1_ack_in;
wire    xStreamOut_V_V_1_ack_in;
wire    polStreamOut_V_V_1_ack_in;
reg    ap_block_state1_io;
reg    status_rowNum_1_ack_in;
reg    status_colNum_1_ack_in;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] eventFIFODataValid_V_1_reg_564;
reg   [0:0] tmp_reg_614;
reg   [0:0] tmp_2_reg_618;
reg   [0:0] icmp_reg_622;
reg    ap_predicate_op82_write_state2;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] status_rowNum_1_data_reg;
reg    status_rowNum_1_vld_reg;
reg    status_rowNum_1_vld_in;
reg   [63:0] status_colNum_1_data_reg;
reg    status_colNum_1_vld_reg;
reg    status_colNum_1_vld_in;
reg   [15:0] xStreamOut_V_V_1_data_out;
reg    xStreamOut_V_V_1_vld_in;
wire    xStreamOut_V_V_1_vld_out;
wire    xStreamOut_V_V_1_ack_out;
reg   [15:0] xStreamOut_V_V_1_payload_A;
reg   [15:0] xStreamOut_V_V_1_payload_B;
reg    xStreamOut_V_V_1_sel_rd;
reg    xStreamOut_V_V_1_sel_wr;
wire    xStreamOut_V_V_1_sel;
wire    xStreamOut_V_V_1_load_A;
wire    xStreamOut_V_V_1_load_B;
reg   [1:0] xStreamOut_V_V_1_state;
wire    xStreamOut_V_V_1_state_cmp_full;
reg   [15:0] yStreamOut_V_V_1_data_out;
reg    yStreamOut_V_V_1_vld_in;
wire    yStreamOut_V_V_1_vld_out;
wire    yStreamOut_V_V_1_ack_out;
reg   [15:0] yStreamOut_V_V_1_payload_A;
reg   [15:0] yStreamOut_V_V_1_payload_B;
reg    yStreamOut_V_V_1_sel_rd;
reg    yStreamOut_V_V_1_sel_wr;
wire    yStreamOut_V_V_1_sel;
wire    yStreamOut_V_V_1_load_A;
wire    yStreamOut_V_V_1_load_B;
reg   [1:0] yStreamOut_V_V_1_state;
wire    yStreamOut_V_V_1_state_cmp_full;
reg   [63:0] tsStreamOut_V_V_1_data_out;
reg    tsStreamOut_V_V_1_vld_in;
wire    tsStreamOut_V_V_1_vld_out;
wire    tsStreamOut_V_V_1_ack_out;
reg   [63:0] tsStreamOut_V_V_1_payload_A;
reg   [63:0] tsStreamOut_V_V_1_payload_B;
reg    tsStreamOut_V_V_1_sel_rd;
reg    tsStreamOut_V_V_1_sel_wr;
wire    tsStreamOut_V_V_1_sel;
wire    tsStreamOut_V_V_1_load_A;
wire    tsStreamOut_V_V_1_load_B;
reg   [1:0] tsStreamOut_V_V_1_state;
wire    tsStreamOut_V_V_1_state_cmp_full;
reg   [7:0] polStreamOut_V_V_1_data_out;
reg    polStreamOut_V_V_1_vld_in;
wire    polStreamOut_V_V_1_vld_out;
wire    polStreamOut_V_V_1_ack_out;
reg   [7:0] polStreamOut_V_V_1_payload_A;
reg   [7:0] polStreamOut_V_V_1_payload_B;
reg    polStreamOut_V_V_1_sel_rd;
reg    polStreamOut_V_V_1_sel_wr;
wire    polStreamOut_V_V_1_sel;
wire    polStreamOut_V_V_1_load_A;
wire    polStreamOut_V_V_1_load_B;
reg   [1:0] polStreamOut_V_V_1_state;
wire    polStreamOut_V_V_1_state_cmp_full;
reg   [47:0] tsWrap_V;
reg   [47:0] ts_V;
reg   [11:0] y_V;
reg   [63:0] statusStatRowNum;
reg   [63:0] statusStatColNum;
reg   [11:0] x_V;
reg   [0:0] pol_V;
reg    xStreamOut_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    yStreamOut_V_V_TDATA_blk_n;
reg    tsStreamOut_V_V_TDATA_blk_n;
reg    polStreamOut_V_V_TDATA_blk_n;
wire   [63:0] tmp_V_fu_340_p1;
wire   [15:0] tmp_V_1_fu_349_p1;
wire   [47:0] tmp_5_fu_436_p2;
wire   [0:0] tmp_3_fu_422_p2;
wire   [15:0] p_Result_s_fu_452_p1;
wire   [7:0] tmp_V_3_cast_fu_490_p1;
wire   [11:0] tmp_9_fu_495_p1;
wire   [47:0] tmp_1_fu_526_p3;
reg    ap_block_pp0_stage0_subdone;
reg   [63:0] ap_phi_mux_statusStatRowNum_loc_2_phi_fu_224_p12;
wire   [63:0] ap_phi_reg_pp0_iter0_statusStatRowNum_loc_2_reg_220;
wire   [63:0] tmp_7_fu_505_p2;
reg   [63:0] ap_phi_mux_statusStatColNum_loc_3_phi_fu_244_p12;
wire   [63:0] ap_phi_reg_pp0_iter0_statusStatColNum_loc_3_reg_240;
wire   [63:0] tmp_s_fu_477_p2;
wire   [47:0] ap_phi_reg_pp0_iter0_tsWrap_V_loc_4_reg_260;
reg   [47:0] ap_phi_reg_pp0_iter1_tsWrap_V_loc_4_reg_260;
wire   [47:0] ap_phi_reg_pp0_iter0_ts_V_loc_1_reg_278;
reg   [47:0] ap_phi_reg_pp0_iter1_ts_V_loc_1_reg_278;
wire   [11:0] ap_phi_reg_pp0_iter0_y_V_loc_2_reg_295;
reg   [11:0] ap_phi_reg_pp0_iter1_y_V_loc_2_reg_295;
wire   [15:0] ap_phi_reg_pp0_iter0_p_s_reg_312;
reg   [15:0] ap_phi_reg_pp0_iter1_p_s_reg_312;
wire   [11:0] tmp_11_fu_448_p1;
wire   [0:0] tmp_V_3_fu_463_p3;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_tsRegReg_V_dummy_ack;
reg    ap_reg_ioackin_xRegReg_V_dummy_ack;
reg    ap_reg_ioackin_yRegReg_V_dummy_ack;
reg    ap_reg_ioackin_polRegReg_V_dummy_ack;
reg    ap_reg_ioackin_tsWrapRegReg_V_dummy_ack;
reg    ap_reg_ioackin_dataReg_V_dummy_ack;
wire   [2:0] p_Result_1_fu_380_p4;
wire   [3:0] p_Result_10_cast_fu_390_p1;
wire   [3:0] p_0164_0_off_fu_400_p2;
wire   [2:0] tmp_10_fu_406_p4;
wire   [11:0] tmp_13_fu_428_p1;
wire   [47:0] tmp_4_fu_432_p1;
wire   [32:0] tmp_8_fu_522_p1;
wire   [14:0] tmp_6_fu_518_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 status_rowNum_1_data_reg = 64'd0;
#0 status_rowNum_1_vld_reg = 1'b0;
#0 status_colNum_1_data_reg = 64'd0;
#0 status_colNum_1_vld_reg = 1'b0;
#0 xStreamOut_V_V_1_sel_rd = 1'b0;
#0 xStreamOut_V_V_1_sel_wr = 1'b0;
#0 xStreamOut_V_V_1_state = 2'd0;
#0 yStreamOut_V_V_1_sel_rd = 1'b0;
#0 yStreamOut_V_V_1_sel_wr = 1'b0;
#0 yStreamOut_V_V_1_state = 2'd0;
#0 tsStreamOut_V_V_1_sel_rd = 1'b0;
#0 tsStreamOut_V_V_1_sel_wr = 1'b0;
#0 tsStreamOut_V_V_1_state = 2'd0;
#0 polStreamOut_V_V_1_sel_rd = 1'b0;
#0 polStreamOut_V_V_1_sel_wr = 1'b0;
#0 polStreamOut_V_V_1_state = 2'd0;
#0 tsWrap_V = 48'd0;
#0 ts_V = 48'd0;
#0 y_V = 12'd0;
#0 statusStatRowNum = 64'd0;
#0 statusStatColNum = 64'd0;
#0 x_V = 12'd0;
#0 pol_V = 1'd0;
#0 ap_reg_ioackin_tsRegReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_xRegReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_yRegReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_polRegReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_tsWrapRegReg_V_dummy_ack = 1'b0;
#0 ap_reg_ioackin_dataReg_V_dummy_ack = 1'b0;
end

EVMUXDataToXYTSStream_config_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONFIG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONFIG_DATA_WIDTH ))
EVMUXDataToXYTSStream_config_s_axi_U(
    .AWVALID(s_axi_config_AWVALID),
    .AWREADY(s_axi_config_AWREADY),
    .AWADDR(s_axi_config_AWADDR),
    .WVALID(s_axi_config_WVALID),
    .WREADY(s_axi_config_WREADY),
    .WDATA(s_axi_config_WDATA),
    .WSTRB(s_axi_config_WSTRB),
    .ARVALID(s_axi_config_ARVALID),
    .ARREADY(s_axi_config_ARREADY),
    .ARADDR(s_axi_config_ARADDR),
    .RVALID(s_axi_config_RVALID),
    .RREADY(s_axi_config_RREADY),
    .RDATA(s_axi_config_RDATA),
    .RRESP(s_axi_config_RRESP),
    .BVALID(s_axi_config_BVALID),
    .BREADY(s_axi_config_BREADY),
    .BRESP(s_axi_config_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .status_rowNum(status_rowNum_1_data_reg),
    .status_rowNum_ap_vld(status_rowNum_1_vld_reg),
    .status_colNum(status_colNum_1_data_reg),
    .status_colNum_ap_vld(status_colNum_1_vld_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_dataReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_dataReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_dataReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_polRegReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_polRegReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_polRegReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_tsRegReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_tsRegReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_tsRegReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_tsWrapRegReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_tsWrapRegReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_tsWrapRegReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_xRegReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_xRegReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_xRegReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_yRegReg_V_dummy_ack <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_yRegReg_V_dummy_ack <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == 1'b1))) begin
                ap_reg_ioackin_yRegReg_V_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_ack_out == 1'b1) & (polStreamOut_V_V_1_vld_out == 1'b1))) begin
            polStreamOut_V_V_1_sel_rd <= ~polStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((polStreamOut_V_V_1_ack_in == 1'b1) & (polStreamOut_V_V_1_vld_in == 1'b1))) begin
            polStreamOut_V_V_1_sel_wr <= ~polStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        polStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_state == 2'd2)) | ((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_state == 2'd3) & (polStreamOut_V_V_1_ack_out == 1'b1)))) begin
            polStreamOut_V_V_1_state <= 2'd2;
        end else if ((((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_state == 2'd1)) | ((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_state == 2'd3) & (polStreamOut_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((polStreamOut_V_V_1_vld_in == 1'b0) & (polStreamOut_V_V_1_ack_out == 1'b1)) & ~((polStreamOut_V_V_1_ack_out == 1'b0) & (polStreamOut_V_V_1_vld_in == 1'b1)) & (polStreamOut_V_V_1_state == 2'd3)) | ((polStreamOut_V_V_1_state == 2'd1) & (polStreamOut_V_V_1_ack_out == 1'b1)) | ((polStreamOut_V_V_1_state == 2'd2) & (polStreamOut_V_V_1_vld_in == 1'b1)))) begin
            polStreamOut_V_V_1_state <= 2'd3;
        end else begin
            polStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_ack_out == 1'b1) & (tsStreamOut_V_V_1_vld_out == 1'b1))) begin
            tsStreamOut_V_V_1_sel_rd <= ~tsStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamOut_V_V_1_ack_in == 1'b1) & (tsStreamOut_V_V_1_vld_in == 1'b1))) begin
            tsStreamOut_V_V_1_sel_wr <= ~tsStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tsStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_state == 2'd2)) | ((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_state == 2'd3) & (tsStreamOut_V_V_1_ack_out == 1'b1)))) begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end else if ((((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_state == 2'd1)) | ((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_state == 2'd3) & (tsStreamOut_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((tsStreamOut_V_V_1_vld_in == 1'b0) & (tsStreamOut_V_V_1_ack_out == 1'b1)) & ~((tsStreamOut_V_V_1_ack_out == 1'b0) & (tsStreamOut_V_V_1_vld_in == 1'b1)) & (tsStreamOut_V_V_1_state == 2'd3)) | ((tsStreamOut_V_V_1_state == 2'd1) & (tsStreamOut_V_V_1_ack_out == 1'b1)) | ((tsStreamOut_V_V_1_state == 2'd2) & (tsStreamOut_V_V_1_vld_in == 1'b1)))) begin
            tsStreamOut_V_V_1_state <= 2'd3;
        end else begin
            tsStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_out == 1'b1) & (xStreamOut_V_V_1_vld_out == 1'b1))) begin
            xStreamOut_V_V_1_sel_rd <= ~xStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((xStreamOut_V_V_1_ack_in == 1'b1) & (xStreamOut_V_V_1_vld_in == 1'b1))) begin
            xStreamOut_V_V_1_sel_wr <= ~xStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        xStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_state == 2'd2)) | ((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_state == 2'd3) & (xStreamOut_V_V_1_ack_out == 1'b1)))) begin
            xStreamOut_V_V_1_state <= 2'd2;
        end else if ((((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_state == 2'd1)) | ((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_state == 2'd3) & (xStreamOut_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((xStreamOut_V_V_1_vld_in == 1'b0) & (xStreamOut_V_V_1_ack_out == 1'b1)) & ~((xStreamOut_V_V_1_ack_out == 1'b0) & (xStreamOut_V_V_1_vld_in == 1'b1)) & (xStreamOut_V_V_1_state == 2'd3)) | ((xStreamOut_V_V_1_state == 2'd1) & (xStreamOut_V_V_1_ack_out == 1'b1)) | ((xStreamOut_V_V_1_state == 2'd2) & (xStreamOut_V_V_1_vld_in == 1'b1)))) begin
            xStreamOut_V_V_1_state <= 2'd3;
        end else begin
            xStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_out == 1'b1) & (yStreamOut_V_V_1_vld_out == 1'b1))) begin
            yStreamOut_V_V_1_sel_rd <= ~yStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((yStreamOut_V_V_1_ack_in == 1'b1) & (yStreamOut_V_V_1_vld_in == 1'b1))) begin
            yStreamOut_V_V_1_sel_wr <= ~yStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        yStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_state == 2'd2)) | ((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_state == 2'd3) & (yStreamOut_V_V_1_ack_out == 1'b1)))) begin
            yStreamOut_V_V_1_state <= 2'd2;
        end else if ((((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_state == 2'd1)) | ((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_state == 2'd3) & (yStreamOut_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((yStreamOut_V_V_1_vld_in == 1'b0) & (yStreamOut_V_V_1_ack_out == 1'b1)) & ~((yStreamOut_V_V_1_ack_out == 1'b0) & (yStreamOut_V_V_1_vld_in == 1'b1)) & (yStreamOut_V_V_1_state == 2'd3)) | ((yStreamOut_V_V_1_state == 2'd1) & (yStreamOut_V_V_1_ack_out == 1'b1)) | ((yStreamOut_V_V_1_state == 2'd2) & (yStreamOut_V_V_1_vld_in == 1'b1)))) begin
            yStreamOut_V_V_1_state <= 2'd3;
        end else begin
            yStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (icmp_fu_416_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_3_fu_422_p2 == 1'd0) & (icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (tmp_3_fu_422_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_fu_372_p3 == 1'd0) & (tmp_2_fu_394_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_fu_372_p3 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter1_p_s_reg_312 <= eventFIFOIn_V;
    end else if (((eventFIFODataValid_V_1_read_fu_124_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_s_reg_312 <= 16'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_s_reg_312 <= ap_phi_reg_pp0_iter0_p_s_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (tmp_3_fu_422_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_tsWrap_V_loc_4_reg_260 <= tmp_5_fu_436_p2;
    end else if ((((tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (icmp_fu_416_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_3_fu_422_p2 == 1'd0) & (icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_fu_372_p3 == 1'd0) & (tmp_2_fu_394_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_fu_372_p3 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((eventFIFODataValid_V_1_read_fu_124_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter1_tsWrap_V_loc_4_reg_260 <= tsWrap_V;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_tsWrap_V_loc_4_reg_260 <= ap_phi_reg_pp0_iter0_tsWrap_V_loc_4_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_372_p3 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_ts_V_loc_1_reg_278 <= tmp_1_fu_526_p3;
    end else if ((((tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (icmp_fu_416_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_3_fu_422_p2 == 1'd0) & (icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (tmp_3_fu_422_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_fu_372_p3 == 1'd0) & (tmp_2_fu_394_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((eventFIFODataValid_V_1_read_fu_124_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter1_ts_V_loc_1_reg_278 <= ts_V;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_ts_V_loc_1_reg_278 <= ap_phi_reg_pp0_iter0_ts_V_loc_1_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_372_p3 == 1'd0) & (tmp_2_fu_394_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_y_V_loc_2_reg_295 <= tmp_9_fu_495_p1;
    end else if ((((tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (icmp_fu_416_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_3_fu_422_p2 == 1'd0) & (icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (tmp_3_fu_422_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_fu_372_p3 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((eventFIFODataValid_V_1_read_fu_124_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_phi_reg_pp0_iter1_y_V_loc_2_reg_295 <= y_V;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_y_V_loc_2_reg_295 <= ap_phi_reg_pp0_iter0_y_V_loc_2_reg_295;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (status_colNum_1_vld_reg == 1'b0) & (status_colNum_1_vld_in == 1'b1))) begin
        status_colNum_1_vld_reg <= 1'b1;
    end else if (((status_colNum_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (status_colNum_1_vld_reg == 1'b1))) begin
        status_colNum_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (status_rowNum_1_vld_reg == 1'b0) & (status_rowNum_1_vld_in == 1'b1))) begin
        status_rowNum_1_vld_reg <= 1'b1;
    end else if (((status_rowNum_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (status_rowNum_1_vld_reg == 1'b1))) begin
        status_rowNum_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        eventFIFODataValid_V_1_reg_564 <= eventFIFODataValid_V;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_reg_622 <= icmp_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_A == 1'b1)) begin
        polStreamOut_V_V_1_payload_A <= tmp_V_3_cast_fu_490_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamOut_V_V_1_load_B == 1'b1)) begin
        polStreamOut_V_V_1_payload_B <= tmp_V_3_cast_fu_490_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pol_V <= eventFIFOIn_V[32'd12];
        statusStatColNum <= tmp_s_fu_477_p2;
        x_V <= tmp_11_fu_448_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_372_p3 == 1'd0) & (tmp_2_fu_394_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        statusStatRowNum <= tmp_7_fu_505_p2;
        y_V <= tmp_9_fu_495_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (status_colNum_1_vld_reg == 1'b0) & (status_colNum_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == 1'b1) & (status_colNum_1_vld_in == 1'b1) & (status_colNum_1_vld_reg == 1'b1)))) begin
        status_colNum_1_data_reg <= ap_phi_mux_statusStatColNum_loc_3_phi_fu_244_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (status_rowNum_1_vld_reg == 1'b0) & (status_rowNum_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == 1'b1) & (status_rowNum_1_vld_in == 1'b1) & (status_rowNum_1_vld_reg == 1'b1)))) begin
        status_rowNum_1_data_reg <= ap_phi_mux_statusStatRowNum_loc_2_phi_fu_224_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_618 <= tmp_2_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((eventFIFODataValid_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_614 <= eventFIFOIn_V[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_A == 1'b1)) begin
        tsStreamOut_V_V_1_payload_A <= tmp_V_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamOut_V_V_1_load_B == 1'b1)) begin
        tsStreamOut_V_V_1_payload_B <= tmp_V_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (tmp_3_fu_422_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsWrap_V <= tmp_5_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_372_p3 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ts_V <= tmp_1_fu_526_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_A == 1'b1)) begin
        xStreamOut_V_V_1_payload_A <= p_Result_s_fu_452_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamOut_V_V_1_load_B == 1'b1)) begin
        xStreamOut_V_V_1_payload_B <= p_Result_s_fu_452_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_A == 1'b1)) begin
        yStreamOut_V_V_1_payload_A <= tmp_V_1_fu_349_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamOut_V_V_1_load_B == 1'b1)) begin
        yStreamOut_V_V_1_payload_B <= tmp_V_1_fu_349_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (icmp_fu_416_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_statusStatColNum_loc_3_phi_fu_244_p12 = tmp_s_fu_477_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (eventFIFODataValid_V_1_read_fu_124_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_3_fu_422_p2 == 1'd0) & (icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (tmp_3_fu_422_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (tmp_2_fu_394_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_statusStatColNum_loc_3_phi_fu_244_p12 = statusStatColNum;
    end else begin
        ap_phi_mux_statusStatColNum_loc_3_phi_fu_244_p12 = ap_phi_reg_pp0_iter0_statusStatColNum_loc_3_reg_240;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (tmp_2_fu_394_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_statusStatRowNum_loc_2_phi_fu_224_p12 = tmp_7_fu_505_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (eventFIFODataValid_V_1_read_fu_124_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_2_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (icmp_fu_416_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_3_fu_422_p2 == 1'd0) & (icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_fu_416_p2 == 1'd0) & (tmp_2_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd0) & (tmp_3_fu_422_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_fu_372_p3 == 1'd1) & (eventFIFODataValid_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_statusStatRowNum_loc_2_phi_fu_224_p12 = statusStatRowNum;
    end else begin
        ap_phi_mux_statusStatRowNum_loc_2_phi_fu_224_p12 = ap_phi_reg_pp0_iter0_statusStatRowNum_loc_2_reg_220;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_dataReg_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataReg_V_ap_vld = 1'b1;
    end else begin
        dataReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_polRegReg_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polRegReg_V_ap_vld = 1'b1;
    end else begin
        polRegReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamOut_V_V_1_sel == 1'b1)) begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_B;
    end else begin
        polStreamOut_V_V_1_data_out = polStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        polStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        polStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op82_write_state2 == 1'b1)))) begin
        polStreamOut_V_V_TDATA_blk_n = polStreamOut_V_V_1_state[1'd1];
    end else begin
        polStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((status_colNum_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (status_colNum_1_vld_reg == 1'b1)))) begin
        status_colNum_1_ack_in = 1'b1;
    end else begin
        status_colNum_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        status_colNum_1_vld_in = 1'b1;
    end else begin
        status_colNum_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((status_rowNum_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (status_rowNum_1_vld_reg == 1'b1)))) begin
        status_rowNum_1_ack_in = 1'b1;
    end else begin
        status_rowNum_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        status_rowNum_1_vld_in = 1'b1;
    end else begin
        status_rowNum_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_tsRegReg_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsRegReg_V_ap_vld = 1'b1;
    end else begin
        tsRegReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamOut_V_V_1_sel == 1'b1)) begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_B;
    end else begin
        tsStreamOut_V_V_1_data_out = tsStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        tsStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op82_write_state2 == 1'b1)))) begin
        tsStreamOut_V_V_TDATA_blk_n = tsStreamOut_V_V_1_state[1'd1];
    end else begin
        tsStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_tsWrapRegReg_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsWrapRegReg_V_ap_vld = 1'b1;
    end else begin
        tsWrapRegReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_xRegReg_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xRegReg_V_ap_vld = 1'b1;
    end else begin
        xRegReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamOut_V_V_1_sel == 1'b1)) begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_B;
    end else begin
        xStreamOut_V_V_1_data_out = xStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        xStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op82_write_state2 == 1'b1)))) begin
        xStreamOut_V_V_TDATA_blk_n = xStreamOut_V_V_1_state[1'd1];
    end else begin
        xStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_yRegReg_V_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        yRegReg_V_ap_vld = 1'b1;
    end else begin
        yRegReg_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamOut_V_V_1_sel == 1'b1)) begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_B;
    end else begin
        yStreamOut_V_V_1_data_out = yStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yStreamOut_V_V_1_vld_in = 1'b1;
    end else begin
        yStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op82_write_state2 == 1'b1)))) begin
        yStreamOut_V_V_TDATA_blk_n = yStreamOut_V_V_1_state[1'd1];
    end else begin
        yStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((status_colNum_1_ack_in == 1'b0) | (status_rowNum_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (1'b1 == ap_block_state1_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((status_colNum_1_ack_in == 1'b0) | (status_rowNum_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (1'b1 == ap_block_state1_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((status_colNum_1_ack_in == 1'b0) | (status_rowNum_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io))));
end

always @ (*) begin
    ap_block_state1_io = (((polStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op37_write_state1 == 1'b1)) | ((xStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op37_write_state1 == 1'b1)) | ((yStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op37_write_state1 == 1'b1)) | ((tsStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op37_write_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = (((polStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op82_write_state2 == 1'b1)) | ((xStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op82_write_state2 == 1'b1)) | ((yStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op82_write_state2 == 1'b1)) | ((tsStreamOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op82_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((status_colNum_1_ack_in == 1'b0) | (status_rowNum_1_ack_in == 1'b0) | (polStreamOut_V_V_1_ack_in == 1'b0) | (xStreamOut_V_V_1_ack_in == 1'b0) | (yStreamOut_V_V_1_ack_in == 1'b0) | (tsStreamOut_V_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_p_s_reg_312 = 'bx;

assign ap_phi_reg_pp0_iter0_statusStatColNum_loc_3_reg_240 = 'bx;

assign ap_phi_reg_pp0_iter0_statusStatRowNum_loc_2_reg_220 = 'bx;

assign ap_phi_reg_pp0_iter0_tsWrap_V_loc_4_reg_260 = 'bx;

assign ap_phi_reg_pp0_iter0_ts_V_loc_1_reg_278 = 'bx;

assign ap_phi_reg_pp0_iter0_y_V_loc_2_reg_295 = 'bx;

always @ (*) begin
    ap_predicate_op37_write_state1 = ((tmp_2_fu_394_p2 == 1'd0) & (tmp_fu_372_p3 == 1'd0) & (icmp_fu_416_p2 == 1'd1) & (eventFIFODataValid_V == 1'd1));
end

always @ (*) begin
    ap_predicate_op82_write_state2 = ((tmp_2_reg_618 == 1'd0) & (tmp_reg_614 == 1'd0) & (icmp_reg_622 == 1'd1) & (eventFIFODataValid_V_1_reg_564 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dataReg_V = ap_phi_reg_pp0_iter1_p_s_reg_312;

assign eventFIFODataValid_V_1_read_fu_124_p2 = eventFIFODataValid_V;

assign icmp_fu_416_p2 = ((tmp_10_fu_406_p4 == 3'd0) ? 1'b1 : 1'b0);

assign p_0164_0_off_fu_400_p2 = ($signed(p_Result_10_cast_fu_390_p1) + $signed(4'd14));

assign p_Result_10_cast_fu_390_p1 = p_Result_1_fu_380_p4;

assign p_Result_1_fu_380_p4 = {{eventFIFOIn_V[14:12]}};

assign p_Result_s_fu_452_p1 = tmp_11_fu_448_p1;

assign polRegReg_V = pol_V;

assign polStreamOut_V_V_1_ack_in = polStreamOut_V_V_1_state[1'd1];

assign polStreamOut_V_V_1_ack_out = polStreamOut_V_V_TREADY;

assign polStreamOut_V_V_1_load_A = (polStreamOut_V_V_1_state_cmp_full & ~polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_load_B = (polStreamOut_V_V_1_state_cmp_full & polStreamOut_V_V_1_sel_wr);

assign polStreamOut_V_V_1_sel = polStreamOut_V_V_1_sel_rd;

assign polStreamOut_V_V_1_state_cmp_full = ((polStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamOut_V_V_1_vld_out = polStreamOut_V_V_1_state[1'd0];

assign polStreamOut_V_V_TDATA = polStreamOut_V_V_1_data_out;

assign polStreamOut_V_V_TVALID = polStreamOut_V_V_1_state[1'd0];

assign tmp_10_fu_406_p4 = {{p_0164_0_off_fu_400_p2[3:1]}};

assign tmp_11_fu_448_p1 = eventFIFOIn_V[11:0];

assign tmp_13_fu_428_p1 = eventFIFOIn_V[11:0];

assign tmp_1_fu_526_p3 = {{tmp_8_fu_522_p1}, {tmp_6_fu_518_p1}};

assign tmp_2_fu_394_p2 = ((p_Result_1_fu_380_p4 == 3'd1) ? 1'b1 : 1'b0);

assign tmp_3_fu_422_p2 = ((p_Result_1_fu_380_p4 == 3'd7) ? 1'b1 : 1'b0);

assign tmp_4_fu_432_p1 = tmp_13_fu_428_p1;

assign tmp_5_fu_436_p2 = (tmp_4_fu_432_p1 + tsWrap_V);

assign tmp_6_fu_518_p1 = eventFIFOIn_V[14:0];

assign tmp_7_fu_505_p2 = (64'd1 + statusStatRowNum);

assign tmp_8_fu_522_p1 = tsWrap_V[32:0];

assign tmp_9_fu_495_p1 = eventFIFOIn_V[11:0];

assign tmp_V_1_fu_349_p1 = y_V;

assign tmp_V_3_cast_fu_490_p1 = tmp_V_3_fu_463_p3;

assign tmp_V_3_fu_463_p3 = eventFIFOIn_V[32'd12];

assign tmp_V_fu_340_p1 = ts_V;

assign tmp_fu_372_p3 = eventFIFOIn_V[32'd15];

assign tmp_s_fu_477_p2 = (64'd1 + statusStatColNum);

assign tsRegReg_V = ap_phi_reg_pp0_iter1_ts_V_loc_1_reg_278;

assign tsStreamOut_V_V_1_ack_in = tsStreamOut_V_V_1_state[1'd1];

assign tsStreamOut_V_V_1_ack_out = tsStreamOut_V_V_TREADY;

assign tsStreamOut_V_V_1_load_A = (tsStreamOut_V_V_1_state_cmp_full & ~tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_load_B = (tsStreamOut_V_V_1_state_cmp_full & tsStreamOut_V_V_1_sel_wr);

assign tsStreamOut_V_V_1_sel = tsStreamOut_V_V_1_sel_rd;

assign tsStreamOut_V_V_1_state_cmp_full = ((tsStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamOut_V_V_1_vld_out = tsStreamOut_V_V_1_state[1'd0];

assign tsStreamOut_V_V_TDATA = tsStreamOut_V_V_1_data_out;

assign tsStreamOut_V_V_TVALID = tsStreamOut_V_V_1_state[1'd0];

assign tsWrapRegReg_V = ap_phi_reg_pp0_iter1_tsWrap_V_loc_4_reg_260;

assign xRegReg_V = x_V;

assign xStreamOut_V_V_1_ack_in = xStreamOut_V_V_1_state[1'd1];

assign xStreamOut_V_V_1_ack_out = xStreamOut_V_V_TREADY;

assign xStreamOut_V_V_1_load_A = (xStreamOut_V_V_1_state_cmp_full & ~xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_load_B = (xStreamOut_V_V_1_state_cmp_full & xStreamOut_V_V_1_sel_wr);

assign xStreamOut_V_V_1_sel = xStreamOut_V_V_1_sel_rd;

assign xStreamOut_V_V_1_state_cmp_full = ((xStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamOut_V_V_1_vld_out = xStreamOut_V_V_1_state[1'd0];

assign xStreamOut_V_V_TDATA = xStreamOut_V_V_1_data_out;

assign xStreamOut_V_V_TVALID = xStreamOut_V_V_1_state[1'd0];

assign yRegReg_V = ap_phi_reg_pp0_iter1_y_V_loc_2_reg_295;

assign yStreamOut_V_V_1_ack_in = yStreamOut_V_V_1_state[1'd1];

assign yStreamOut_V_V_1_ack_out = yStreamOut_V_V_TREADY;

assign yStreamOut_V_V_1_load_A = (yStreamOut_V_V_1_state_cmp_full & ~yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_load_B = (yStreamOut_V_V_1_state_cmp_full & yStreamOut_V_V_1_sel_wr);

assign yStreamOut_V_V_1_sel = yStreamOut_V_V_1_sel_rd;

assign yStreamOut_V_V_1_state_cmp_full = ((yStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamOut_V_V_1_vld_out = yStreamOut_V_V_1_state[1'd0];

assign yStreamOut_V_V_TDATA = yStreamOut_V_V_1_data_out;

assign yStreamOut_V_V_TVALID = yStreamOut_V_V_1_state[1'd0];

endmodule //EVMUXDataToXYTSStream
