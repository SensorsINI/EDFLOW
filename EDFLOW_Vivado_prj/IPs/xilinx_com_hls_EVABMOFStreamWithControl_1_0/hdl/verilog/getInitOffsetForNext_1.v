// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getInitOffsetForNext_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        select_V_dout,
        select_V_empty_n,
        select_V_read,
        miniSumStreamScale1_V_V_dout,
        miniSumStreamScale1_V_V_empty_n,
        miniSumStreamScale1_V_V_read,
        OFRetStreamScale1_V_V_dout,
        OFRetStreamScale1_V_V_empty_n,
        OFRetStreamScale1_V_V_read,
        xInitOffsetScale1StreamCopy_V_V_dout,
        xInitOffsetScale1StreamCopy_V_V_empty_n,
        xInitOffsetScale1StreamCopy_V_V_read,
        yInitOffsetScale1StreamCopy_V_V_dout,
        yInitOffsetScale1StreamCopy_V_V_empty_n,
        yInitOffsetScale1StreamCopy_V_V_read,
        xInitOffsetScale0Stream_V_V_din,
        xInitOffsetScale0Stream_V_V_full_n,
        xInitOffsetScale0Stream_V_V_write,
        yInitOffsetScale0Stream_V_V_din,
        yInitOffsetScale0Stream_V_V_full_n,
        yInitOffsetScale0Stream_V_V_write,
        miniSumStreamScale1Copy_V_V_din,
        miniSumStreamScale1Copy_V_V_full_n,
        miniSumStreamScale1Copy_V_V_write,
        OFRetStreamScale1Copy_V_V_din,
        OFRetStreamScale1Copy_V_V_full_n,
        OFRetStreamScale1Copy_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] select_V_dout;
input   select_V_empty_n;
output   select_V_read;
input  [14:0] miniSumStreamScale1_V_V_dout;
input   miniSumStreamScale1_V_V_empty_n;
output   miniSumStreamScale1_V_V_read;
input  [5:0] OFRetStreamScale1_V_V_dout;
input   OFRetStreamScale1_V_V_empty_n;
output   OFRetStreamScale1_V_V_read;
input  [7:0] xInitOffsetScale1StreamCopy_V_V_dout;
input   xInitOffsetScale1StreamCopy_V_V_empty_n;
output   xInitOffsetScale1StreamCopy_V_V_read;
input  [7:0] yInitOffsetScale1StreamCopy_V_V_dout;
input   yInitOffsetScale1StreamCopy_V_V_empty_n;
output   yInitOffsetScale1StreamCopy_V_V_read;
output  [7:0] xInitOffsetScale0Stream_V_V_din;
input   xInitOffsetScale0Stream_V_V_full_n;
output   xInitOffsetScale0Stream_V_V_write;
output  [7:0] yInitOffsetScale0Stream_V_V_din;
input   yInitOffsetScale0Stream_V_V_full_n;
output   yInitOffsetScale0Stream_V_V_write;
output  [14:0] miniSumStreamScale1Copy_V_V_din;
input   miniSumStreamScale1Copy_V_V_full_n;
output   miniSumStreamScale1Copy_V_V_write;
output  [5:0] OFRetStreamScale1Copy_V_V_din;
input   OFRetStreamScale1Copy_V_V_full_n;
output   OFRetStreamScale1Copy_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg select_V_read;
reg miniSumStreamScale1_V_V_read;
reg OFRetStreamScale1_V_V_read;
reg xInitOffsetScale1StreamCopy_V_V_read;
reg yInitOffsetScale1StreamCopy_V_V_read;
reg xInitOffsetScale0Stream_V_V_write;
reg yInitOffsetScale0Stream_V_V_write;
reg miniSumStreamScale1Copy_V_V_write;
reg OFRetStreamScale1Copy_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    select_V_blk_n;
reg    miniSumStreamScale1_V_V_blk_n;
reg    OFRetStreamScale1_V_V_blk_n;
reg    xInitOffsetScale1StreamCopy_V_V_blk_n;
reg    yInitOffsetScale1StreamCopy_V_V_blk_n;
reg    xInitOffsetScale0Stream_V_V_blk_n;
wire    ap_CS_fsm_state2;
reg   [0:0] select_V_read_reg_192;
reg    yInitOffsetScale0Stream_V_V_blk_n;
reg    miniSumStreamScale1Copy_V_V_blk_n;
reg    OFRetStreamScale1Copy_V_V_blk_n;
reg    ap_block_state1;
reg   [5:0] tmp_V_reg_196;
reg   [14:0] tmp_V_165_reg_201;
wire   [6:0] tmp6_i_fu_134_p2;
reg   [6:0] tmp6_i_reg_206;
wire   [6:0] tmp41_i_fu_158_p2;
reg   [6:0] tmp41_i_reg_211;
reg    ap_block_state2;
wire   [2:0] tmp_fu_122_p1;
wire   [6:0] tmp_2530_fu_130_p1;
wire   [6:0] tmp_i_fu_126_p1;
wire   [2:0] p_Result_i_fu_140_p4;
wire   [6:0] tmp_2531_fu_154_p1;
wire   [6:0] tmp_4265_i_fu_150_p1;
wire   [7:0] tmp3_i_fu_164_p3;
wire   [7:0] tmp5_i_fu_178_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_read_reg_192 <= select_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp41_i_reg_211 <= tmp41_i_fu_158_p2;
        tmp6_i_reg_206 <= tmp6_i_fu_134_p2;
        tmp_V_165_reg_201 <= miniSumStreamScale1_V_V_dout;
        tmp_V_reg_196 <= OFRetStreamScale1_V_V_dout;
    end
end

always @ (*) begin
    if (((select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OFRetStreamScale1Copy_V_V_blk_n = OFRetStreamScale1Copy_V_V_full_n;
    end else begin
        OFRetStreamScale1Copy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OFRetStreamScale1Copy_V_V_write = 1'b1;
    end else begin
        OFRetStreamScale1Copy_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OFRetStreamScale1_V_V_blk_n = OFRetStreamScale1_V_V_empty_n;
    end else begin
        OFRetStreamScale1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OFRetStreamScale1_V_V_read = 1'b1;
    end else begin
        OFRetStreamScale1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        miniSumStreamScale1Copy_V_V_blk_n = miniSumStreamScale1Copy_V_V_full_n;
    end else begin
        miniSumStreamScale1Copy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        miniSumStreamScale1Copy_V_V_write = 1'b1;
    end else begin
        miniSumStreamScale1Copy_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        miniSumStreamScale1_V_V_blk_n = miniSumStreamScale1_V_V_empty_n;
    end else begin
        miniSumStreamScale1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        miniSumStreamScale1_V_V_read = 1'b1;
    end else begin
        miniSumStreamScale1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_blk_n = select_V_empty_n;
    end else begin
        select_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_read = 1'b1;
    end else begin
        select_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        xInitOffsetScale0Stream_V_V_blk_n = xInitOffsetScale0Stream_V_V_full_n;
    end else begin
        xInitOffsetScale0Stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        xInitOffsetScale0Stream_V_V_write = 1'b1;
    end else begin
        xInitOffsetScale0Stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xInitOffsetScale1StreamCopy_V_V_blk_n = xInitOffsetScale1StreamCopy_V_V_empty_n;
    end else begin
        xInitOffsetScale1StreamCopy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xInitOffsetScale1StreamCopy_V_V_read = 1'b1;
    end else begin
        xInitOffsetScale1StreamCopy_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        yInitOffsetScale0Stream_V_V_blk_n = yInitOffsetScale0Stream_V_V_full_n;
    end else begin
        yInitOffsetScale0Stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (select_V_read_reg_192 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        yInitOffsetScale0Stream_V_V_write = 1'b1;
    end else begin
        yInitOffsetScale0Stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        yInitOffsetScale1StreamCopy_V_V_blk_n = yInitOffsetScale1StreamCopy_V_V_empty_n;
    end else begin
        yInitOffsetScale1StreamCopy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        yInitOffsetScale1StreamCopy_V_V_read = 1'b1;
    end else begin
        yInitOffsetScale1StreamCopy_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OFRetStreamScale1Copy_V_V_din = tmp_V_reg_196;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale1_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state2 = (((select_V_read_reg_192 == 1'd1) & (yInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (xInitOffsetScale0Stream_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (miniSumStreamScale1Copy_V_V_full_n == 1'b0)) | ((select_V_read_reg_192 == 1'd1) & (1'b0 == OFRetStreamScale1Copy_V_V_full_n)));
end

assign miniSumStreamScale1Copy_V_V_din = tmp_V_165_reg_201;

assign p_Result_i_fu_140_p4 = {{OFRetStreamScale1_V_V_dout[5:3]}};

assign tmp3_i_fu_164_p3 = {{tmp6_i_reg_206}, {1'd0}};

assign tmp41_i_fu_158_p2 = (tmp_2531_fu_154_p1 + tmp_4265_i_fu_150_p1);

assign tmp5_i_fu_178_p3 = {{tmp41_i_reg_211}, {1'd0}};

assign tmp6_i_fu_134_p2 = (tmp_2530_fu_130_p1 + tmp_i_fu_126_p1);

assign tmp_2530_fu_130_p1 = xInitOffsetScale1StreamCopy_V_V_dout[6:0];

assign tmp_2531_fu_154_p1 = yInitOffsetScale1StreamCopy_V_V_dout[6:0];

assign tmp_4265_i_fu_150_p1 = p_Result_i_fu_140_p4;

assign tmp_fu_122_p1 = OFRetStreamScale1_V_V_dout[2:0];

assign tmp_i_fu_126_p1 = tmp_fu_122_p1;

assign xInitOffsetScale0Stream_V_V_din = ($signed(8'd250) + $signed(tmp3_i_fu_164_p3));

assign yInitOffsetScale0Stream_V_V_din = ($signed(8'd250) + $signed(tmp5_i_fu_178_p3));

endmodule //getInitOffsetForNext_1
