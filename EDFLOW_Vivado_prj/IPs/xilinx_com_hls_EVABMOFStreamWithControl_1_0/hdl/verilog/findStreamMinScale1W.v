// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findStreamMinScale1W (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        select_V_dout,
        select_V_empty_n,
        select_V_read,
        inStream_V_dout,
        inStream_V_empty_n,
        inStream_V_read,
        OF_yStream_V_dout,
        OF_yStream_V_empty_n,
        OF_yStream_V_read,
        minStream_V_V_din,
        minStream_V_V_full_n,
        minStream_V_V_write,
        OFStream_V_V_din,
        OFStream_V_V_full_n,
        OFStream_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] select_V_dout;
input   select_V_empty_n;
output   select_V_read;
input  [15:0] inStream_V_dout;
input   inStream_V_empty_n;
output   inStream_V_read;
input  [7:0] OF_yStream_V_dout;
input   OF_yStream_V_empty_n;
output   OF_yStream_V_read;
output  [14:0] minStream_V_V_din;
input   minStream_V_V_full_n;
output   minStream_V_V_write;
output  [5:0] OFStream_V_V_din;
input   OFStream_V_V_full_n;
output   OFStream_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg select_V_read;
reg inStream_V_read;
reg OF_yStream_V_read;
reg minStream_V_V_write;
reg OFStream_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    select_V_blk_n;
wire   [0:0] select_V_read_read_fu_36_p2;
reg   [0:0] select_V_read_reg_56;
reg    ap_block_state1;
wire    grp_findStreamMinScale1_fu_42_ap_start;
wire    grp_findStreamMinScale1_fu_42_ap_done;
wire    grp_findStreamMinScale1_fu_42_ap_idle;
wire    grp_findStreamMinScale1_fu_42_ap_ready;
wire    grp_findStreamMinScale1_fu_42_inStream_V_read;
wire    grp_findStreamMinScale1_fu_42_OF_yStream_V_read;
wire   [14:0] grp_findStreamMinScale1_fu_42_minStream_V_V_din;
wire    grp_findStreamMinScale1_fu_42_minStream_V_V_write;
wire   [5:0] grp_findStreamMinScale1_fu_42_OFStream_V_V_din;
wire    grp_findStreamMinScale1_fu_42_OFStream_V_V_write;
reg    grp_findStreamMinScale1_fu_42_ap_start_reg;
reg    ap_block_state1_ignore_call0;
wire    ap_CS_fsm_state2;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_findStreamMinScale1_fu_42_ap_start_reg = 1'b0;
end

findStreamMinScale1 grp_findStreamMinScale1_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_findStreamMinScale1_fu_42_ap_start),
    .ap_done(grp_findStreamMinScale1_fu_42_ap_done),
    .ap_idle(grp_findStreamMinScale1_fu_42_ap_idle),
    .ap_ready(grp_findStreamMinScale1_fu_42_ap_ready),
    .inStream_V_dout(inStream_V_dout),
    .inStream_V_empty_n(inStream_V_empty_n),
    .inStream_V_read(grp_findStreamMinScale1_fu_42_inStream_V_read),
    .OF_yStream_V_dout(OF_yStream_V_dout),
    .OF_yStream_V_empty_n(OF_yStream_V_empty_n),
    .OF_yStream_V_read(grp_findStreamMinScale1_fu_42_OF_yStream_V_read),
    .minStream_V_V_din(grp_findStreamMinScale1_fu_42_minStream_V_V_din),
    .minStream_V_V_full_n(minStream_V_V_full_n),
    .minStream_V_V_write(grp_findStreamMinScale1_fu_42_minStream_V_V_write),
    .OFStream_V_V_din(grp_findStreamMinScale1_fu_42_OFStream_V_V_din),
    .OFStream_V_V_full_n(OFStream_V_V_full_n),
    .OFStream_V_V_write(grp_findStreamMinScale1_fu_42_OFStream_V_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_findStreamMinScale1_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (select_V_read_read_fu_36_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_findStreamMinScale1_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_findStreamMinScale1_fu_42_ap_ready == 1'b1)) begin
            grp_findStreamMinScale1_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_read_reg_56 <= select_V_dout;
    end
end

always @ (*) begin
    if (((select_V_read_reg_56 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OFStream_V_V_write = grp_findStreamMinScale1_fu_42_OFStream_V_V_write;
    end else begin
        OFStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_56 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OF_yStream_V_read = grp_findStreamMinScale1_fu_42_OF_yStream_V_read;
    end else begin
        OF_yStream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_56 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        inStream_V_read = grp_findStreamMinScale1_fu_42_inStream_V_read;
    end else begin
        inStream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_56 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        minStream_V_V_write = grp_findStreamMinScale1_fu_42_minStream_V_V_write;
    end else begin
        minStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_blk_n = select_V_empty_n;
    end else begin
        select_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_read = 1'b1;
    end else begin
        select_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OFStream_V_V_din = grp_findStreamMinScale1_fu_42_OFStream_V_V_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call0 = ((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((select_V_read_reg_56 == 1'd1) & (grp_findStreamMinScale1_fu_42_ap_done == 1'b0));
end

assign grp_findStreamMinScale1_fu_42_ap_start = grp_findStreamMinScale1_fu_42_ap_start_reg;

assign minStream_V_V_din = grp_findStreamMinScale1_fu_42_minStream_V_V_din;

assign select_V_read_read_fu_36_p2 = select_V_dout;

endmodule //findStreamMinScale1W
