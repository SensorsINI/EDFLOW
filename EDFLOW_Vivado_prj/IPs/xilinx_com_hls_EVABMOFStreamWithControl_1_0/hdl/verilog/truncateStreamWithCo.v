// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module truncateStreamWithCo (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        packetEventDataStream_V_V_din,
        packetEventDataStream_V_V_full_n,
        packetEventDataStream_V_V_write,
        xStreamOut_V_V_din,
        xStreamOut_V_V_full_n,
        xStreamOut_V_V_write,
        yStreamOut_V_V_din,
        yStreamOut_V_V_full_n,
        yStreamOut_V_V_write,
        tsStreamOut_V_din,
        tsStreamOut_V_full_n,
        tsStreamOut_V_write,
        select_V1_din,
        select_V1_full_n,
        select_V1_write,
        select_V2_din,
        select_V2_full_n,
        select_V2_write,
        select_V3_din,
        select_V3_full_n,
        select_V3_write,
        select_V4_din,
        select_V4_full_n,
        select_V4_write,
        select_V5_din,
        select_V5_full_n,
        select_V5_write,
        select_V6_din,
        select_V6_full_n,
        select_V6_write,
        select_V7_din,
        select_V7_full_n,
        select_V7_write,
        select_V8_din,
        select_V8_full_n,
        select_V8_write,
        select_V9_din,
        select_V9_full_n,
        select_V9_write,
        select_V10_din,
        select_V10_full_n,
        select_V10_write,
        select_V11_din,
        select_V11_full_n,
        select_V11_write,
        select_V12_din,
        select_V12_full_n,
        select_V12_write,
        select_V13_din,
        select_V13_full_n,
        select_V13_write,
        select_V14_din,
        select_V14_full_n,
        select_V14_write,
        select_V15_din,
        select_V15_full_n,
        select_V15_write,
        select_V_din,
        select_V_full_n,
        select_V_write,
        select_V_2_din,
        select_V_2_full_n,
        select_V_2_write,
        start_out,
        start_write,
        xStreamIn_V_V_TDATA,
        xStreamIn_V_V_TVALID,
        xStreamIn_V_V_TREADY,
        yStreamIn_V_V_TDATA,
        yStreamIn_V_V_TVALID,
        yStreamIn_V_V_TREADY,
        polStreamIn_V_V_TDATA,
        polStreamIn_V_V_TVALID,
        polStreamIn_V_V_TREADY,
        tsStreamIn_V_V_TDATA,
        tsStreamIn_V_V_TVALID,
        tsStreamIn_V_V_TREADY,
        controlStreamIn_V_V_TDATA,
        controlStreamIn_V_V_TVALID,
        controlStreamIn_V_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [95:0] packetEventDataStream_V_V_din;
input   packetEventDataStream_V_V_full_n;
output   packetEventDataStream_V_V_write;
output  [9:0] xStreamOut_V_V_din;
input   xStreamOut_V_V_full_n;
output   xStreamOut_V_V_write;
output  [9:0] yStreamOut_V_V_din;
input   yStreamOut_V_V_full_n;
output   yStreamOut_V_V_write;
output  [31:0] tsStreamOut_V_din;
input   tsStreamOut_V_full_n;
output   tsStreamOut_V_write;
output  [0:0] select_V1_din;
input   select_V1_full_n;
output   select_V1_write;
output  [0:0] select_V2_din;
input   select_V2_full_n;
output   select_V2_write;
output  [0:0] select_V3_din;
input   select_V3_full_n;
output   select_V3_write;
output  [0:0] select_V4_din;
input   select_V4_full_n;
output   select_V4_write;
output  [0:0] select_V5_din;
input   select_V5_full_n;
output   select_V5_write;
output  [0:0] select_V6_din;
input   select_V6_full_n;
output   select_V6_write;
output  [0:0] select_V7_din;
input   select_V7_full_n;
output   select_V7_write;
output  [0:0] select_V8_din;
input   select_V8_full_n;
output   select_V8_write;
output  [0:0] select_V9_din;
input   select_V9_full_n;
output   select_V9_write;
output  [0:0] select_V10_din;
input   select_V10_full_n;
output   select_V10_write;
output  [0:0] select_V11_din;
input   select_V11_full_n;
output   select_V11_write;
output  [0:0] select_V12_din;
input   select_V12_full_n;
output   select_V12_write;
output  [0:0] select_V13_din;
input   select_V13_full_n;
output   select_V13_write;
output  [0:0] select_V14_din;
input   select_V14_full_n;
output   select_V14_write;
output  [0:0] select_V15_din;
input   select_V15_full_n;
output   select_V15_write;
output  [0:0] select_V_din;
input   select_V_full_n;
output   select_V_write;
output  [0:0] select_V_2_din;
input   select_V_2_full_n;
output   select_V_2_write;
output   start_out;
output   start_write;
input  [15:0] xStreamIn_V_V_TDATA;
input   xStreamIn_V_V_TVALID;
output   xStreamIn_V_V_TREADY;
input  [15:0] yStreamIn_V_V_TDATA;
input   yStreamIn_V_V_TVALID;
output   yStreamIn_V_V_TREADY;
input  [7:0] polStreamIn_V_V_TDATA;
input   polStreamIn_V_V_TVALID;
output   polStreamIn_V_V_TREADY;
input  [63:0] tsStreamIn_V_V_TDATA;
input   tsStreamIn_V_V_TVALID;
output   tsStreamIn_V_V_TREADY;
input  [7:0] controlStreamIn_V_V_TDATA;
input   controlStreamIn_V_V_TVALID;
output   controlStreamIn_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg packetEventDataStream_V_V_write;
reg xStreamOut_V_V_write;
reg yStreamOut_V_V_write;
reg tsStreamOut_V_write;
reg select_V1_write;
reg select_V2_write;
reg select_V3_write;
reg select_V4_write;
reg select_V5_write;
reg select_V6_write;
reg select_V7_write;
reg select_V8_write;
reg select_V9_write;
reg select_V10_write;
reg select_V11_write;
reg select_V12_write;
reg select_V13_write;
reg select_V14_write;
reg select_V15_write;
reg select_V_write;
reg select_V_2_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    internal_ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    xStreamIn_V_V_0_vld_out;
wire    yStreamIn_V_V_0_vld_out;
wire    tsStreamIn_V_V_0_vld_out;
wire    polStreamIn_V_V_0_vld_out;
wire    controlStreamIn_V_V_0_vld_out;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] xStreamIn_V_V_0_data_out;
wire    xStreamIn_V_V_0_vld_in;
wire    xStreamIn_V_V_0_ack_in;
reg    xStreamIn_V_V_0_ack_out;
reg   [15:0] xStreamIn_V_V_0_payload_A;
reg   [15:0] xStreamIn_V_V_0_payload_B;
reg    xStreamIn_V_V_0_sel_rd;
reg    xStreamIn_V_V_0_sel_wr;
wire    xStreamIn_V_V_0_sel;
wire    xStreamIn_V_V_0_load_A;
wire    xStreamIn_V_V_0_load_B;
reg   [1:0] xStreamIn_V_V_0_state;
wire    xStreamIn_V_V_0_state_cmp_full;
reg   [15:0] yStreamIn_V_V_0_data_out;
wire    yStreamIn_V_V_0_vld_in;
wire    yStreamIn_V_V_0_ack_in;
reg    yStreamIn_V_V_0_ack_out;
reg   [15:0] yStreamIn_V_V_0_payload_A;
reg   [15:0] yStreamIn_V_V_0_payload_B;
reg    yStreamIn_V_V_0_sel_rd;
reg    yStreamIn_V_V_0_sel_wr;
wire    yStreamIn_V_V_0_sel;
wire    yStreamIn_V_V_0_load_A;
wire    yStreamIn_V_V_0_load_B;
reg   [1:0] yStreamIn_V_V_0_state;
wire    yStreamIn_V_V_0_state_cmp_full;
reg   [7:0] polStreamIn_V_V_0_data_out;
wire    polStreamIn_V_V_0_vld_in;
wire    polStreamIn_V_V_0_ack_in;
reg    polStreamIn_V_V_0_ack_out;
reg   [7:0] polStreamIn_V_V_0_payload_A;
reg   [7:0] polStreamIn_V_V_0_payload_B;
reg    polStreamIn_V_V_0_sel_rd;
reg    polStreamIn_V_V_0_sel_wr;
wire    polStreamIn_V_V_0_sel;
wire    polStreamIn_V_V_0_load_A;
wire    polStreamIn_V_V_0_load_B;
reg   [1:0] polStreamIn_V_V_0_state;
wire    polStreamIn_V_V_0_state_cmp_full;
reg   [63:0] tsStreamIn_V_V_0_data_out;
wire    tsStreamIn_V_V_0_vld_in;
wire    tsStreamIn_V_V_0_ack_in;
reg    tsStreamIn_V_V_0_ack_out;
reg   [63:0] tsStreamIn_V_V_0_payload_A;
reg   [63:0] tsStreamIn_V_V_0_payload_B;
reg    tsStreamIn_V_V_0_sel_rd;
reg    tsStreamIn_V_V_0_sel_wr;
wire    tsStreamIn_V_V_0_sel;
wire    tsStreamIn_V_V_0_load_A;
wire    tsStreamIn_V_V_0_load_B;
reg   [1:0] tsStreamIn_V_V_0_state;
wire    tsStreamIn_V_V_0_state_cmp_full;
reg   [7:0] controlStreamIn_V_V_0_data_out;
wire    controlStreamIn_V_V_0_vld_in;
wire    controlStreamIn_V_V_0_ack_in;
reg    controlStreamIn_V_V_0_ack_out;
reg   [7:0] controlStreamIn_V_V_0_payload_A;
reg   [7:0] controlStreamIn_V_V_0_payload_B;
reg    controlStreamIn_V_V_0_sel_rd;
reg    controlStreamIn_V_V_0_sel_wr;
wire    controlStreamIn_V_V_0_sel;
wire    controlStreamIn_V_V_0_load_A;
wire    controlStreamIn_V_V_0_load_B;
reg   [1:0] controlStreamIn_V_V_0_state;
wire    controlStreamIn_V_V_0_state_cmp_full;
reg    xStreamIn_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    yStreamIn_V_V_TDATA_blk_n;
reg    polStreamIn_V_V_TDATA_blk_n;
reg    tsStreamIn_V_V_TDATA_blk_n;
reg    controlStreamIn_V_V_TDATA_blk_n;
reg    xStreamOut_V_V_blk_n;
reg    yStreamOut_V_V_blk_n;
reg    tsStreamOut_V_blk_n;
reg    packetEventDataStream_V_V_blk_n;
reg    select_V_2_blk_n;
reg    select_V1_blk_n;
reg    select_V2_blk_n;
reg    select_V3_blk_n;
reg    select_V4_blk_n;
reg    select_V5_blk_n;
reg    select_V6_blk_n;
reg    select_V7_blk_n;
reg    select_V8_blk_n;
reg    select_V9_blk_n;
reg    select_V10_blk_n;
reg    select_V11_blk_n;
reg    select_V12_blk_n;
reg    select_V13_blk_n;
reg    select_V14_blk_n;
reg    select_V15_blk_n;
reg    select_V_blk_n;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_V_7_fu_277_p1;
wire   [62:0] tmp_fu_298_p1;
wire   [0:0] tmp_V_6_fu_273_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 xStreamIn_V_V_0_sel_rd = 1'b0;
#0 xStreamIn_V_V_0_sel_wr = 1'b0;
#0 xStreamIn_V_V_0_state = 2'd0;
#0 yStreamIn_V_V_0_sel_rd = 1'b0;
#0 yStreamIn_V_V_0_sel_wr = 1'b0;
#0 yStreamIn_V_V_0_state = 2'd0;
#0 polStreamIn_V_V_0_sel_rd = 1'b0;
#0 polStreamIn_V_V_0_sel_wr = 1'b0;
#0 polStreamIn_V_V_0_state = 2'd0;
#0 tsStreamIn_V_V_0_sel_rd = 1'b0;
#0 tsStreamIn_V_V_0_sel_wr = 1'b0;
#0 tsStreamIn_V_V_0_state = 2'd0;
#0 controlStreamIn_V_V_0_sel_rd = 1'b0;
#0 controlStreamIn_V_V_0_sel_wr = 1'b0;
#0 controlStreamIn_V_V_0_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        controlStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((controlStreamIn_V_V_0_vld_out == 1'b1) & (controlStreamIn_V_V_0_ack_out == 1'b1))) begin
            controlStreamIn_V_V_0_sel_rd <= ~controlStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        controlStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((controlStreamIn_V_V_0_ack_in == 1'b1) & (controlStreamIn_V_V_0_vld_in == 1'b1))) begin
            controlStreamIn_V_V_0_sel_wr <= ~controlStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        controlStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((controlStreamIn_V_V_0_vld_in == 1'b0) & (controlStreamIn_V_V_0_state == 2'd2)) | ((controlStreamIn_V_V_0_vld_in == 1'b0) & (controlStreamIn_V_V_0_state == 2'd3) & (controlStreamIn_V_V_0_ack_out == 1'b1)))) begin
            controlStreamIn_V_V_0_state <= 2'd2;
        end else if ((((controlStreamIn_V_V_0_ack_out == 1'b0) & (controlStreamIn_V_V_0_state == 2'd1)) | ((controlStreamIn_V_V_0_ack_out == 1'b0) & (controlStreamIn_V_V_0_state == 2'd3) & (controlStreamIn_V_V_0_vld_in == 1'b1)))) begin
            controlStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((controlStreamIn_V_V_0_vld_in == 1'b0) & (controlStreamIn_V_V_0_ack_out == 1'b1)) & ~((controlStreamIn_V_V_0_ack_out == 1'b0) & (controlStreamIn_V_V_0_vld_in == 1'b1)) & (controlStreamIn_V_V_0_state == 2'd3)) | ((controlStreamIn_V_V_0_state == 2'd1) & (controlStreamIn_V_V_0_ack_out == 1'b1)) | ((controlStreamIn_V_V_0_state == 2'd2) & (controlStreamIn_V_V_0_vld_in == 1'b1)))) begin
            controlStreamIn_V_V_0_state <= 2'd3;
        end else begin
            controlStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        polStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_vld_out == 1'b1) & (polStreamIn_V_V_0_ack_out == 1'b1))) begin
            polStreamIn_V_V_0_sel_rd <= ~polStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        polStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((polStreamIn_V_V_0_ack_in == 1'b1) & (polStreamIn_V_V_0_vld_in == 1'b1))) begin
            polStreamIn_V_V_0_sel_wr <= ~polStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        polStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_state == 2'd2)) | ((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_ack_out == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd2;
        end else if ((((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_state == 2'd1)) | ((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_state == 2'd3) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((polStreamIn_V_V_0_vld_in == 1'b0) & (polStreamIn_V_V_0_ack_out == 1'b1)) & ~((polStreamIn_V_V_0_ack_out == 1'b0) & (polStreamIn_V_V_0_vld_in == 1'b1)) & (polStreamIn_V_V_0_state == 2'd3)) | ((polStreamIn_V_V_0_state == 2'd1) & (polStreamIn_V_V_0_ack_out == 1'b1)) | ((polStreamIn_V_V_0_state == 2'd2) & (polStreamIn_V_V_0_vld_in == 1'b1)))) begin
            polStreamIn_V_V_0_state <= 2'd3;
        end else begin
            polStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tsStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_vld_out == 1'b1) & (tsStreamIn_V_V_0_ack_out == 1'b1))) begin
            tsStreamIn_V_V_0_sel_rd <= ~tsStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tsStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tsStreamIn_V_V_0_ack_in == 1'b1) & (tsStreamIn_V_V_0_vld_in == 1'b1))) begin
            tsStreamIn_V_V_0_sel_wr <= ~tsStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tsStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_state == 2'd2)) | ((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_ack_out == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end else if ((((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_state == 2'd1)) | ((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_state == 2'd3) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((tsStreamIn_V_V_0_vld_in == 1'b0) & (tsStreamIn_V_V_0_ack_out == 1'b1)) & ~((tsStreamIn_V_V_0_ack_out == 1'b0) & (tsStreamIn_V_V_0_vld_in == 1'b1)) & (tsStreamIn_V_V_0_state == 2'd3)) | ((tsStreamIn_V_V_0_state == 2'd1) & (tsStreamIn_V_V_0_ack_out == 1'b1)) | ((tsStreamIn_V_V_0_state == 2'd2) & (tsStreamIn_V_V_0_vld_in == 1'b1)))) begin
            tsStreamIn_V_V_0_state <= 2'd3;
        end else begin
            tsStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        xStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_vld_out == 1'b1) & (xStreamIn_V_V_0_ack_out == 1'b1))) begin
            xStreamIn_V_V_0_sel_rd <= ~xStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        xStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((xStreamIn_V_V_0_ack_in == 1'b1) & (xStreamIn_V_V_0_vld_in == 1'b1))) begin
            xStreamIn_V_V_0_sel_wr <= ~xStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        xStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_state == 2'd2)) | ((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_ack_out == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd2;
        end else if ((((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_state == 2'd1)) | ((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_state == 2'd3) & (xStreamIn_V_V_0_vld_in == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((xStreamIn_V_V_0_vld_in == 1'b0) & (xStreamIn_V_V_0_ack_out == 1'b1)) & ~((xStreamIn_V_V_0_ack_out == 1'b0) & (xStreamIn_V_V_0_vld_in == 1'b1)) & (xStreamIn_V_V_0_state == 2'd3)) | ((xStreamIn_V_V_0_state == 2'd1) & (xStreamIn_V_V_0_ack_out == 1'b1)) | ((xStreamIn_V_V_0_state == 2'd2) & (xStreamIn_V_V_0_vld_in == 1'b1)))) begin
            xStreamIn_V_V_0_state <= 2'd3;
        end else begin
            xStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        yStreamIn_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_vld_out == 1'b1) & (yStreamIn_V_V_0_ack_out == 1'b1))) begin
            yStreamIn_V_V_0_sel_rd <= ~yStreamIn_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        yStreamIn_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((yStreamIn_V_V_0_ack_in == 1'b1) & (yStreamIn_V_V_0_vld_in == 1'b1))) begin
            yStreamIn_V_V_0_sel_wr <= ~yStreamIn_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        yStreamIn_V_V_0_state <= 2'd0;
    end else begin
        if ((((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_state == 2'd2)) | ((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_ack_out == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd2;
        end else if ((((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_state == 2'd1)) | ((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_state == 2'd3) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd1;
        end else if (((~((yStreamIn_V_V_0_vld_in == 1'b0) & (yStreamIn_V_V_0_ack_out == 1'b1)) & ~((yStreamIn_V_V_0_ack_out == 1'b0) & (yStreamIn_V_V_0_vld_in == 1'b1)) & (yStreamIn_V_V_0_state == 2'd3)) | ((yStreamIn_V_V_0_state == 2'd1) & (yStreamIn_V_V_0_ack_out == 1'b1)) | ((yStreamIn_V_V_0_state == 2'd2) & (yStreamIn_V_V_0_vld_in == 1'b1)))) begin
            yStreamIn_V_V_0_state <= 2'd3;
        end else begin
            yStreamIn_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((controlStreamIn_V_V_0_load_A == 1'b1)) begin
        controlStreamIn_V_V_0_payload_A <= controlStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((controlStreamIn_V_V_0_load_B == 1'b1)) begin
        controlStreamIn_V_V_0_payload_B <= controlStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_A == 1'b1)) begin
        polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((polStreamIn_V_V_0_load_B == 1'b1)) begin
        polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_A == 1'b1)) begin
        tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tsStreamIn_V_V_0_load_B == 1'b1)) begin
        tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_A == 1'b1)) begin
        xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((xStreamIn_V_V_0_load_B == 1'b1)) begin
        xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_A == 1'b1)) begin
        yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((yStreamIn_V_V_0_load_B == 1'b1)) begin
        yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        controlStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        controlStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((controlStreamIn_V_V_0_sel == 1'b1)) begin
        controlStreamIn_V_V_0_data_out = controlStreamIn_V_V_0_payload_B;
    end else begin
        controlStreamIn_V_V_0_data_out = controlStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        controlStreamIn_V_V_TDATA_blk_n = controlStreamIn_V_V_0_state[1'd0];
    end else begin
        controlStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packetEventDataStream_V_V_blk_n = packetEventDataStream_V_V_full_n;
    end else begin
        packetEventDataStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        packetEventDataStream_V_V_write = 1'b1;
    end else begin
        packetEventDataStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        polStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        polStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((polStreamIn_V_V_0_sel == 1'b1)) begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_B;
    end else begin
        polStreamIn_V_V_0_data_out = polStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polStreamIn_V_V_TDATA_blk_n = polStreamIn_V_V_0_state[1'd0];
    end else begin
        polStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V10_blk_n = select_V10_full_n;
    end else begin
        select_V10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V10_write = 1'b1;
    end else begin
        select_V10_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V11_blk_n = select_V11_full_n;
    end else begin
        select_V11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V11_write = 1'b1;
    end else begin
        select_V11_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V12_blk_n = select_V12_full_n;
    end else begin
        select_V12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V12_write = 1'b1;
    end else begin
        select_V12_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V13_blk_n = select_V13_full_n;
    end else begin
        select_V13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V13_write = 1'b1;
    end else begin
        select_V13_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V14_blk_n = select_V14_full_n;
    end else begin
        select_V14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V14_write = 1'b1;
    end else begin
        select_V14_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V15_blk_n = select_V15_full_n;
    end else begin
        select_V15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V15_write = 1'b1;
    end else begin
        select_V15_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V1_blk_n = select_V1_full_n;
    end else begin
        select_V1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V1_write = 1'b1;
    end else begin
        select_V1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V2_blk_n = select_V2_full_n;
    end else begin
        select_V2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V2_write = 1'b1;
    end else begin
        select_V2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V3_blk_n = select_V3_full_n;
    end else begin
        select_V3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V3_write = 1'b1;
    end else begin
        select_V3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V4_blk_n = select_V4_full_n;
    end else begin
        select_V4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V4_write = 1'b1;
    end else begin
        select_V4_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V5_blk_n = select_V5_full_n;
    end else begin
        select_V5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V5_write = 1'b1;
    end else begin
        select_V5_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V6_blk_n = select_V6_full_n;
    end else begin
        select_V6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V6_write = 1'b1;
    end else begin
        select_V6_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V7_blk_n = select_V7_full_n;
    end else begin
        select_V7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V7_write = 1'b1;
    end else begin
        select_V7_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V8_blk_n = select_V8_full_n;
    end else begin
        select_V8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V8_write = 1'b1;
    end else begin
        select_V8_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V9_blk_n = select_V9_full_n;
    end else begin
        select_V9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V9_write = 1'b1;
    end else begin
        select_V9_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V_2_blk_n = select_V_2_full_n;
    end else begin
        select_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V_2_write = 1'b1;
    end else begin
        select_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_V_blk_n = select_V_full_n;
    end else begin
        select_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_V_write = 1'b1;
    end else begin
        select_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        tsStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tsStreamIn_V_V_0_sel == 1'b1)) begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_B;
    end else begin
        tsStreamIn_V_V_0_data_out = tsStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsStreamIn_V_V_TDATA_blk_n = tsStreamIn_V_V_0_state[1'd0];
    end else begin
        tsStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tsStreamOut_V_blk_n = tsStreamOut_V_full_n;
    end else begin
        tsStreamOut_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tsStreamOut_V_write = 1'b1;
    end else begin
        tsStreamOut_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        xStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((xStreamIn_V_V_0_sel == 1'b1)) begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_B;
    end else begin
        xStreamIn_V_V_0_data_out = xStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xStreamIn_V_V_TDATA_blk_n = xStreamIn_V_V_0_state[1'd0];
    end else begin
        xStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xStreamOut_V_V_blk_n = xStreamOut_V_V_full_n;
    end else begin
        xStreamOut_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xStreamOut_V_V_write = 1'b1;
    end else begin
        xStreamOut_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yStreamIn_V_V_0_ack_out = 1'b1;
    end else begin
        yStreamIn_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((yStreamIn_V_V_0_sel == 1'b1)) begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_B;
    end else begin
        yStreamIn_V_V_0_data_out = yStreamIn_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        yStreamIn_V_V_TDATA_blk_n = yStreamIn_V_V_0_state[1'd0];
    end else begin
        yStreamIn_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        yStreamOut_V_V_blk_n = yStreamOut_V_V_full_n;
    end else begin
        yStreamOut_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yStreamOut_V_V_write = 1'b1;
    end else begin
        yStreamOut_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((select_V2_full_n == 1'b0) | (select_V1_full_n == 1'b0) | (tsStreamOut_V_full_n == 1'b0) | (yStreamOut_V_V_full_n == 1'b0) | (xStreamOut_V_V_full_n == 1'b0) | (packetEventDataStream_V_V_full_n == 1'b0) | (controlStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (select_V_2_full_n == 1'b0) | (select_V_full_n == 1'b0) | (select_V15_full_n == 1'b0) | (select_V14_full_n == 1'b0) | (select_V13_full_n == 1'b0) | (select_V12_full_n == 1'b0) | (select_V11_full_n == 1'b0) | (select_V10_full_n == 1'b0) | (select_V9_full_n == 1'b0) | (select_V8_full_n == 1'b0) | (select_V7_full_n == 1'b0) | (select_V6_full_n == 1'b0) | (select_V5_full_n == 1'b0) | (select_V4_full_n == 1'b0) | (select_V3_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((select_V2_full_n == 1'b0) | (select_V1_full_n == 1'b0) | (tsStreamOut_V_full_n == 1'b0) | (yStreamOut_V_V_full_n == 1'b0) | (xStreamOut_V_V_full_n == 1'b0) | (packetEventDataStream_V_V_full_n == 1'b0) | (controlStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (select_V_2_full_n == 1'b0) | (select_V_full_n == 1'b0) | (select_V15_full_n == 1'b0) | (select_V14_full_n == 1'b0) | (select_V13_full_n == 1'b0) | (select_V12_full_n == 1'b0) | (select_V11_full_n == 1'b0) | (select_V10_full_n == 1'b0) | (select_V9_full_n == 1'b0) | (select_V8_full_n == 1'b0) | (select_V7_full_n == 1'b0) | (select_V6_full_n == 1'b0) | (select_V5_full_n == 1'b0) | (select_V4_full_n == 1'b0) | (select_V3_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((select_V2_full_n == 1'b0) | (select_V1_full_n == 1'b0) | (tsStreamOut_V_full_n == 1'b0) | (yStreamOut_V_V_full_n == 1'b0) | (xStreamOut_V_V_full_n == 1'b0) | (packetEventDataStream_V_V_full_n == 1'b0) | (controlStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (select_V_2_full_n == 1'b0) | (select_V_full_n == 1'b0) | (select_V15_full_n == 1'b0) | (select_V14_full_n == 1'b0) | (select_V13_full_n == 1'b0) | (select_V12_full_n == 1'b0) | (select_V11_full_n == 1'b0) | (select_V10_full_n == 1'b0) | (select_V9_full_n == 1'b0) | (select_V8_full_n == 1'b0) | (select_V7_full_n == 1'b0) | (select_V6_full_n == 1'b0) | (select_V5_full_n == 1'b0) | (select_V4_full_n == 1'b0) | (select_V3_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((select_V2_full_n == 1'b0) | (select_V1_full_n == 1'b0) | (tsStreamOut_V_full_n == 1'b0) | (yStreamOut_V_V_full_n == 1'b0) | (xStreamOut_V_V_full_n == 1'b0) | (packetEventDataStream_V_V_full_n == 1'b0) | (controlStreamIn_V_V_0_vld_out == 1'b0) | (polStreamIn_V_V_0_vld_out == 1'b0) | (tsStreamIn_V_V_0_vld_out == 1'b0) | (yStreamIn_V_V_0_vld_out == 1'b0) | (xStreamIn_V_V_0_vld_out == 1'b0) | (select_V_2_full_n == 1'b0) | (select_V_full_n == 1'b0) | (select_V15_full_n == 1'b0) | (select_V14_full_n == 1'b0) | (select_V13_full_n == 1'b0) | (select_V12_full_n == 1'b0) | (select_V11_full_n == 1'b0) | (select_V10_full_n == 1'b0) | (select_V9_full_n == 1'b0) | (select_V8_full_n == 1'b0) | (select_V7_full_n == 1'b0) | (select_V6_full_n == 1'b0) | (select_V5_full_n == 1'b0) | (select_V4_full_n == 1'b0) | (select_V3_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign controlStreamIn_V_V_0_ack_in = controlStreamIn_V_V_0_state[1'd1];

assign controlStreamIn_V_V_0_load_A = (~controlStreamIn_V_V_0_sel_wr & controlStreamIn_V_V_0_state_cmp_full);

assign controlStreamIn_V_V_0_load_B = (controlStreamIn_V_V_0_state_cmp_full & controlStreamIn_V_V_0_sel_wr);

assign controlStreamIn_V_V_0_sel = controlStreamIn_V_V_0_sel_rd;

assign controlStreamIn_V_V_0_state_cmp_full = ((controlStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign controlStreamIn_V_V_0_vld_in = controlStreamIn_V_V_TVALID;

assign controlStreamIn_V_V_0_vld_out = controlStreamIn_V_V_0_state[1'd0];

assign controlStreamIn_V_V_TREADY = controlStreamIn_V_V_0_state[1'd1];

assign packetEventDataStream_V_V_din = {{{{tmp_fu_298_p1}, {tmp_V_6_fu_273_p1}}, {yStreamIn_V_V_0_data_out}}, {xStreamIn_V_V_0_data_out}};

assign polStreamIn_V_V_0_ack_in = polStreamIn_V_V_0_state[1'd1];

assign polStreamIn_V_V_0_load_A = (polStreamIn_V_V_0_state_cmp_full & ~polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_load_B = (polStreamIn_V_V_0_state_cmp_full & polStreamIn_V_V_0_sel_wr);

assign polStreamIn_V_V_0_sel = polStreamIn_V_V_0_sel_rd;

assign polStreamIn_V_V_0_state_cmp_full = ((polStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign polStreamIn_V_V_0_vld_in = polStreamIn_V_V_TVALID;

assign polStreamIn_V_V_0_vld_out = polStreamIn_V_V_0_state[1'd0];

assign polStreamIn_V_V_TREADY = polStreamIn_V_V_0_state[1'd1];

assign select_V10_din = tmp_V_7_fu_277_p1;

assign select_V11_din = tmp_V_7_fu_277_p1;

assign select_V12_din = tmp_V_7_fu_277_p1;

assign select_V13_din = tmp_V_7_fu_277_p1;

assign select_V14_din = tmp_V_7_fu_277_p1;

assign select_V15_din = tmp_V_7_fu_277_p1;

assign select_V1_din = tmp_V_7_fu_277_p1;

assign select_V2_din = tmp_V_7_fu_277_p1;

assign select_V3_din = tmp_V_7_fu_277_p1;

assign select_V4_din = tmp_V_7_fu_277_p1;

assign select_V5_din = tmp_V_7_fu_277_p1;

assign select_V6_din = tmp_V_7_fu_277_p1;

assign select_V7_din = tmp_V_7_fu_277_p1;

assign select_V8_din = tmp_V_7_fu_277_p1;

assign select_V9_din = tmp_V_7_fu_277_p1;

assign select_V_2_din = tmp_V_7_fu_277_p1;

assign select_V_din = tmp_V_7_fu_277_p1;

assign start_out = real_start;

assign tmp_V_6_fu_273_p1 = polStreamIn_V_V_0_data_out[0:0];

assign tmp_V_7_fu_277_p1 = controlStreamIn_V_V_0_data_out[0:0];

assign tmp_fu_298_p1 = tsStreamIn_V_V_0_data_out[62:0];

assign tsStreamIn_V_V_0_ack_in = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamIn_V_V_0_load_A = (tsStreamIn_V_V_0_state_cmp_full & ~tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_load_B = (tsStreamIn_V_V_0_state_cmp_full & tsStreamIn_V_V_0_sel_wr);

assign tsStreamIn_V_V_0_sel = tsStreamIn_V_V_0_sel_rd;

assign tsStreamIn_V_V_0_state_cmp_full = ((tsStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tsStreamIn_V_V_0_vld_in = tsStreamIn_V_V_TVALID;

assign tsStreamIn_V_V_0_vld_out = tsStreamIn_V_V_0_state[1'd0];

assign tsStreamIn_V_V_TREADY = tsStreamIn_V_V_0_state[1'd1];

assign tsStreamOut_V_din = tsStreamIn_V_V_0_data_out[31:0];

assign xStreamIn_V_V_0_ack_in = xStreamIn_V_V_0_state[1'd1];

assign xStreamIn_V_V_0_load_A = (xStreamIn_V_V_0_state_cmp_full & ~xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_load_B = (xStreamIn_V_V_0_state_cmp_full & xStreamIn_V_V_0_sel_wr);

assign xStreamIn_V_V_0_sel = xStreamIn_V_V_0_sel_rd;

assign xStreamIn_V_V_0_state_cmp_full = ((xStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign xStreamIn_V_V_0_vld_in = xStreamIn_V_V_TVALID;

assign xStreamIn_V_V_0_vld_out = xStreamIn_V_V_0_state[1'd0];

assign xStreamIn_V_V_TREADY = xStreamIn_V_V_0_state[1'd1];

assign xStreamOut_V_V_din = xStreamIn_V_V_0_data_out[9:0];

assign yStreamIn_V_V_0_ack_in = yStreamIn_V_V_0_state[1'd1];

assign yStreamIn_V_V_0_load_A = (yStreamIn_V_V_0_state_cmp_full & ~yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_load_B = (yStreamIn_V_V_0_state_cmp_full & yStreamIn_V_V_0_sel_wr);

assign yStreamIn_V_V_0_sel = yStreamIn_V_V_0_sel_rd;

assign yStreamIn_V_V_0_state_cmp_full = ((yStreamIn_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign yStreamIn_V_V_0_vld_in = yStreamIn_V_V_TVALID;

assign yStreamIn_V_V_0_vld_out = yStreamIn_V_V_0_state[1'd0];

assign yStreamIn_V_V_TREADY = yStreamIn_V_V_0_state[1'd1];

assign yStreamOut_V_V_din = yStreamIn_V_V_0_data_out[9:0];

endmodule //truncateStreamWithCo
