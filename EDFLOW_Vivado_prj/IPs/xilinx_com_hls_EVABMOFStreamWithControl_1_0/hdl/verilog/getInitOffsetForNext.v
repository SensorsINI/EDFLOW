// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getInitOffsetForNext (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        select_V_dout,
        select_V_empty_n,
        select_V_read,
        miniSumStreamScale2_V_V_dout,
        miniSumStreamScale2_V_V_empty_n,
        miniSumStreamScale2_V_V_read,
        OFRetStreamScale2_V_V_dout,
        OFRetStreamScale2_V_V_empty_n,
        OFRetStreamScale2_V_V_read,
        xInitOffsetScale1Stream_V_V_din,
        xInitOffsetScale1Stream_V_V_full_n,
        xInitOffsetScale1Stream_V_V_write,
        yInitOffsetScale1Stream_V_V_din,
        yInitOffsetScale1Stream_V_V_full_n,
        yInitOffsetScale1Stream_V_V_write,
        xInitOffsetScale1StreamCopy_V_V_din,
        xInitOffsetScale1StreamCopy_V_V_full_n,
        xInitOffsetScale1StreamCopy_V_V_write,
        yInitOffsetScale1StreamCopy_V_V_din,
        yInitOffsetScale1StreamCopy_V_V_full_n,
        yInitOffsetScale1StreamCopy_V_V_write,
        miniSumStreamScale2Copy_V_V_din,
        miniSumStreamScale2Copy_V_V_full_n,
        miniSumStreamScale2Copy_V_V_write,
        OFRetStreamScale2Copy_V_V_din,
        OFRetStreamScale2Copy_V_V_full_n,
        OFRetStreamScale2Copy_V_V_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] select_V_dout;
input   select_V_empty_n;
output   select_V_read;
input  [14:0] miniSumStreamScale2_V_V_dout;
input   miniSumStreamScale2_V_V_empty_n;
output   miniSumStreamScale2_V_V_read;
input  [5:0] OFRetStreamScale2_V_V_dout;
input   OFRetStreamScale2_V_V_empty_n;
output   OFRetStreamScale2_V_V_read;
output  [7:0] xInitOffsetScale1Stream_V_V_din;
input   xInitOffsetScale1Stream_V_V_full_n;
output   xInitOffsetScale1Stream_V_V_write;
output  [7:0] yInitOffsetScale1Stream_V_V_din;
input   yInitOffsetScale1Stream_V_V_full_n;
output   yInitOffsetScale1Stream_V_V_write;
output  [7:0] xInitOffsetScale1StreamCopy_V_V_din;
input   xInitOffsetScale1StreamCopy_V_V_full_n;
output   xInitOffsetScale1StreamCopy_V_V_write;
output  [7:0] yInitOffsetScale1StreamCopy_V_V_din;
input   yInitOffsetScale1StreamCopy_V_V_full_n;
output   yInitOffsetScale1StreamCopy_V_V_write;
output  [14:0] miniSumStreamScale2Copy_V_V_din;
input   miniSumStreamScale2Copy_V_V_full_n;
output   miniSumStreamScale2Copy_V_V_write;
output  [5:0] OFRetStreamScale2Copy_V_V_din;
input   OFRetStreamScale2Copy_V_V_full_n;
output   OFRetStreamScale2Copy_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg select_V_read;
reg miniSumStreamScale2_V_V_read;
reg OFRetStreamScale2_V_V_read;
reg xInitOffsetScale1Stream_V_V_write;
reg yInitOffsetScale1Stream_V_V_write;
reg xInitOffsetScale1StreamCopy_V_V_write;
reg yInitOffsetScale1StreamCopy_V_V_write;
reg miniSumStreamScale2Copy_V_V_write;
reg OFRetStreamScale2Copy_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    select_V_blk_n;
reg    miniSumStreamScale2_V_V_blk_n;
reg    OFRetStreamScale2_V_V_blk_n;
reg    xInitOffsetScale1Stream_V_V_blk_n;
reg    yInitOffsetScale1Stream_V_V_blk_n;
reg    xInitOffsetScale1StreamCopy_V_V_blk_n;
reg    yInitOffsetScale1StreamCopy_V_V_blk_n;
reg    miniSumStreamScale2Copy_V_V_blk_n;
reg    OFRetStreamScale2Copy_V_V_blk_n;
reg    ap_block_state1;
wire  signed [7:0] tmp_V_88_fu_146_p1;
wire  signed [7:0] tmp_V_91_fu_180_p1;
wire   [2:0] tmp_fu_124_p1;
wire   [3:0] tmp_i_fu_128_p3;
wire   [4:0] tmp_cast_i_fu_136_p1;
wire   [4:0] r_V_fu_140_p2;
wire   [2:0] tmp_s_fu_152_p4;
wire   [3:0] tmp_1071_i_fu_162_p3;
wire   [4:0] tmp_1071_cast_i_fu_170_p1;
wire   [4:0] r_V_54_fu_174_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OFRetStreamScale2Copy_V_V_blk_n = OFRetStreamScale2Copy_V_V_full_n;
    end else begin
        OFRetStreamScale2Copy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OFRetStreamScale2Copy_V_V_write = 1'b1;
    end else begin
        OFRetStreamScale2Copy_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OFRetStreamScale2_V_V_blk_n = OFRetStreamScale2_V_V_empty_n;
    end else begin
        OFRetStreamScale2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        OFRetStreamScale2_V_V_read = 1'b1;
    end else begin
        OFRetStreamScale2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        miniSumStreamScale2Copy_V_V_blk_n = miniSumStreamScale2Copy_V_V_full_n;
    end else begin
        miniSumStreamScale2Copy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        miniSumStreamScale2Copy_V_V_write = 1'b1;
    end else begin
        miniSumStreamScale2Copy_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        miniSumStreamScale2_V_V_blk_n = miniSumStreamScale2_V_V_empty_n;
    end else begin
        miniSumStreamScale2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        miniSumStreamScale2_V_V_read = 1'b1;
    end else begin
        miniSumStreamScale2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        select_V_blk_n = select_V_empty_n;
    end else begin
        select_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_read = 1'b1;
    end else begin
        select_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xInitOffsetScale1StreamCopy_V_V_blk_n = xInitOffsetScale1StreamCopy_V_V_full_n;
    end else begin
        xInitOffsetScale1StreamCopy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xInitOffsetScale1StreamCopy_V_V_write = 1'b1;
    end else begin
        xInitOffsetScale1StreamCopy_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xInitOffsetScale1Stream_V_V_blk_n = xInitOffsetScale1Stream_V_V_full_n;
    end else begin
        xInitOffsetScale1Stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xInitOffsetScale1Stream_V_V_write = 1'b1;
    end else begin
        xInitOffsetScale1Stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        yInitOffsetScale1StreamCopy_V_V_blk_n = yInitOffsetScale1StreamCopy_V_V_full_n;
    end else begin
        yInitOffsetScale1StreamCopy_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        yInitOffsetScale1StreamCopy_V_V_write = 1'b1;
    end else begin
        yInitOffsetScale1StreamCopy_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        yInitOffsetScale1Stream_V_V_blk_n = yInitOffsetScale1Stream_V_V_full_n;
    end else begin
        yInitOffsetScale1Stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n))) & (select_V_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        yInitOffsetScale1Stream_V_V_write = 1'b1;
    end else begin
        yInitOffsetScale1Stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OFRetStreamScale2Copy_V_V_din = OFRetStreamScale2_V_V_dout;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((select_V_dout == 1'd1) & (yInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1StreamCopy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (yInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (xInitOffsetScale1Stream_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2Copy_V_V_full_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2Copy_V_V_full_n)) | ((select_V_dout == 1'd1) & (miniSumStreamScale2_V_V_empty_n == 1'b0)) | ((select_V_dout == 1'd1) & (1'b0 == OFRetStreamScale2_V_V_empty_n)));
end

assign miniSumStreamScale2Copy_V_V_din = miniSumStreamScale2_V_V_dout;

assign r_V_54_fu_174_p2 = ($signed(5'd26) + $signed(tmp_1071_cast_i_fu_170_p1));

assign r_V_fu_140_p2 = ($signed(5'd26) + $signed(tmp_cast_i_fu_136_p1));

assign tmp_1071_cast_i_fu_170_p1 = tmp_1071_i_fu_162_p3;

assign tmp_1071_i_fu_162_p3 = {{tmp_s_fu_152_p4}, {1'd0}};

assign tmp_V_88_fu_146_p1 = $signed(r_V_fu_140_p2);

assign tmp_V_91_fu_180_p1 = $signed(r_V_54_fu_174_p2);

assign tmp_cast_i_fu_136_p1 = tmp_i_fu_128_p3;

assign tmp_fu_124_p1 = OFRetStreamScale2_V_V_dout[2:0];

assign tmp_i_fu_128_p3 = {{tmp_fu_124_p1}, {1'd0}};

assign tmp_s_fu_152_p4 = {{OFRetStreamScale2_V_V_dout[5:3]}};

assign xInitOffsetScale1StreamCopy_V_V_din = tmp_V_88_fu_146_p1;

assign xInitOffsetScale1Stream_V_V_din = tmp_V_88_fu_146_p1;

assign yInitOffsetScale1StreamCopy_V_V_din = tmp_V_91_fu_180_p1;

assign yInitOffsetScale1Stream_V_V_din = tmp_V_91_fu_180_p1;

endmodule //getInitOffsetForNext
