// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module colStreamToColSumSca_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        select_V_dout,
        select_V_empty_n,
        select_V_read,
        colStream0_V_V_dout,
        colStream0_V_V_empty_n,
        colStream0_V_V_read,
        colStream1_V_V_dout,
        colStream1_V_V_empty_n,
        colStream1_V_V_read,
        outStream_V_V_din,
        outStream_V_V_full_n,
        outStream_V_V_write,
        refZeroCntStream_V_V_din,
        refZeroCntStream_V_V_full_n,
        refZeroCntStream_V_V_write,
        tagColValidCntStream_V_V_din,
        tagColValidCntStream_V_V_full_n,
        tagColValidCntStream_V_V_write,
        refTagValidCntStream_V_V_din,
        refTagValidCntStream_V_V_full_n,
        refTagValidCntStream_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] select_V_dout;
input   select_V_empty_n;
output   select_V_read;
input  [371:0] colStream0_V_V_dout;
input   colStream0_V_V_empty_n;
output   colStream0_V_V_read;
input  [371:0] colStream1_V_V_dout;
input   colStream1_V_V_empty_n;
output   colStream1_V_V_read;
output  [335:0] outStream_V_V_din;
input   outStream_V_V_full_n;
output   outStream_V_V_write;
output  [17:0] refZeroCntStream_V_V_din;
input   refZeroCntStream_V_V_full_n;
output   refZeroCntStream_V_V_write;
output  [125:0] tagColValidCntStream_V_V_din;
input   tagColValidCntStream_V_V_full_n;
output   tagColValidCntStream_V_V_write;
output  [125:0] refTagValidCntStream_V_V_din;
input   refTagValidCntStream_V_V_full_n;
output   refTagValidCntStream_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg select_V_read;
reg colStream0_V_V_read;
reg colStream1_V_V_read;
reg outStream_V_V_write;
reg refZeroCntStream_V_V_write;
reg tagColValidCntStream_V_V_write;
reg refTagValidCntStream_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    select_V_blk_n;
wire   [0:0] select_V_read_read_fu_38_p2;
reg   [0:0] select_V_read_reg_60;
reg    ap_block_state1;
wire    grp_colStreamToColSumSca_5_fu_44_ap_start;
wire    grp_colStreamToColSumSca_5_fu_44_ap_done;
wire    grp_colStreamToColSumSca_5_fu_44_ap_idle;
wire    grp_colStreamToColSumSca_5_fu_44_ap_ready;
wire    grp_colStreamToColSumSca_5_fu_44_colStream0_V_V_read;
wire    grp_colStreamToColSumSca_5_fu_44_colStream1_V_V_read;
wire   [17:0] grp_colStreamToColSumSca_5_fu_44_refZeroCntStream_V_V_din;
wire    grp_colStreamToColSumSca_5_fu_44_refZeroCntStream_V_V_write;
wire   [335:0] grp_colStreamToColSumSca_5_fu_44_outStream_V_V_din;
wire    grp_colStreamToColSumSca_5_fu_44_outStream_V_V_write;
wire   [125:0] grp_colStreamToColSumSca_5_fu_44_tagColValidCntStream_V_V_din;
wire    grp_colStreamToColSumSca_5_fu_44_tagColValidCntStream_V_V_write;
wire   [125:0] grp_colStreamToColSumSca_5_fu_44_refTagValidCntStream_V_V_din;
wire    grp_colStreamToColSumSca_5_fu_44_refTagValidCntStream_V_V_write;
reg    grp_colStreamToColSumSca_5_fu_44_ap_start_reg;
reg    ap_block_state1_ignore_call0;
wire    ap_CS_fsm_state2;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_colStreamToColSumSca_5_fu_44_ap_start_reg = 1'b0;
end

colStreamToColSumSca_5 grp_colStreamToColSumSca_5_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_colStreamToColSumSca_5_fu_44_ap_start),
    .ap_done(grp_colStreamToColSumSca_5_fu_44_ap_done),
    .ap_idle(grp_colStreamToColSumSca_5_fu_44_ap_idle),
    .ap_ready(grp_colStreamToColSumSca_5_fu_44_ap_ready),
    .colStream0_V_V_dout(colStream0_V_V_dout),
    .colStream0_V_V_empty_n(colStream0_V_V_empty_n),
    .colStream0_V_V_read(grp_colStreamToColSumSca_5_fu_44_colStream0_V_V_read),
    .colStream1_V_V_dout(colStream1_V_V_dout),
    .colStream1_V_V_empty_n(colStream1_V_V_empty_n),
    .colStream1_V_V_read(grp_colStreamToColSumSca_5_fu_44_colStream1_V_V_read),
    .refZeroCntStream_V_V_din(grp_colStreamToColSumSca_5_fu_44_refZeroCntStream_V_V_din),
    .refZeroCntStream_V_V_full_n(refZeroCntStream_V_V_full_n),
    .refZeroCntStream_V_V_write(grp_colStreamToColSumSca_5_fu_44_refZeroCntStream_V_V_write),
    .outStream_V_V_din(grp_colStreamToColSumSca_5_fu_44_outStream_V_V_din),
    .outStream_V_V_full_n(outStream_V_V_full_n),
    .outStream_V_V_write(grp_colStreamToColSumSca_5_fu_44_outStream_V_V_write),
    .tagColValidCntStream_V_V_din(grp_colStreamToColSumSca_5_fu_44_tagColValidCntStream_V_V_din),
    .tagColValidCntStream_V_V_full_n(tagColValidCntStream_V_V_full_n),
    .tagColValidCntStream_V_V_write(grp_colStreamToColSumSca_5_fu_44_tagColValidCntStream_V_V_write),
    .refTagValidCntStream_V_V_din(grp_colStreamToColSumSca_5_fu_44_refTagValidCntStream_V_V_din),
    .refTagValidCntStream_V_V_full_n(refTagValidCntStream_V_V_full_n),
    .refTagValidCntStream_V_V_write(grp_colStreamToColSumSca_5_fu_44_refTagValidCntStream_V_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_colStreamToColSumSca_5_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (select_V_read_read_fu_38_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_colStreamToColSumSca_5_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_colStreamToColSumSca_5_fu_44_ap_ready == 1'b1)) begin
            grp_colStreamToColSumSca_5_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_read_reg_60 <= select_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_60 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        colStream0_V_V_read = grp_colStreamToColSumSca_5_fu_44_colStream0_V_V_read;
    end else begin
        colStream0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_60 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        colStream1_V_V_read = grp_colStreamToColSumSca_5_fu_44_colStream1_V_V_read;
    end else begin
        colStream1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_60 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        outStream_V_V_write = grp_colStreamToColSumSca_5_fu_44_outStream_V_V_write;
    end else begin
        outStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_60 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        refTagValidCntStream_V_V_write = grp_colStreamToColSumSca_5_fu_44_refTagValidCntStream_V_V_write;
    end else begin
        refTagValidCntStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_60 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        refZeroCntStream_V_V_write = grp_colStreamToColSumSca_5_fu_44_refZeroCntStream_V_V_write;
    end else begin
        refZeroCntStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_blk_n = select_V_empty_n;
    end else begin
        select_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_V_read = 1'b1;
    end else begin
        select_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_V_read_reg_60 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tagColValidCntStream_V_V_write = grp_colStreamToColSumSca_5_fu_44_tagColValidCntStream_V_V_write;
    end else begin
        tagColValidCntStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call0 = ((ap_start == 1'b0) | (select_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((select_V_read_reg_60 == 1'd1) & (grp_colStreamToColSumSca_5_fu_44_ap_done == 1'b0));
end

assign grp_colStreamToColSumSca_5_fu_44_ap_start = grp_colStreamToColSumSca_5_fu_44_ap_start_reg;

assign outStream_V_V_din = grp_colStreamToColSumSca_5_fu_44_outStream_V_V_din;

assign refTagValidCntStream_V_V_din = grp_colStreamToColSumSca_5_fu_44_refTagValidCntStream_V_V_din;

assign refZeroCntStream_V_V_din = grp_colStreamToColSumSca_5_fu_44_refZeroCntStream_V_V_din;

assign select_V_read_read_fu_38_p2 = select_V_dout;

assign tagColValidCntStream_V_V_din = grp_colStreamToColSumSca_5_fu_44_tagColValidCntStream_V_V_din;

endmodule //colStreamToColSumSca_4
