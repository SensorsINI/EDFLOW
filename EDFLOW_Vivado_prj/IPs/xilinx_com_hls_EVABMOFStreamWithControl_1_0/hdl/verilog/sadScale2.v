// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sadScale2 (
        ap_clk,
        ap_rst,
        refBlock_0_V_read,
        refBlock_1_V_read,
        refBlock_2_V_read,
        refBlock_3_V_read,
        refBlock_4_V_read,
        refBlock_5_V_read,
        refBlock_6_V_read,
        targetBlocks_0_V_re,
        targetBlocks_1_V_re,
        targetBlocks_2_V_re,
        targetBlocks_3_V_re,
        targetBlocks_4_V_re,
        targetBlocks_5_V_re,
        targetBlocks_6_V_re,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [3:0] refBlock_0_V_read;
input  [3:0] refBlock_1_V_read;
input  [3:0] refBlock_2_V_read;
input  [3:0] refBlock_3_V_read;
input  [3:0] refBlock_4_V_read;
input  [3:0] refBlock_5_V_read;
input  [3:0] refBlock_6_V_read;
input  [3:0] targetBlocks_0_V_re;
input  [3:0] targetBlocks_1_V_re;
input  [3:0] targetBlocks_2_V_re;
input  [3:0] targetBlocks_3_V_re;
input  [3:0] targetBlocks_4_V_re;
input  [3:0] targetBlocks_5_V_re;
input  [3:0] targetBlocks_6_V_re;
output  [6:0] ap_return;
input   ap_ce;

wire   [4:0] sum_0_V_fu_155_p2;
reg   [4:0] sum_0_V_reg_245;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] sum_1_V_fu_169_p2;
reg   [4:0] sum_1_V_reg_250;
wire   [4:0] sum_2_V_fu_183_p2;
reg   [4:0] sum_2_V_reg_255;
wire   [4:0] sum_3_V_fu_197_p2;
reg   [4:0] sum_3_V_reg_260;
wire   [4:0] sum_4_V_fu_211_p2;
reg   [4:0] sum_4_V_reg_265;
wire   [4:0] sum_5_V_fu_225_p2;
reg   [4:0] sum_5_V_reg_270;
wire   [4:0] sum_6_V_fu_239_p2;
reg   [4:0] sum_6_V_reg_275;
wire    sadRet_write_assign_sadSumScale2_fu_136_ap_ready;
wire   [6:0] sadRet_write_assign_sadSumScale2_fu_136_ap_return;
wire    ap_block_pp0_stage0;
wire   [4:0] sum_0_V_fu_155_p0;
wire   [4:0] sum_0_V_fu_155_p1;
wire   [4:0] sum_1_V_fu_169_p0;
wire   [4:0] sum_1_V_fu_169_p1;
wire   [4:0] sum_2_V_fu_183_p0;
wire   [4:0] sum_2_V_fu_183_p1;
wire   [4:0] sum_3_V_fu_197_p0;
wire   [4:0] sum_3_V_fu_197_p1;
wire   [4:0] sum_4_V_fu_211_p0;
wire   [4:0] sum_4_V_fu_211_p1;
wire   [4:0] sum_5_V_fu_225_p0;
wire   [4:0] sum_5_V_fu_225_p1;
wire   [4:0] sum_6_V_fu_239_p0;
wire   [4:0] sum_6_V_fu_239_p1;

sadSumScale2 sadRet_write_assign_sadSumScale2_fu_136(
    .ap_ready(sadRet_write_assign_sadSumScale2_fu_136_ap_ready),
    .sum_0_V_read(sum_0_V_reg_245),
    .sum_1_V_read(sum_1_V_reg_250),
    .sum_2_V_read(sum_2_V_reg_255),
    .sum_3_V_read(sum_3_V_reg_260),
    .sum_4_V_read(sum_4_V_reg_265),
    .sum_5_V_read(sum_5_V_reg_270),
    .sum_6_V_read(sum_6_V_reg_275),
    .ap_return(sadRet_write_assign_sadSumScale2_fu_136_ap_return)
);

EVABMOFStreamWithMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
EVABMOFStreamWithMgi_U67(
    .din0(sum_0_V_fu_155_p0),
    .din1(sum_0_V_fu_155_p1),
    .dout(sum_0_V_fu_155_p2)
);

EVABMOFStreamWithMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
EVABMOFStreamWithMgi_U68(
    .din0(sum_1_V_fu_169_p0),
    .din1(sum_1_V_fu_169_p1),
    .dout(sum_1_V_fu_169_p2)
);

EVABMOFStreamWithMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
EVABMOFStreamWithMgi_U69(
    .din0(sum_2_V_fu_183_p0),
    .din1(sum_2_V_fu_183_p1),
    .dout(sum_2_V_fu_183_p2)
);

EVABMOFStreamWithMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
EVABMOFStreamWithMgi_U70(
    .din0(sum_3_V_fu_197_p0),
    .din1(sum_3_V_fu_197_p1),
    .dout(sum_3_V_fu_197_p2)
);

EVABMOFStreamWithMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
EVABMOFStreamWithMgi_U71(
    .din0(sum_4_V_fu_211_p0),
    .din1(sum_4_V_fu_211_p1),
    .dout(sum_4_V_fu_211_p2)
);

EVABMOFStreamWithMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
EVABMOFStreamWithMgi_U72(
    .din0(sum_5_V_fu_225_p0),
    .din1(sum_5_V_fu_225_p1),
    .dout(sum_5_V_fu_225_p2)
);

EVABMOFStreamWithMgi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
EVABMOFStreamWithMgi_U73(
    .din0(sum_6_V_fu_239_p0),
    .din1(sum_6_V_fu_239_p1),
    .dout(sum_6_V_fu_239_p2)
);

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        sum_0_V_reg_245 <= sum_0_V_fu_155_p2;
        sum_1_V_reg_250 <= sum_1_V_fu_169_p2;
        sum_2_V_reg_255 <= sum_2_V_fu_183_p2;
        sum_3_V_reg_260 <= sum_3_V_fu_197_p2;
        sum_4_V_reg_265 <= sum_4_V_fu_211_p2;
        sum_5_V_reg_270 <= sum_5_V_fu_225_p2;
        sum_6_V_reg_275 <= sum_6_V_fu_239_p2;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return = sadRet_write_assign_sadSumScale2_fu_136_ap_return;

assign sum_0_V_fu_155_p0 = refBlock_0_V_read;

assign sum_0_V_fu_155_p1 = targetBlocks_0_V_re;

assign sum_1_V_fu_169_p0 = refBlock_1_V_read;

assign sum_1_V_fu_169_p1 = targetBlocks_1_V_re;

assign sum_2_V_fu_183_p0 = refBlock_2_V_read;

assign sum_2_V_fu_183_p1 = targetBlocks_2_V_re;

assign sum_3_V_fu_197_p0 = refBlock_3_V_read;

assign sum_3_V_fu_197_p1 = targetBlocks_3_V_re;

assign sum_4_V_fu_211_p0 = refBlock_4_V_read;

assign sum_4_V_fu_211_p1 = targetBlocks_4_V_re;

assign sum_5_V_fu_225_p0 = refBlock_5_V_read;

assign sum_5_V_fu_225_p1 = targetBlocks_5_V_re;

assign sum_6_V_fu_239_p0 = refBlock_6_V_read;

assign sum_6_V_fu_239_p1 = targetBlocks_6_V_re;

endmodule //sadScale2
