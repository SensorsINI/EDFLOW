// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accumulateStreamScal_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inStream_V_V_dout,
        inStream_V_V_empty_n,
        inStream_V_V_read,
        tagColValidCntStream_V_V_dout,
        tagColValidCntStream_V_V_empty_n,
        tagColValidCntStream_V_V_read,
        refTagValidCntStream_V_V_dout,
        refTagValidCntStream_V_V_empty_n,
        refTagValidCntStream_V_V_read,
        refZeroCntStream_V_V_dout,
        refZeroCntStream_V_V_empty_n,
        refZeroCntStream_V_V_read,
        outStream_V_din,
        outStream_V_full_n,
        outStream_V_write,
        OF_yStream_V_din,
        OF_yStream_V_full_n,
        OF_yStream_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [111:0] inStream_V_V_dout;
input   inStream_V_V_empty_n;
output   inStream_V_V_read;
input  [41:0] tagColValidCntStream_V_V_dout;
input   tagColValidCntStream_V_V_empty_n;
output   tagColValidCntStream_V_V_read;
input  [41:0] refTagValidCntStream_V_V_dout;
input   refTagValidCntStream_V_V_empty_n;
output   refTagValidCntStream_V_V_read;
input  [5:0] refZeroCntStream_V_V_dout;
input   refZeroCntStream_V_V_empty_n;
output   refZeroCntStream_V_V_read;
output  [15:0] outStream_V_din;
input   outStream_V_full_n;
output   outStream_V_write;
output  [7:0] OF_yStream_V_din;
input   OF_yStream_V_full_n;
output   OF_yStream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream_V_V_read;
reg tagColValidCntStream_V_V_read;
reg refTagValidCntStream_V_V_read;
reg refZeroCntStream_V_V_read;
reg outStream_V_write;
reg OF_yStream_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond_flatten_fu_993_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg   [0:0] tmp_reg_1021;
reg   [0:0] tmp_reg_1021_pp0_iter2_reg;
reg    ap_block_state3_pp0_stage0_iter3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [62:0] lastTagColValidCntSu;
reg   [62:0] lastrefTagValidCntSu;
reg   [111:0] lastSumDataScale2_V;
reg   [15:0] lastSumRefZeroCntSca;
reg    inStream_V_V_blk_n;
wire    ap_block_pp0_stage0;
reg    outStream_V_blk_n;
reg    OF_yStream_V_blk_n;
reg    refZeroCntStream_V_V_blk_n;
reg    tagColValidCntStream_V_V_blk_n;
reg    refTagValidCntStream_V_V_blk_n;
reg   [0:0] exitcond_reg_220;
reg   [2:0] k3_reg_234;
reg   [5:0] indvar_flatten2_reg_248;
wire   [0:0] tmp_fu_425_p2;
reg   [0:0] tmp_reg_1021_pp0_iter1_reg;
wire   [5:0] indvar_flatten_next_fu_431_p2;
reg   [5:0] indvar_flatten_next_reg_1025;
wire   [15:0] tmp_60_fu_455_p2;
reg   [15:0] tmp_60_reg_1030;
wire   [15:0] grp_fu_286_p2;
reg   [15:0] tmp_1441_1_reg_1035;
wire   [15:0] grp_fu_311_p2;
reg   [15:0] tmp_1441_2_reg_1040;
wire   [15:0] grp_fu_336_p2;
reg   [15:0] tmp_1441_3_reg_1045;
wire   [15:0] grp_fu_361_p2;
reg   [15:0] tmp_1441_4_reg_1050;
wire   [15:0] grp_fu_386_p2;
reg   [15:0] tmp_1441_5_reg_1055;
wire   [15:0] grp_fu_411_p2;
reg   [15:0] tmp_1441_6_reg_1060;
wire   [2:0] k_fu_981_p2;
reg   [2:0] k_reg_1065;
wire   [0:0] exitcond3_fu_987_p2;
reg   [0:0] exitcond3_reg_1070;
reg   [0:0] exitcond_flatten_reg_1075;
reg   [0:0] exitcond_flatten_reg_1075_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_1075_pp0_iter2_reg;
reg   [15:0] outputMinData_V_reg_1079;
reg   [7:0] index_reg_1084;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire   [111:0] grp_min_fu_262_inArr_V_read;
wire   [15:0] grp_min_fu_262_ap_return_0;
wire   [7:0] grp_min_fu_262_ap_return_1;
reg    grp_min_fu_262_ap_ce;
reg   [0:0] ap_phi_mux_exitcond_phi_fu_224_p6;
reg   [2:0] ap_phi_mux_k3_phi_fu_238_p6;
reg   [5:0] ap_phi_mux_indvar_flatten2_phi_fu_252_p6;
reg    ap_block_pp0_stage0_01001;
wire   [62:0] p_Result_1048_6_fu_859_p8;
wire   [62:0] p_Result_1051_6_fu_913_p8;
wire   [111:0] tmp_78_fu_805_p8;
wire   [15:0] tmp_79_fu_945_p2;
wire   [15:0] grp_fu_267_p4;
wire   [15:0] grp_fu_277_p4;
wire   [15:0] grp_fu_292_p4;
wire   [15:0] grp_fu_302_p4;
wire   [15:0] grp_fu_317_p4;
wire   [15:0] grp_fu_327_p4;
wire   [15:0] grp_fu_342_p4;
wire   [15:0] grp_fu_352_p4;
wire   [15:0] grp_fu_367_p4;
wire   [15:0] grp_fu_377_p4;
wire   [15:0] grp_fu_392_p4;
wire   [15:0] grp_fu_402_p4;
wire   [2:0] k_mid2_fu_417_p3;
wire   [15:0] tmp_3020_fu_451_p1;
wire   [15:0] tmp_3019_fu_437_p1;
wire   [5:0] tmp_3023_fu_461_p1;
wire   [8:0] tmp_70_fu_473_p1;
wire   [8:0] tmp_3024_fu_469_p1;
wire   [5:0] tmp_3025_fu_483_p1;
wire   [8:0] tmp_71_fu_495_p1;
wire   [8:0] tmp_3026_fu_491_p1;
wire   [5:0] p_Result_1056_1_fu_505_p4;
wire   [8:0] tmp_1448_1_fu_525_p1;
wire   [8:0] p_Result_1057_1_fu_515_p4;
wire   [5:0] p_Result_1058_1_fu_535_p4;
wire   [8:0] tmp_1449_1_fu_555_p1;
wire   [8:0] p_Result_1059_1_fu_545_p4;
wire   [5:0] p_Result_1056_2_fu_565_p4;
wire   [8:0] tmp_1448_2_fu_585_p1;
wire   [8:0] p_Result_1057_2_fu_575_p4;
wire   [5:0] p_Result_1058_2_fu_595_p4;
wire   [8:0] tmp_1449_2_fu_615_p1;
wire   [8:0] p_Result_1059_2_fu_605_p4;
wire   [5:0] p_Result_1056_3_fu_625_p4;
wire   [8:0] tmp_1448_3_fu_645_p1;
wire   [8:0] p_Result_1057_3_fu_635_p4;
wire   [5:0] p_Result_1058_3_fu_655_p4;
wire   [8:0] tmp_1449_3_fu_675_p1;
wire   [8:0] p_Result_1059_3_fu_665_p4;
wire   [5:0] p_Result_1056_4_fu_685_p4;
wire   [8:0] tmp_1448_4_fu_705_p1;
wire   [8:0] p_Result_1057_4_fu_695_p4;
wire   [5:0] p_Result_1058_4_fu_715_p4;
wire   [8:0] tmp_1449_4_fu_735_p1;
wire   [8:0] p_Result_1059_4_fu_725_p4;
wire   [5:0] p_Result_1056_5_fu_745_p4;
wire   [8:0] tmp_1448_5_fu_765_p1;
wire   [8:0] p_Result_1057_5_fu_755_p4;
wire   [5:0] p_Result_1058_5_fu_775_p4;
wire   [8:0] tmp_1449_5_fu_795_p1;
wire   [8:0] p_Result_1059_5_fu_785_p4;
wire   [5:0] p_Result_1056_6_fu_829_p4;
wire   [8:0] tmp_1448_6_fu_849_p1;
wire   [8:0] p_Result_1057_6_fu_839_p4;
wire   [8:0] tmplastTagColValidCn_6_fu_853_p2;
wire   [8:0] tmplastTagColValidCn_5_fu_769_p2;
wire   [8:0] tmplastTagColValidCn_4_fu_709_p2;
wire   [8:0] tmplastTagColValidCn_3_fu_649_p2;
wire   [8:0] tmplastTagColValidCn_2_fu_589_p2;
wire   [8:0] tmplastTagColValidCn_1_fu_529_p2;
wire   [8:0] tmplastTagColValidCn_fu_477_p2;
wire   [5:0] p_Result_1058_6_fu_883_p4;
wire   [8:0] tmp_1449_6_fu_903_p1;
wire   [8:0] p_Result_1059_6_fu_893_p4;
wire   [8:0] tmplastrefTagValidCn_6_fu_907_p2;
wire   [8:0] tmplastrefTagValidCn_5_fu_799_p2;
wire   [8:0] tmplastrefTagValidCn_4_fu_739_p2;
wire   [8:0] tmplastrefTagValidCn_3_fu_679_p2;
wire   [8:0] tmplastrefTagValidCn_2_fu_619_p2;
wire   [8:0] tmplastrefTagValidCn_1_fu_559_p2;
wire   [8:0] tmplastrefTagValidCn_fu_499_p2;
wire   [15:0] tmp_s_fu_937_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_175;
reg    ap_condition_85;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 lastTagColValidCntSu = 63'd0;
#0 lastrefTagValidCntSu = 63'd0;
#0 lastSumDataScale2_V = 112'd0;
#0 lastSumRefZeroCntSca = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

min grp_min_fu_262(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .inArr_V_read(grp_min_fu_262_inArr_V_read),
    .ap_return_0(grp_min_fu_262_ap_return_0),
    .ap_return_1(grp_min_fu_262_ap_return_1),
    .ap_ce(grp_min_fu_262_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_1075 == 1'd0))) begin
        exitcond_reg_220 <= exitcond3_reg_1070;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1075 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        exitcond_reg_220 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_1075 == 1'd0))) begin
        indvar_flatten2_reg_248 <= indvar_flatten_next_reg_1025;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1075 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten2_reg_248 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_1075 == 1'd0))) begin
        k3_reg_234 <= k_reg_1065;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1075 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        k3_reg_234 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((tmp_fu_425_p2 == 1'd1)) begin
            lastSumDataScale2_V <= 112'd0;
        end else if ((tmp_fu_425_p2 == 1'd0)) begin
            lastSumDataScale2_V <= tmp_78_fu_805_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((tmp_fu_425_p2 == 1'd1)) begin
            lastSumRefZeroCntSca <= 16'd0;
        end else if ((tmp_fu_425_p2 == 1'd0)) begin
            lastSumRefZeroCntSca <= tmp_79_fu_945_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((tmp_fu_425_p2 == 1'd1)) begin
            lastTagColValidCntSu <= 63'd0;
        end else if ((tmp_fu_425_p2 == 1'd0)) begin
            lastTagColValidCntSu <= p_Result_1048_6_fu_859_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((tmp_fu_425_p2 == 1'd1)) begin
            lastrefTagValidCntSu <= 63'd0;
        end else if ((tmp_fu_425_p2 == 1'd0)) begin
            lastrefTagValidCntSu <= p_Result_1051_6_fu_913_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond3_reg_1070 <= exitcond3_fu_987_p2;
        indvar_flatten_next_reg_1025 <= indvar_flatten_next_fu_431_p2;
        k_reg_1065 <= k_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_1075 <= exitcond_flatten_fu_993_p2;
        exitcond_flatten_reg_1075_pp0_iter1_reg <= exitcond_flatten_reg_1075;
        tmp_60_reg_1030 <= tmp_60_fu_455_p2;
        tmp_reg_1021 <= tmp_fu_425_p2;
        tmp_reg_1021_pp0_iter1_reg <= tmp_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_1075_pp0_iter2_reg <= exitcond_flatten_reg_1075_pp0_iter1_reg;
        tmp_reg_1021_pp0_iter2_reg <= tmp_reg_1021_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1021_pp0_iter1_reg == 1'd1))) begin
        index_reg_1084 <= grp_min_fu_262_ap_return_1;
        outputMinData_V_reg_1079 <= grp_min_fu_262_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_425_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1441_1_reg_1035 <= grp_fu_286_p2;
        tmp_1441_2_reg_1040 <= grp_fu_311_p2;
        tmp_1441_3_reg_1045 <= grp_fu_336_p2;
        tmp_1441_4_reg_1050 <= grp_fu_361_p2;
        tmp_1441_5_reg_1055 <= grp_fu_386_p2;
        tmp_1441_6_reg_1060 <= grp_fu_411_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_1021_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OF_yStream_V_blk_n = OF_yStream_V_full_n;
    end else begin
        OF_yStream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1021_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OF_yStream_V_write = 1'b1;
    end else begin
        OF_yStream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1075_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_175)) begin
        if ((exitcond_flatten_reg_1075 == 1'd1)) begin
            ap_phi_mux_exitcond_phi_fu_224_p6 = 1'd0;
        end else if ((exitcond_flatten_reg_1075 == 1'd0)) begin
            ap_phi_mux_exitcond_phi_fu_224_p6 = exitcond3_reg_1070;
        end else begin
            ap_phi_mux_exitcond_phi_fu_224_p6 = exitcond_reg_220;
        end
    end else begin
        ap_phi_mux_exitcond_phi_fu_224_p6 = exitcond_reg_220;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_175)) begin
        if ((exitcond_flatten_reg_1075 == 1'd1)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_252_p6 = 6'd0;
        end else if ((exitcond_flatten_reg_1075 == 1'd0)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_252_p6 = indvar_flatten_next_reg_1025;
        end else begin
            ap_phi_mux_indvar_flatten2_phi_fu_252_p6 = indvar_flatten2_reg_248;
        end
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_252_p6 = indvar_flatten2_reg_248;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_175)) begin
        if ((exitcond_flatten_reg_1075 == 1'd1)) begin
            ap_phi_mux_k3_phi_fu_238_p6 = 3'd0;
        end else if ((exitcond_flatten_reg_1075 == 1'd0)) begin
            ap_phi_mux_k3_phi_fu_238_p6 = k_reg_1065;
        end else begin
            ap_phi_mux_k3_phi_fu_238_p6 = k3_reg_234;
        end
    end else begin
        ap_phi_mux_k3_phi_fu_238_p6 = k3_reg_234;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_993_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_min_fu_262_ap_ce = 1'b1;
    end else begin
        grp_min_fu_262_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_V_blk_n = inStream_V_V_empty_n;
    end else begin
        inStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_V_read = 1'b1;
    end else begin
        inStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_1021_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_blk_n = outStream_V_full_n;
    end else begin
        outStream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1021_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_write = 1'b1;
    end else begin
        outStream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        refTagValidCntStream_V_V_blk_n = refTagValidCntStream_V_V_empty_n;
    end else begin
        refTagValidCntStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        refTagValidCntStream_V_V_read = 1'b1;
    end else begin
        refTagValidCntStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        refZeroCntStream_V_V_blk_n = refZeroCntStream_V_V_empty_n;
    end else begin
        refZeroCntStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        refZeroCntStream_V_V_read = 1'b1;
    end else begin
        refZeroCntStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tagColValidCntStream_V_V_blk_n = tagColValidCntStream_V_V_empty_n;
    end else begin
        tagColValidCntStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tagColValidCntStream_V_V_read = 1'b1;
    end else begin
        tagColValidCntStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OF_yStream_V_din = index_reg_1084;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((1'b0 == OF_yStream_V_full_n) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)) | ((outStream_V_full_n == 1'b0) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)))) | ((ap_start == 1'b1) & ((refZeroCntStream_V_V_empty_n == 1'b0) | (refTagValidCntStream_V_V_empty_n == 1'b0) | (tagColValidCntStream_V_V_empty_n == 1'b0) | (inStream_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((1'b0 == OF_yStream_V_full_n) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)) | ((outStream_V_full_n == 1'b0) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)))) | ((ap_start == 1'b1) & ((refZeroCntStream_V_V_empty_n == 1'b0) | (refTagValidCntStream_V_V_empty_n == 1'b0) | (tagColValidCntStream_V_V_empty_n == 1'b0) | (inStream_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((1'b0 == OF_yStream_V_full_n) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)) | ((outStream_V_full_n == 1'b0) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)))) | ((ap_start == 1'b1) & ((refZeroCntStream_V_V_empty_n == 1'b0) | (refTagValidCntStream_V_V_empty_n == 1'b0) | (tagColValidCntStream_V_V_empty_n == 1'b0) | (inStream_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((refZeroCntStream_V_V_empty_n == 1'b0) | (refTagValidCntStream_V_V_empty_n == 1'b0) | (tagColValidCntStream_V_V_empty_n == 1'b0) | (inStream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter3 = (((1'b0 == OF_yStream_V_full_n) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)) | ((outStream_V_full_n == 1'b0) & (tmp_reg_1021_pp0_iter2_reg == 1'd1)));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_175 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_85 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exitcond3_fu_987_p2 = ((k_fu_981_p2 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_993_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_252_p6 == 6'd48) ? 1'b1 : 1'b0);

assign grp_fu_267_p4 = {{inStream_V_V_dout[31:16]}};

assign grp_fu_277_p4 = {{lastSumDataScale2_V[31:16]}};

assign grp_fu_286_p2 = (grp_fu_267_p4 + grp_fu_277_p4);

assign grp_fu_292_p4 = {{inStream_V_V_dout[47:32]}};

assign grp_fu_302_p4 = {{lastSumDataScale2_V[47:32]}};

assign grp_fu_311_p2 = (grp_fu_292_p4 + grp_fu_302_p4);

assign grp_fu_317_p4 = {{inStream_V_V_dout[63:48]}};

assign grp_fu_327_p4 = {{lastSumDataScale2_V[63:48]}};

assign grp_fu_336_p2 = (grp_fu_317_p4 + grp_fu_327_p4);

assign grp_fu_342_p4 = {{inStream_V_V_dout[79:64]}};

assign grp_fu_352_p4 = {{lastSumDataScale2_V[79:64]}};

assign grp_fu_361_p2 = (grp_fu_342_p4 + grp_fu_352_p4);

assign grp_fu_367_p4 = {{inStream_V_V_dout[95:80]}};

assign grp_fu_377_p4 = {{lastSumDataScale2_V[95:80]}};

assign grp_fu_386_p2 = (grp_fu_367_p4 + grp_fu_377_p4);

assign grp_fu_392_p4 = {{inStream_V_V_dout[111:96]}};

assign grp_fu_402_p4 = {{lastSumDataScale2_V[111:96]}};

assign grp_fu_411_p2 = (grp_fu_392_p4 + grp_fu_402_p4);

assign grp_min_fu_262_inArr_V_read = {{{{{{{tmp_1441_6_reg_1060}, {tmp_1441_5_reg_1055}}, {tmp_1441_4_reg_1050}}, {tmp_1441_3_reg_1045}}, {tmp_1441_2_reg_1040}}, {tmp_1441_1_reg_1035}}, {tmp_60_reg_1030}};

assign indvar_flatten_next_fu_431_p2 = (6'd1 + ap_phi_mux_indvar_flatten2_phi_fu_252_p6);

assign k_fu_981_p2 = (k_mid2_fu_417_p3 + 3'd1);

assign k_mid2_fu_417_p3 = ((ap_phi_mux_exitcond_phi_fu_224_p6[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_k3_phi_fu_238_p6);

assign outStream_V_din = outputMinData_V_reg_1079;

assign p_Result_1048_6_fu_859_p8 = {{{{{{{tmplastTagColValidCn_6_fu_853_p2}, {tmplastTagColValidCn_5_fu_769_p2}}, {tmplastTagColValidCn_4_fu_709_p2}}, {tmplastTagColValidCn_3_fu_649_p2}}, {tmplastTagColValidCn_2_fu_589_p2}}, {tmplastTagColValidCn_1_fu_529_p2}}, {tmplastTagColValidCn_fu_477_p2}};

assign p_Result_1051_6_fu_913_p8 = {{{{{{{tmplastrefTagValidCn_6_fu_907_p2}, {tmplastrefTagValidCn_5_fu_799_p2}}, {tmplastrefTagValidCn_4_fu_739_p2}}, {tmplastrefTagValidCn_3_fu_679_p2}}, {tmplastrefTagValidCn_2_fu_619_p2}}, {tmplastrefTagValidCn_1_fu_559_p2}}, {tmplastrefTagValidCn_fu_499_p2}};

assign p_Result_1056_1_fu_505_p4 = {{tagColValidCntStream_V_V_dout[11:6]}};

assign p_Result_1056_2_fu_565_p4 = {{tagColValidCntStream_V_V_dout[17:12]}};

assign p_Result_1056_3_fu_625_p4 = {{tagColValidCntStream_V_V_dout[23:18]}};

assign p_Result_1056_4_fu_685_p4 = {{tagColValidCntStream_V_V_dout[29:24]}};

assign p_Result_1056_5_fu_745_p4 = {{tagColValidCntStream_V_V_dout[35:30]}};

assign p_Result_1056_6_fu_829_p4 = {{tagColValidCntStream_V_V_dout[41:36]}};

assign p_Result_1057_1_fu_515_p4 = {{lastTagColValidCntSu[17:9]}};

assign p_Result_1057_2_fu_575_p4 = {{lastTagColValidCntSu[26:18]}};

assign p_Result_1057_3_fu_635_p4 = {{lastTagColValidCntSu[35:27]}};

assign p_Result_1057_4_fu_695_p4 = {{lastTagColValidCntSu[44:36]}};

assign p_Result_1057_5_fu_755_p4 = {{lastTagColValidCntSu[53:45]}};

assign p_Result_1057_6_fu_839_p4 = {{lastTagColValidCntSu[62:54]}};

assign p_Result_1058_1_fu_535_p4 = {{refTagValidCntStream_V_V_dout[11:6]}};

assign p_Result_1058_2_fu_595_p4 = {{refTagValidCntStream_V_V_dout[17:12]}};

assign p_Result_1058_3_fu_655_p4 = {{refTagValidCntStream_V_V_dout[23:18]}};

assign p_Result_1058_4_fu_715_p4 = {{refTagValidCntStream_V_V_dout[29:24]}};

assign p_Result_1058_5_fu_775_p4 = {{refTagValidCntStream_V_V_dout[35:30]}};

assign p_Result_1058_6_fu_883_p4 = {{refTagValidCntStream_V_V_dout[41:36]}};

assign p_Result_1059_1_fu_545_p4 = {{lastrefTagValidCntSu[17:9]}};

assign p_Result_1059_2_fu_605_p4 = {{lastrefTagValidCntSu[26:18]}};

assign p_Result_1059_3_fu_665_p4 = {{lastrefTagValidCntSu[35:27]}};

assign p_Result_1059_4_fu_725_p4 = {{lastrefTagValidCntSu[44:36]}};

assign p_Result_1059_5_fu_785_p4 = {{lastrefTagValidCntSu[53:45]}};

assign p_Result_1059_6_fu_893_p4 = {{lastrefTagValidCntSu[62:54]}};

assign tmp_1448_1_fu_525_p1 = p_Result_1056_1_fu_505_p4;

assign tmp_1448_2_fu_585_p1 = p_Result_1056_2_fu_565_p4;

assign tmp_1448_3_fu_645_p1 = p_Result_1056_3_fu_625_p4;

assign tmp_1448_4_fu_705_p1 = p_Result_1056_4_fu_685_p4;

assign tmp_1448_5_fu_765_p1 = p_Result_1056_5_fu_745_p4;

assign tmp_1448_6_fu_849_p1 = p_Result_1056_6_fu_829_p4;

assign tmp_1449_1_fu_555_p1 = p_Result_1058_1_fu_535_p4;

assign tmp_1449_2_fu_615_p1 = p_Result_1058_2_fu_595_p4;

assign tmp_1449_3_fu_675_p1 = p_Result_1058_3_fu_655_p4;

assign tmp_1449_4_fu_735_p1 = p_Result_1058_4_fu_715_p4;

assign tmp_1449_5_fu_795_p1 = p_Result_1058_5_fu_775_p4;

assign tmp_1449_6_fu_903_p1 = p_Result_1058_6_fu_883_p4;

assign tmp_3019_fu_437_p1 = inStream_V_V_dout[15:0];

assign tmp_3020_fu_451_p1 = lastSumDataScale2_V[15:0];

assign tmp_3023_fu_461_p1 = tagColValidCntStream_V_V_dout[5:0];

assign tmp_3024_fu_469_p1 = lastTagColValidCntSu[8:0];

assign tmp_3025_fu_483_p1 = refTagValidCntStream_V_V_dout[5:0];

assign tmp_3026_fu_491_p1 = lastrefTagValidCntSu[8:0];

assign tmp_60_fu_455_p2 = (tmp_3020_fu_451_p1 + tmp_3019_fu_437_p1);

assign tmp_70_fu_473_p1 = tmp_3023_fu_461_p1;

assign tmp_71_fu_495_p1 = tmp_3025_fu_483_p1;

assign tmp_78_fu_805_p8 = {{{{{{{grp_fu_411_p2}, {grp_fu_386_p2}}, {grp_fu_361_p2}}, {grp_fu_336_p2}}, {grp_fu_311_p2}}, {grp_fu_286_p2}}, {tmp_60_fu_455_p2}};

assign tmp_79_fu_945_p2 = (tmp_s_fu_937_p1 + lastSumRefZeroCntSca);

assign tmp_fu_425_p2 = ((k_mid2_fu_417_p3 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_s_fu_937_p1 = refZeroCntStream_V_V_dout;

assign tmplastTagColValidCn_1_fu_529_p2 = (tmp_1448_1_fu_525_p1 + p_Result_1057_1_fu_515_p4);

assign tmplastTagColValidCn_2_fu_589_p2 = (tmp_1448_2_fu_585_p1 + p_Result_1057_2_fu_575_p4);

assign tmplastTagColValidCn_3_fu_649_p2 = (tmp_1448_3_fu_645_p1 + p_Result_1057_3_fu_635_p4);

assign tmplastTagColValidCn_4_fu_709_p2 = (tmp_1448_4_fu_705_p1 + p_Result_1057_4_fu_695_p4);

assign tmplastTagColValidCn_5_fu_769_p2 = (tmp_1448_5_fu_765_p1 + p_Result_1057_5_fu_755_p4);

assign tmplastTagColValidCn_6_fu_853_p2 = (tmp_1448_6_fu_849_p1 + p_Result_1057_6_fu_839_p4);

assign tmplastTagColValidCn_fu_477_p2 = (tmp_70_fu_473_p1 + tmp_3024_fu_469_p1);

assign tmplastrefTagValidCn_1_fu_559_p2 = (tmp_1449_1_fu_555_p1 + p_Result_1059_1_fu_545_p4);

assign tmplastrefTagValidCn_2_fu_619_p2 = (tmp_1449_2_fu_615_p1 + p_Result_1059_2_fu_605_p4);

assign tmplastrefTagValidCn_3_fu_679_p2 = (tmp_1449_3_fu_675_p1 + p_Result_1059_3_fu_665_p4);

assign tmplastrefTagValidCn_4_fu_739_p2 = (tmp_1449_4_fu_735_p1 + p_Result_1059_4_fu_725_p4);

assign tmplastrefTagValidCn_5_fu_799_p2 = (tmp_1449_5_fu_795_p1 + p_Result_1059_5_fu_785_p4);

assign tmplastrefTagValidCn_6_fu_907_p2 = (tmp_1449_6_fu_903_p1 + p_Result_1059_6_fu_893_p4);

assign tmplastrefTagValidCn_fu_499_p2 = (tmp_71_fu_495_p1 + tmp_3026_fu_491_p1);

endmodule //accumulateStreamScal_1
