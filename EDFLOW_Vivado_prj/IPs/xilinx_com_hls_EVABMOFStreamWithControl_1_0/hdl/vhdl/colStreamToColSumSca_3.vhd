-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity colStreamToColSumSca_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    colStream0_V_V_dout : IN STD_LOGIC_VECTOR (75 downto 0);
    colStream0_V_V_empty_n : IN STD_LOGIC;
    colStream0_V_V_read : OUT STD_LOGIC;
    colStream1_V_V_dout : IN STD_LOGIC_VECTOR (75 downto 0);
    colStream1_V_V_empty_n : IN STD_LOGIC;
    colStream1_V_V_read : OUT STD_LOGIC;
    refZeroCntStream_V_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    refZeroCntStream_V_V_full_n : IN STD_LOGIC;
    refZeroCntStream_V_V_write : OUT STD_LOGIC;
    outStream_V_V_din : OUT STD_LOGIC_VECTOR (111 downto 0);
    outStream_V_V_full_n : IN STD_LOGIC;
    outStream_V_V_write : OUT STD_LOGIC;
    tagColValidCntStream_V_V_din : OUT STD_LOGIC_VECTOR (41 downto 0);
    tagColValidCntStream_V_V_full_n : IN STD_LOGIC;
    tagColValidCntStream_V_V_write : OUT STD_LOGIC;
    refTagValidCntStream_V_V_din : OUT STD_LOGIC_VECTOR (41 downto 0);
    refTagValidCntStream_V_V_full_n : IN STD_LOGIC;
    refTagValidCntStream_V_V_write : OUT STD_LOGIC );
end;


architecture behav of colStreamToColSumSca_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exitcond_flatten_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter5 : BOOLEAN;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal colStream0_V_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal colStream1_V_V_blk_n : STD_LOGIC;
    signal outStream_V_V_blk_n : STD_LOGIC;
    signal refZeroCntStream_V_V_blk_n : STD_LOGIC;
    signal tagColValidCntStream_V_V_blk_n : STD_LOGIC;
    signal refTagValidCntStream_V_V_blk_n : STD_LOGIC;
    signal indvar_flatten2_reg_204 : STD_LOGIC_VECTOR (6 downto 0);
    signal in2_0_V_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_0_V_reg_749 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_1_V_reg_755 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_2_V_reg_761 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_3_V_reg_767 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_3_V_reg_773 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_4_V_reg_779 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_4_V_reg_785 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_5_V_reg_791 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_5_V_reg_797 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_6_V_reg_803 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_6_V_reg_809 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_7_V_reg_815 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_7_V_reg_821 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_8_V_reg_827 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_8_V_reg_833 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_9_V_reg_839 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_9_V_reg_845 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_10_V_reg_851 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_10_V_reg_857 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_11_V_reg_863 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_11_V_reg_869 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_12_V_reg_875 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_12_V_reg_881 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_13_V_reg_887 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_13_V_reg_893 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_14_V_reg_899 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_14_V_reg_905 : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_15_V_reg_911 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_15_V_reg_917 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_16_V_reg_923 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_17_V_reg_929 : STD_LOGIC_VECTOR (3 downto 0);
    signal in2_18_V_reg_935 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_fu_604_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_941 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten_reg_946 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_946_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_946_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_946_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_946_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_200_reg_950 : STD_LOGIC_VECTOR (5 downto 0);
    signal tagColValidCnt_reg_955 : STD_LOGIC_VECTOR (5 downto 0);
    signal tagColValidCnt_1_reg_960 : STD_LOGIC_VECTOR (5 downto 0);
    signal tagColValidCnt_2_reg_965 : STD_LOGIC_VECTOR (5 downto 0);
    signal tagColValidCnt_3_reg_970 : STD_LOGIC_VECTOR (5 downto 0);
    signal tagColValidCnt_4_reg_975 : STD_LOGIC_VECTOR (5 downto 0);
    signal tagColValidCnt_5_reg_980 : STD_LOGIC_VECTOR (5 downto 0);
    signal tagColValidCnt_6_reg_985 : STD_LOGIC_VECTOR (5 downto 0);
    signal refTagValidPixCnt_reg_990 : STD_LOGIC_VECTOR (5 downto 0);
    signal refTagValidPixCnt_1_reg_995 : STD_LOGIC_VECTOR (5 downto 0);
    signal refTagValidPixCnt_2_reg_1000 : STD_LOGIC_VECTOR (5 downto 0);
    signal refTagValidPixCnt_3_reg_1005 : STD_LOGIC_VECTOR (5 downto 0);
    signal refTagValidPixCnt_4_reg_1010 : STD_LOGIC_VECTOR (5 downto 0);
    signal refTagValidPixCnt_5_reg_1015 : STD_LOGIC_VECTOR (5 downto 0);
    signal refTagValidPixCnt_6_reg_1020 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_colSADSumScale1_fu_218_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_colSADSumScale1_fu_218_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_colSADSumScale1_fu_218_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_colSADSumScale1_fu_218_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_colSADSumScale1_fu_218_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_colSADSumScale1_fu_218_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_colSADSumScale1_fu_218_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_colSADSumScale1_fu_218_ap_ce : STD_LOGIC;
    signal grp_colZeroCntScale1_fu_254_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_5 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_6 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_7 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_9 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_10 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_11 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_12 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_13 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_return_14 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_colZeroCntScale1_fu_254_ap_ce : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten2_phi_fu_208_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_475 : BOOLEAN;

    component colSADSumScale1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        t1Col_3_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_4_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_5_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_6_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_7_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_8_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_9_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_10_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_11_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_12_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_13_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_14_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_15_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_0_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_1_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_2_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_3_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_4_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_5_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_6_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_7_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_8_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_9_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_10_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_11_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_12_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_13_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_14_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_15_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_16_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_17_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_18_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component colZeroCntScale1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        t1Col_3_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_4_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_5_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_6_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_7_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_8_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_9_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_10_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_11_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_12_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_13_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_14_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t1Col_15_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_0_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_1_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_2_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_3_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_4_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_5_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_6_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_7_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_8_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_9_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_10_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_11_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_12_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_13_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_14_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_15_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_16_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_17_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        t2Col_18_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_colSADSumScale1_fu_218 : component colSADSumScale1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        t1Col_3_V_read => in1_3_V_reg_767,
        t1Col_4_V_read => in1_4_V_reg_779,
        t1Col_5_V_read => in1_5_V_reg_791,
        t1Col_6_V_read => in1_6_V_reg_803,
        t1Col_7_V_read => in1_7_V_reg_815,
        t1Col_8_V_read => in1_8_V_reg_827,
        t1Col_9_V_read => in1_9_V_reg_839,
        t1Col_10_V_read => in1_10_V_reg_851,
        t1Col_11_V_read => in1_11_V_reg_863,
        t1Col_12_V_read => in1_12_V_reg_875,
        t1Col_13_V_read => in1_13_V_reg_887,
        t1Col_14_V_read => in1_14_V_reg_899,
        t1Col_15_V_read => in1_15_V_reg_911,
        t2Col_0_V_read => in2_0_V_reg_749,
        t2Col_1_V_read => in2_1_V_reg_755,
        t2Col_2_V_read => in2_2_V_reg_761,
        t2Col_3_V_read => in2_3_V_reg_773,
        t2Col_4_V_read => in2_4_V_reg_785,
        t2Col_5_V_read => in2_5_V_reg_797,
        t2Col_6_V_read => in2_6_V_reg_809,
        t2Col_7_V_read => in2_7_V_reg_821,
        t2Col_8_V_read => in2_8_V_reg_833,
        t2Col_9_V_read => in2_9_V_reg_845,
        t2Col_10_V_read => in2_10_V_reg_857,
        t2Col_11_V_read => in2_11_V_reg_869,
        t2Col_12_V_read => in2_12_V_reg_881,
        t2Col_13_V_read => in2_13_V_reg_893,
        t2Col_14_V_read => in2_14_V_reg_905,
        t2Col_15_V_read => in2_15_V_reg_917,
        t2Col_16_V_read => in2_16_V_reg_923,
        t2Col_17_V_read => in2_17_V_reg_929,
        t2Col_18_V_read => in2_18_V_reg_935,
        ap_return_0 => grp_colSADSumScale1_fu_218_ap_return_0,
        ap_return_1 => grp_colSADSumScale1_fu_218_ap_return_1,
        ap_return_2 => grp_colSADSumScale1_fu_218_ap_return_2,
        ap_return_3 => grp_colSADSumScale1_fu_218_ap_return_3,
        ap_return_4 => grp_colSADSumScale1_fu_218_ap_return_4,
        ap_return_5 => grp_colSADSumScale1_fu_218_ap_return_5,
        ap_return_6 => grp_colSADSumScale1_fu_218_ap_return_6,
        ap_ce => grp_colSADSumScale1_fu_218_ap_ce);

    grp_colZeroCntScale1_fu_254 : component colZeroCntScale1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        t1Col_3_V_read => in1_3_V_reg_767,
        t1Col_4_V_read => in1_4_V_reg_779,
        t1Col_5_V_read => in1_5_V_reg_791,
        t1Col_6_V_read => in1_6_V_reg_803,
        t1Col_7_V_read => in1_7_V_reg_815,
        t1Col_8_V_read => in1_8_V_reg_827,
        t1Col_9_V_read => in1_9_V_reg_839,
        t1Col_10_V_read => in1_10_V_reg_851,
        t1Col_11_V_read => in1_11_V_reg_863,
        t1Col_12_V_read => in1_12_V_reg_875,
        t1Col_13_V_read => in1_13_V_reg_887,
        t1Col_14_V_read => in1_14_V_reg_899,
        t1Col_15_V_read => in1_15_V_reg_911,
        t2Col_0_V_read => in2_0_V_reg_749,
        t2Col_1_V_read => in2_1_V_reg_755,
        t2Col_2_V_read => in2_2_V_reg_761,
        t2Col_3_V_read => in2_3_V_reg_773,
        t2Col_4_V_read => in2_4_V_reg_785,
        t2Col_5_V_read => in2_5_V_reg_797,
        t2Col_6_V_read => in2_6_V_reg_809,
        t2Col_7_V_read => in2_7_V_reg_821,
        t2Col_8_V_read => in2_8_V_reg_833,
        t2Col_9_V_read => in2_9_V_reg_845,
        t2Col_10_V_read => in2_10_V_reg_857,
        t2Col_11_V_read => in2_11_V_reg_869,
        t2Col_12_V_read => in2_12_V_reg_881,
        t2Col_13_V_read => in2_13_V_reg_893,
        t2Col_14_V_read => in2_14_V_reg_905,
        t2Col_15_V_read => in2_15_V_reg_917,
        t2Col_16_V_read => in2_16_V_reg_923,
        t2Col_17_V_read => in2_17_V_reg_929,
        t2Col_18_V_read => in2_18_V_reg_935,
        ap_return_0 => grp_colZeroCntScale1_fu_254_ap_return_0,
        ap_return_1 => grp_colZeroCntScale1_fu_254_ap_return_1,
        ap_return_2 => grp_colZeroCntScale1_fu_254_ap_return_2,
        ap_return_3 => grp_colZeroCntScale1_fu_254_ap_return_3,
        ap_return_4 => grp_colZeroCntScale1_fu_254_ap_return_4,
        ap_return_5 => grp_colZeroCntScale1_fu_254_ap_return_5,
        ap_return_6 => grp_colZeroCntScale1_fu_254_ap_return_6,
        ap_return_7 => grp_colZeroCntScale1_fu_254_ap_return_7,
        ap_return_8 => grp_colZeroCntScale1_fu_254_ap_return_8,
        ap_return_9 => grp_colZeroCntScale1_fu_254_ap_return_9,
        ap_return_10 => grp_colZeroCntScale1_fu_254_ap_return_10,
        ap_return_11 => grp_colZeroCntScale1_fu_254_ap_return_11,
        ap_return_12 => grp_colZeroCntScale1_fu_254_ap_return_12,
        ap_return_13 => grp_colZeroCntScale1_fu_254_ap_return_13,
        ap_return_14 => grp_colZeroCntScale1_fu_254_ap_return_14,
        ap_ce => grp_colZeroCntScale1_fu_254_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten2_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_946 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten2_reg_204 <= indvar_flatten_next_reg_941;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_946 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten2_reg_204 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_946 <= exitcond_flatten_fu_610_p2;
                exitcond_flatten_reg_946_pp0_iter1_reg <= exitcond_flatten_reg_946;
                in1_10_V_reg_851 <= colStream0_V_V_dout(43 downto 40);
                in1_11_V_reg_863 <= colStream0_V_V_dout(47 downto 44);
                in1_12_V_reg_875 <= colStream0_V_V_dout(51 downto 48);
                in1_13_V_reg_887 <= colStream0_V_V_dout(55 downto 52);
                in1_14_V_reg_899 <= colStream0_V_V_dout(59 downto 56);
                in1_15_V_reg_911 <= colStream0_V_V_dout(63 downto 60);
                in1_3_V_reg_767 <= colStream0_V_V_dout(15 downto 12);
                in1_4_V_reg_779 <= colStream0_V_V_dout(19 downto 16);
                in1_5_V_reg_791 <= colStream0_V_V_dout(23 downto 20);
                in1_6_V_reg_803 <= colStream0_V_V_dout(27 downto 24);
                in1_7_V_reg_815 <= colStream0_V_V_dout(31 downto 28);
                in1_8_V_reg_827 <= colStream0_V_V_dout(35 downto 32);
                in1_9_V_reg_839 <= colStream0_V_V_dout(39 downto 36);
                in2_0_V_reg_749 <= in2_0_V_fu_290_p1;
                in2_10_V_reg_857 <= colStream1_V_V_dout(43 downto 40);
                in2_11_V_reg_869 <= colStream1_V_V_dout(47 downto 44);
                in2_12_V_reg_881 <= colStream1_V_V_dout(51 downto 48);
                in2_13_V_reg_893 <= colStream1_V_V_dout(55 downto 52);
                in2_14_V_reg_905 <= colStream1_V_V_dout(59 downto 56);
                in2_15_V_reg_917 <= colStream1_V_V_dout(63 downto 60);
                in2_16_V_reg_923 <= colStream1_V_V_dout(67 downto 64);
                in2_17_V_reg_929 <= colStream1_V_V_dout(71 downto 68);
                in2_18_V_reg_935 <= colStream1_V_V_dout(75 downto 72);
                in2_1_V_reg_755 <= colStream1_V_V_dout(7 downto 4);
                in2_2_V_reg_761 <= colStream1_V_V_dout(11 downto 8);
                in2_3_V_reg_773 <= colStream1_V_V_dout(15 downto 12);
                in2_4_V_reg_785 <= colStream1_V_V_dout(19 downto 16);
                in2_5_V_reg_797 <= colStream1_V_V_dout(23 downto 20);
                in2_6_V_reg_809 <= colStream1_V_V_dout(27 downto 24);
                in2_7_V_reg_821 <= colStream1_V_V_dout(31 downto 28);
                in2_8_V_reg_833 <= colStream1_V_V_dout(35 downto 32);
                in2_9_V_reg_845 <= colStream1_V_V_dout(39 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_946_pp0_iter2_reg <= exitcond_flatten_reg_946_pp0_iter1_reg;
                exitcond_flatten_reg_946_pp0_iter3_reg <= exitcond_flatten_reg_946_pp0_iter2_reg;
                exitcond_flatten_reg_946_pp0_iter4_reg <= exitcond_flatten_reg_946_pp0_iter3_reg;
                refTagValidPixCnt_1_reg_995 <= grp_colZeroCntScale1_fu_254_ap_return_9;
                refTagValidPixCnt_2_reg_1000 <= grp_colZeroCntScale1_fu_254_ap_return_10;
                refTagValidPixCnt_3_reg_1005 <= grp_colZeroCntScale1_fu_254_ap_return_11;
                refTagValidPixCnt_4_reg_1010 <= grp_colZeroCntScale1_fu_254_ap_return_12;
                refTagValidPixCnt_5_reg_1015 <= grp_colZeroCntScale1_fu_254_ap_return_13;
                refTagValidPixCnt_6_reg_1020 <= grp_colZeroCntScale1_fu_254_ap_return_14;
                refTagValidPixCnt_reg_990 <= grp_colZeroCntScale1_fu_254_ap_return_8;
                tagColValidCnt_1_reg_960 <= grp_colZeroCntScale1_fu_254_ap_return_2;
                tagColValidCnt_2_reg_965 <= grp_colZeroCntScale1_fu_254_ap_return_3;
                tagColValidCnt_3_reg_970 <= grp_colZeroCntScale1_fu_254_ap_return_4;
                tagColValidCnt_4_reg_975 <= grp_colZeroCntScale1_fu_254_ap_return_5;
                tagColValidCnt_5_reg_980 <= grp_colZeroCntScale1_fu_254_ap_return_6;
                tagColValidCnt_6_reg_985 <= grp_colZeroCntScale1_fu_254_ap_return_7;
                tagColValidCnt_reg_955 <= grp_colZeroCntScale1_fu_254_ap_return_1;
                tmp_V_200_reg_950 <= grp_colZeroCntScale1_fu_254_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_941 <= indvar_flatten_next_fu_604_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, colStream0_V_V_empty_n, colStream1_V_V_empty_n, refZeroCntStream_V_V_full_n, outStream_V_V_full_n, tagColValidCntStream_V_V_full_n, refTagValidCntStream_V_V_full_n, ap_enable_reg_pp0_iter5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((refTagValidCntStream_V_V_full_n = ap_const_logic_0) or (tagColValidCntStream_V_V_full_n = ap_const_logic_0) or (outStream_V_V_full_n = ap_const_logic_0) or (refZeroCntStream_V_V_full_n = ap_const_logic_0))) or ((ap_start = ap_const_logic_1) and ((colStream1_V_V_empty_n = ap_const_logic_0) or (colStream0_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, colStream0_V_V_empty_n, colStream1_V_V_empty_n, refZeroCntStream_V_V_full_n, outStream_V_V_full_n, tagColValidCntStream_V_V_full_n, refTagValidCntStream_V_V_full_n, ap_enable_reg_pp0_iter5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((refTagValidCntStream_V_V_full_n = ap_const_logic_0) or (tagColValidCntStream_V_V_full_n = ap_const_logic_0) or (outStream_V_V_full_n = ap_const_logic_0) or (refZeroCntStream_V_V_full_n = ap_const_logic_0))) or ((ap_start = ap_const_logic_1) and ((colStream1_V_V_empty_n = ap_const_logic_0) or (colStream0_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, colStream0_V_V_empty_n, colStream1_V_V_empty_n, refZeroCntStream_V_V_full_n, outStream_V_V_full_n, tagColValidCntStream_V_V_full_n, refTagValidCntStream_V_V_full_n, ap_enable_reg_pp0_iter5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((refTagValidCntStream_V_V_full_n = ap_const_logic_0) or (tagColValidCntStream_V_V_full_n = ap_const_logic_0) or (outStream_V_V_full_n = ap_const_logic_0) or (refZeroCntStream_V_V_full_n = ap_const_logic_0))) or ((ap_start = ap_const_logic_1) and ((colStream1_V_V_empty_n = ap_const_logic_0) or (colStream0_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(colStream0_V_V_empty_n, colStream1_V_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((colStream1_V_V_empty_n = ap_const_logic_0) or (colStream0_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter5_assign_proc : process(refZeroCntStream_V_V_full_n, outStream_V_V_full_n, tagColValidCntStream_V_V_full_n, refTagValidCntStream_V_V_full_n)
    begin
                ap_block_state3_pp0_stage0_iter5 <= ((refTagValidCntStream_V_V_full_n = ap_const_logic_0) or (tagColValidCntStream_V_V_full_n = ap_const_logic_0) or (outStream_V_V_full_n = ap_const_logic_0) or (refZeroCntStream_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_475_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_475 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, exitcond_flatten_reg_946_pp0_iter4_reg)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_946_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten2_phi_fu_208_p6_assign_proc : process(indvar_flatten2_reg_204, indvar_flatten_next_reg_941, exitcond_flatten_reg_946, ap_condition_475)
    begin
        if ((ap_const_boolean_1 = ap_condition_475)) then
            if ((exitcond_flatten_reg_946 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_208_p6 <= ap_const_lv7_0;
            elsif ((exitcond_flatten_reg_946 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_208_p6 <= indvar_flatten_next_reg_941;
            else 
                ap_phi_mux_indvar_flatten2_phi_fu_208_p6 <= indvar_flatten2_reg_204;
            end if;
        else 
            ap_phi_mux_indvar_flatten2_phi_fu_208_p6 <= indvar_flatten2_reg_204;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, exitcond_flatten_fu_610_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_610_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    colStream0_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, colStream0_V_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            colStream0_V_V_blk_n <= colStream0_V_V_empty_n;
        else 
            colStream0_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    colStream0_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            colStream0_V_V_read <= ap_const_logic_1;
        else 
            colStream0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    colStream1_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, colStream1_V_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            colStream1_V_V_blk_n <= colStream1_V_V_empty_n;
        else 
            colStream1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    colStream1_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            colStream1_V_V_read <= ap_const_logic_1;
        else 
            colStream1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_610_p2 <= "1" when (ap_phi_mux_indvar_flatten2_phi_fu_208_p6 = ap_const_lv7_5A) else "0";

    grp_colSADSumScale1_fu_218_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_colSADSumScale1_fu_218_ap_ce <= ap_const_logic_1;
        else 
            grp_colSADSumScale1_fu_218_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_colZeroCntScale1_fu_254_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_colZeroCntScale1_fu_254_ap_ce <= ap_const_logic_1;
        else 
            grp_colZeroCntScale1_fu_254_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    in2_0_V_fu_290_p1 <= colStream1_V_V_dout(4 - 1 downto 0);
    indvar_flatten_next_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_indvar_flatten2_phi_fu_208_p6));

    outStream_V_V_blk_n_assign_proc : process(outStream_V_V_full_n, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            outStream_V_V_blk_n <= outStream_V_V_full_n;
        else 
            outStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_V_V_din <= ((((((grp_colSADSumScale1_fu_218_ap_return_6 & grp_colSADSumScale1_fu_218_ap_return_5) & grp_colSADSumScale1_fu_218_ap_return_4) & grp_colSADSumScale1_fu_218_ap_return_3) & grp_colSADSumScale1_fu_218_ap_return_2) & grp_colSADSumScale1_fu_218_ap_return_1) & grp_colSADSumScale1_fu_218_ap_return_0);

    outStream_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            outStream_V_V_write <= ap_const_logic_1;
        else 
            outStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    refTagValidCntStream_V_V_blk_n_assign_proc : process(refTagValidCntStream_V_V_full_n, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            refTagValidCntStream_V_V_blk_n <= refTagValidCntStream_V_V_full_n;
        else 
            refTagValidCntStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    refTagValidCntStream_V_V_din <= ((((((refTagValidPixCnt_6_reg_1020 & refTagValidPixCnt_5_reg_1015) & refTagValidPixCnt_4_reg_1010) & refTagValidPixCnt_3_reg_1005) & refTagValidPixCnt_2_reg_1000) & refTagValidPixCnt_1_reg_995) & refTagValidPixCnt_reg_990);

    refTagValidCntStream_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            refTagValidCntStream_V_V_write <= ap_const_logic_1;
        else 
            refTagValidCntStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    refZeroCntStream_V_V_blk_n_assign_proc : process(refZeroCntStream_V_V_full_n, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            refZeroCntStream_V_V_blk_n <= refZeroCntStream_V_V_full_n;
        else 
            refZeroCntStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    refZeroCntStream_V_V_din <= tmp_V_200_reg_950;

    refZeroCntStream_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            refZeroCntStream_V_V_write <= ap_const_logic_1;
        else 
            refZeroCntStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    tagColValidCntStream_V_V_blk_n_assign_proc : process(tagColValidCntStream_V_V_full_n, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            tagColValidCntStream_V_V_blk_n <= tagColValidCntStream_V_V_full_n;
        else 
            tagColValidCntStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tagColValidCntStream_V_V_din <= ((((((tagColValidCnt_6_reg_985 & tagColValidCnt_5_reg_980) & tagColValidCnt_4_reg_975) & tagColValidCnt_3_reg_970) & tagColValidCnt_2_reg_965) & tagColValidCnt_1_reg_960) & tagColValidCnt_reg_955);

    tagColValidCntStream_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            tagColValidCntStream_V_V_write <= ap_const_logic_1;
        else 
            tagColValidCntStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
