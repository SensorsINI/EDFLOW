-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sadScale2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    refBlock_0_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
    refBlock_1_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
    refBlock_2_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
    refBlock_3_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
    refBlock_4_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
    refBlock_5_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
    refBlock_6_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_0_V_re : IN STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_1_V_re : IN STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_2_V_re : IN STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_3_V_re : IN STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_4_V_re : IN STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_5_V_re : IN STD_LOGIC_VECTOR (3 downto 0);
    targetBlocks_6_V_re : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (6 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of sadScale2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal sum_0_V_fu_155_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_0_V_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sum_1_V_fu_169_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_V_reg_250 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_V_fu_183_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_V_reg_255 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_3_V_fu_197_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_3_V_reg_260 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_4_V_fu_211_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_4_V_reg_265 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_5_V_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_5_V_reg_270 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_6_V_fu_239_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_6_V_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal sadRet_write_assign_sadSumScale2_fu_136_ap_ready : STD_LOGIC;
    signal sadRet_write_assign_sadSumScale2_fu_136_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sum_0_V_fu_155_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_0_V_fu_155_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_V_fu_169_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_V_fu_169_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_V_fu_183_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_V_fu_183_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_3_V_fu_197_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_3_V_fu_197_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_4_V_fu_211_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_4_V_fu_211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_5_V_fu_225_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_5_V_fu_225_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_6_V_fu_239_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_6_V_fu_239_p1 : STD_LOGIC_VECTOR (4 downto 0);

    component sadSumScale2 IS
    port (
        ap_ready : OUT STD_LOGIC;
        sum_0_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
        sum_1_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
        sum_2_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
        sum_3_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
        sum_4_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
        sum_5_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
        sum_6_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component EVABMOFStreamWithMgi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    sadRet_write_assign_sadSumScale2_fu_136 : component sadSumScale2
    port map (
        ap_ready => sadRet_write_assign_sadSumScale2_fu_136_ap_ready,
        sum_0_V_read => sum_0_V_reg_245,
        sum_1_V_read => sum_1_V_reg_250,
        sum_2_V_read => sum_2_V_reg_255,
        sum_3_V_read => sum_3_V_reg_260,
        sum_4_V_read => sum_4_V_reg_265,
        sum_5_V_read => sum_5_V_reg_270,
        sum_6_V_read => sum_6_V_reg_275,
        ap_return => sadRet_write_assign_sadSumScale2_fu_136_ap_return);

    EVABMOFStreamWithMgi_U67 : component EVABMOFStreamWithMgi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => sum_0_V_fu_155_p0,
        din1 => sum_0_V_fu_155_p1,
        dout => sum_0_V_fu_155_p2);

    EVABMOFStreamWithMgi_U68 : component EVABMOFStreamWithMgi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => sum_1_V_fu_169_p0,
        din1 => sum_1_V_fu_169_p1,
        dout => sum_1_V_fu_169_p2);

    EVABMOFStreamWithMgi_U69 : component EVABMOFStreamWithMgi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => sum_2_V_fu_183_p0,
        din1 => sum_2_V_fu_183_p1,
        dout => sum_2_V_fu_183_p2);

    EVABMOFStreamWithMgi_U70 : component EVABMOFStreamWithMgi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => sum_3_V_fu_197_p0,
        din1 => sum_3_V_fu_197_p1,
        dout => sum_3_V_fu_197_p2);

    EVABMOFStreamWithMgi_U71 : component EVABMOFStreamWithMgi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => sum_4_V_fu_211_p0,
        din1 => sum_4_V_fu_211_p1,
        dout => sum_4_V_fu_211_p2);

    EVABMOFStreamWithMgi_U72 : component EVABMOFStreamWithMgi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => sum_5_V_fu_225_p0,
        din1 => sum_5_V_fu_225_p1,
        dout => sum_5_V_fu_225_p2);

    EVABMOFStreamWithMgi_U73 : component EVABMOFStreamWithMgi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => sum_6_V_fu_239_p0,
        din1 => sum_6_V_fu_239_p1,
        dout => sum_6_V_fu_239_p2);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                sum_0_V_reg_245 <= sum_0_V_fu_155_p2;
                sum_1_V_reg_250 <= sum_1_V_fu_169_p2;
                sum_2_V_reg_255 <= sum_2_V_fu_183_p2;
                sum_3_V_reg_260 <= sum_3_V_fu_197_p2;
                sum_4_V_reg_265 <= sum_4_V_fu_211_p2;
                sum_5_V_reg_270 <= sum_5_V_fu_225_p2;
                sum_6_V_reg_275 <= sum_6_V_fu_239_p2;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= sadRet_write_assign_sadSumScale2_fu_136_ap_return;
    sum_0_V_fu_155_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(refBlock_0_V_read),5));
    sum_0_V_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(targetBlocks_0_V_re),5));
    sum_1_V_fu_169_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(refBlock_1_V_read),5));
    sum_1_V_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(targetBlocks_1_V_re),5));
    sum_2_V_fu_183_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(refBlock_2_V_read),5));
    sum_2_V_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(targetBlocks_2_V_re),5));
    sum_3_V_fu_197_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(refBlock_3_V_read),5));
    sum_3_V_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(targetBlocks_3_V_re),5));
    sum_4_V_fu_211_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(refBlock_4_V_read),5));
    sum_4_V_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(targetBlocks_4_V_re),5));
    sum_5_V_fu_225_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(refBlock_5_V_read),5));
    sum_5_V_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(targetBlocks_5_V_re),5));
    sum_6_V_fu_239_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(refBlock_6_V_read),5));
    sum_6_V_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(targetBlocks_6_V_re),5));
end behav;
