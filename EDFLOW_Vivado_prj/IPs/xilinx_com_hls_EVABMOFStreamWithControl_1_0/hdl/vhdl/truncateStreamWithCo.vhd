-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity truncateStreamWithCo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    packetEventDataStream_V_V_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    packetEventDataStream_V_V_full_n : IN STD_LOGIC;
    packetEventDataStream_V_V_write : OUT STD_LOGIC;
    xStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    xStreamOut_V_V_full_n : IN STD_LOGIC;
    xStreamOut_V_V_write : OUT STD_LOGIC;
    yStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    yStreamOut_V_V_full_n : IN STD_LOGIC;
    yStreamOut_V_V_write : OUT STD_LOGIC;
    tsStreamOut_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    tsStreamOut_V_full_n : IN STD_LOGIC;
    tsStreamOut_V_write : OUT STD_LOGIC;
    select_V1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V1_full_n : IN STD_LOGIC;
    select_V1_write : OUT STD_LOGIC;
    select_V2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V2_full_n : IN STD_LOGIC;
    select_V2_write : OUT STD_LOGIC;
    select_V3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V3_full_n : IN STD_LOGIC;
    select_V3_write : OUT STD_LOGIC;
    select_V4_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V4_full_n : IN STD_LOGIC;
    select_V4_write : OUT STD_LOGIC;
    select_V5_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V5_full_n : IN STD_LOGIC;
    select_V5_write : OUT STD_LOGIC;
    select_V6_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V6_full_n : IN STD_LOGIC;
    select_V6_write : OUT STD_LOGIC;
    select_V7_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V7_full_n : IN STD_LOGIC;
    select_V7_write : OUT STD_LOGIC;
    select_V8_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V8_full_n : IN STD_LOGIC;
    select_V8_write : OUT STD_LOGIC;
    select_V9_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V9_full_n : IN STD_LOGIC;
    select_V9_write : OUT STD_LOGIC;
    select_V10_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V10_full_n : IN STD_LOGIC;
    select_V10_write : OUT STD_LOGIC;
    select_V11_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V11_full_n : IN STD_LOGIC;
    select_V11_write : OUT STD_LOGIC;
    select_V12_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V12_full_n : IN STD_LOGIC;
    select_V12_write : OUT STD_LOGIC;
    select_V13_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V13_full_n : IN STD_LOGIC;
    select_V13_write : OUT STD_LOGIC;
    select_V14_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V14_full_n : IN STD_LOGIC;
    select_V14_write : OUT STD_LOGIC;
    select_V15_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V15_full_n : IN STD_LOGIC;
    select_V15_write : OUT STD_LOGIC;
    select_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V_full_n : IN STD_LOGIC;
    select_V_write : OUT STD_LOGIC;
    select_V_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    select_V_2_full_n : IN STD_LOGIC;
    select_V_2_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    xStreamIn_V_V_TVALID : IN STD_LOGIC;
    xStreamIn_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn_V_V_TVALID : IN STD_LOGIC;
    yStreamIn_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    polStreamIn_V_V_TVALID : IN STD_LOGIC;
    polStreamIn_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    tsStreamIn_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn_V_V_TREADY : OUT STD_LOGIC;
    controlStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    controlStreamIn_V_V_TVALID : IN STD_LOGIC;
    controlStreamIn_V_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of truncateStreamWithCo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal xStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal yStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal polStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal controlStreamIn_V_V_0_vld_out : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal xStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal xStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal xStreamIn_V_V_0_sel : STD_LOGIC;
    signal xStreamIn_V_V_0_load_A : STD_LOGIC;
    signal xStreamIn_V_V_0_load_B : STD_LOGIC;
    signal xStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal yStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal yStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal yStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal yStreamIn_V_V_0_sel : STD_LOGIC;
    signal yStreamIn_V_V_0_load_A : STD_LOGIC;
    signal yStreamIn_V_V_0_load_B : STD_LOGIC;
    signal yStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal polStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal polStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal polStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal polStreamIn_V_V_0_sel : STD_LOGIC;
    signal polStreamIn_V_V_0_load_A : STD_LOGIC;
    signal polStreamIn_V_V_0_load_B : STD_LOGIC;
    signal polStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal tsStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal tsStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal tsStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal tsStreamIn_V_V_0_sel : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_A : STD_LOGIC;
    signal tsStreamIn_V_V_0_load_B : STD_LOGIC;
    signal tsStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal controlStreamIn_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal controlStreamIn_V_V_0_vld_in : STD_LOGIC;
    signal controlStreamIn_V_V_0_ack_in : STD_LOGIC;
    signal controlStreamIn_V_V_0_ack_out : STD_LOGIC;
    signal controlStreamIn_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal controlStreamIn_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal controlStreamIn_V_V_0_sel_rd : STD_LOGIC := '0';
    signal controlStreamIn_V_V_0_sel_wr : STD_LOGIC := '0';
    signal controlStreamIn_V_V_0_sel : STD_LOGIC;
    signal controlStreamIn_V_V_0_load_A : STD_LOGIC;
    signal controlStreamIn_V_V_0_load_B : STD_LOGIC;
    signal controlStreamIn_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal controlStreamIn_V_V_0_state_cmp_full : STD_LOGIC;
    signal xStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal yStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal controlStreamIn_V_V_TDATA_blk_n : STD_LOGIC;
    signal xStreamOut_V_V_blk_n : STD_LOGIC;
    signal yStreamOut_V_V_blk_n : STD_LOGIC;
    signal tsStreamOut_V_blk_n : STD_LOGIC;
    signal packetEventDataStream_V_V_blk_n : STD_LOGIC;
    signal select_V_2_blk_n : STD_LOGIC;
    signal select_V1_blk_n : STD_LOGIC;
    signal select_V2_blk_n : STD_LOGIC;
    signal select_V3_blk_n : STD_LOGIC;
    signal select_V4_blk_n : STD_LOGIC;
    signal select_V5_blk_n : STD_LOGIC;
    signal select_V6_blk_n : STD_LOGIC;
    signal select_V7_blk_n : STD_LOGIC;
    signal select_V8_blk_n : STD_LOGIC;
    signal select_V9_blk_n : STD_LOGIC;
    signal select_V10_blk_n : STD_LOGIC;
    signal select_V11_blk_n : STD_LOGIC;
    signal select_V12_blk_n : STD_LOGIC;
    signal select_V13_blk_n : STD_LOGIC;
    signal select_V14_blk_n : STD_LOGIC;
    signal select_V15_blk_n : STD_LOGIC;
    signal select_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_V_7_fu_277_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_298_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_V_6_fu_273_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                end if; 
            end if;
        end if;
    end process;


    controlStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                controlStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((controlStreamIn_V_V_0_vld_out = ap_const_logic_1) and (controlStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        controlStreamIn_V_V_0_sel_rd <= not(controlStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    controlStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                controlStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((controlStreamIn_V_V_0_ack_in = ap_const_logic_1) and (controlStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        controlStreamIn_V_V_0_sel_wr <= not(controlStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    controlStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                controlStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((controlStreamIn_V_V_0_vld_in = ap_const_logic_0) and (controlStreamIn_V_V_0_state = ap_const_lv2_2)) or ((controlStreamIn_V_V_0_vld_in = ap_const_logic_0) and (controlStreamIn_V_V_0_state = ap_const_lv2_3) and (controlStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    controlStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((controlStreamIn_V_V_0_ack_out = ap_const_logic_0) and (controlStreamIn_V_V_0_state = ap_const_lv2_1)) or ((controlStreamIn_V_V_0_ack_out = ap_const_logic_0) and (controlStreamIn_V_V_0_state = ap_const_lv2_3) and (controlStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    controlStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((controlStreamIn_V_V_0_vld_in = ap_const_logic_0) and (controlStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((controlStreamIn_V_V_0_ack_out = ap_const_logic_0) and (controlStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (controlStreamIn_V_V_0_state = ap_const_lv2_3)) or ((controlStreamIn_V_V_0_state = ap_const_lv2_1) and (controlStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((controlStreamIn_V_V_0_state = ap_const_lv2_2) and (controlStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    controlStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    controlStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_vld_out = ap_const_logic_1) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_rd <= not(polStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamIn_V_V_0_ack_in = ap_const_logic_1) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        polStreamIn_V_V_0_sel_wr <= not(polStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_2)) or ((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_3) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_state = ap_const_lv2_3) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((polStreamIn_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((polStreamIn_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (polStreamIn_V_V_0_state = ap_const_lv2_3)) or ((polStreamIn_V_V_0_state = ap_const_lv2_1) and (polStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((polStreamIn_V_V_0_state = ap_const_lv2_2) and (polStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    polStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    polStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_vld_out = ap_const_logic_1) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_rd <= not(tsStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamIn_V_V_0_ack_in = ap_const_logic_1) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        tsStreamIn_V_V_0_sel_wr <= not(tsStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_2)) or ((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_3) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_state = ap_const_lv2_3) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamIn_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((tsStreamIn_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (tsStreamIn_V_V_0_state = ap_const_lv2_3)) or ((tsStreamIn_V_V_0_state = ap_const_lv2_1) and (tsStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((tsStreamIn_V_V_0_state = ap_const_lv2_2) and (tsStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    tsStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_vld_out = ap_const_logic_1) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_rd <= not(xStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamIn_V_V_0_ack_in = ap_const_logic_1) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        xStreamIn_V_V_0_sel_wr <= not(xStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_2)) or ((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_3) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_state = ap_const_lv2_3) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((xStreamIn_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((xStreamIn_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (xStreamIn_V_V_0_state = ap_const_lv2_3)) or ((xStreamIn_V_V_0_state = ap_const_lv2_1) and (xStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((xStreamIn_V_V_0_state = ap_const_lv2_2) and (xStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    xStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    xStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamIn_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_vld_out = ap_const_logic_1) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_rd <= not(yStreamIn_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamIn_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamIn_V_V_0_ack_in = ap_const_logic_1) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) then 
                                        yStreamIn_V_V_0_sel_wr <= not(yStreamIn_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamIn_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_2)) or ((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_3) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                elsif ((((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_state = ap_const_lv2_3) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((yStreamIn_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1))) and not(((yStreamIn_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1))) and (yStreamIn_V_V_0_state = ap_const_lv2_3)) or ((yStreamIn_V_V_0_state = ap_const_lv2_1) and (yStreamIn_V_V_0_ack_out = ap_const_logic_1)) or ((yStreamIn_V_V_0_state = ap_const_lv2_2) and (yStreamIn_V_V_0_vld_in = ap_const_logic_1)))) then 
                    yStreamIn_V_V_0_state <= ap_const_lv2_3;
                else 
                    yStreamIn_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((controlStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                controlStreamIn_V_V_0_payload_A <= controlStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((controlStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                controlStreamIn_V_V_0_payload_B <= controlStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_A <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                polStreamIn_V_V_0_payload_B <= polStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_A <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                tsStreamIn_V_V_0_payload_B <= tsStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_A <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                xStreamIn_V_V_0_payload_B <= xStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_A = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_A <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn_V_V_0_load_B = ap_const_logic_1)) then
                yStreamIn_V_V_0_payload_B <= yStreamIn_V_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, controlStreamIn_V_V_0_vld_out, packetEventDataStream_V_V_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, tsStreamOut_V_full_n, select_V1_full_n, select_V2_full_n, select_V3_full_n, select_V4_full_n, select_V5_full_n, select_V6_full_n, select_V7_full_n, select_V8_full_n, select_V9_full_n, select_V10_full_n, select_V11_full_n, select_V12_full_n, select_V13_full_n, select_V14_full_n, select_V15_full_n, select_V_full_n, select_V_2_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((select_V2_full_n = ap_const_logic_0) or (select_V1_full_n = ap_const_logic_0) or (tsStreamOut_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStream_V_V_full_n = ap_const_logic_0) or (controlStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (select_V_2_full_n = ap_const_logic_0) or (select_V_full_n = ap_const_logic_0) or (select_V15_full_n = ap_const_logic_0) or (select_V14_full_n = ap_const_logic_0) or (select_V13_full_n = ap_const_logic_0) or (select_V12_full_n = ap_const_logic_0) or (select_V11_full_n = ap_const_logic_0) or (select_V10_full_n = ap_const_logic_0) or (select_V9_full_n = ap_const_logic_0) or (select_V8_full_n = ap_const_logic_0) or (select_V7_full_n = ap_const_logic_0) or (select_V6_full_n = ap_const_logic_0) or (select_V5_full_n = ap_const_logic_0) or (select_V4_full_n = ap_const_logic_0) or (select_V3_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, controlStreamIn_V_V_0_vld_out, packetEventDataStream_V_V_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, tsStreamOut_V_full_n, select_V1_full_n, select_V2_full_n, select_V3_full_n, select_V4_full_n, select_V5_full_n, select_V6_full_n, select_V7_full_n, select_V8_full_n, select_V9_full_n, select_V10_full_n, select_V11_full_n, select_V12_full_n, select_V13_full_n, select_V14_full_n, select_V15_full_n, select_V_full_n, select_V_2_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((select_V2_full_n = ap_const_logic_0) or (select_V1_full_n = ap_const_logic_0) or (tsStreamOut_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStream_V_V_full_n = ap_const_logic_0) or (controlStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (select_V_2_full_n = ap_const_logic_0) or (select_V_full_n = ap_const_logic_0) or (select_V15_full_n = ap_const_logic_0) or (select_V14_full_n = ap_const_logic_0) or (select_V13_full_n = ap_const_logic_0) or (select_V12_full_n = ap_const_logic_0) or (select_V11_full_n = ap_const_logic_0) or (select_V10_full_n = ap_const_logic_0) or (select_V9_full_n = ap_const_logic_0) or (select_V8_full_n = ap_const_logic_0) or (select_V7_full_n = ap_const_logic_0) or (select_V6_full_n = ap_const_logic_0) or (select_V5_full_n = ap_const_logic_0) or (select_V4_full_n = ap_const_logic_0) or (select_V3_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, controlStreamIn_V_V_0_vld_out, packetEventDataStream_V_V_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, tsStreamOut_V_full_n, select_V1_full_n, select_V2_full_n, select_V3_full_n, select_V4_full_n, select_V5_full_n, select_V6_full_n, select_V7_full_n, select_V8_full_n, select_V9_full_n, select_V10_full_n, select_V11_full_n, select_V12_full_n, select_V13_full_n, select_V14_full_n, select_V15_full_n, select_V_full_n, select_V_2_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((select_V2_full_n = ap_const_logic_0) or (select_V1_full_n = ap_const_logic_0) or (tsStreamOut_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStream_V_V_full_n = ap_const_logic_0) or (controlStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (select_V_2_full_n = ap_const_logic_0) or (select_V_full_n = ap_const_logic_0) or (select_V15_full_n = ap_const_logic_0) or (select_V14_full_n = ap_const_logic_0) or (select_V13_full_n = ap_const_logic_0) or (select_V12_full_n = ap_const_logic_0) or (select_V11_full_n = ap_const_logic_0) or (select_V10_full_n = ap_const_logic_0) or (select_V9_full_n = ap_const_logic_0) or (select_V8_full_n = ap_const_logic_0) or (select_V7_full_n = ap_const_logic_0) or (select_V6_full_n = ap_const_logic_0) or (select_V5_full_n = ap_const_logic_0) or (select_V4_full_n = ap_const_logic_0) or (select_V3_full_n = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(xStreamIn_V_V_0_vld_out, yStreamIn_V_V_0_vld_out, tsStreamIn_V_V_0_vld_out, polStreamIn_V_V_0_vld_out, controlStreamIn_V_V_0_vld_out, packetEventDataStream_V_V_full_n, xStreamOut_V_V_full_n, yStreamOut_V_V_full_n, tsStreamOut_V_full_n, select_V1_full_n, select_V2_full_n, select_V3_full_n, select_V4_full_n, select_V5_full_n, select_V6_full_n, select_V7_full_n, select_V8_full_n, select_V9_full_n, select_V10_full_n, select_V11_full_n, select_V12_full_n, select_V13_full_n, select_V14_full_n, select_V15_full_n, select_V_full_n, select_V_2_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((select_V2_full_n = ap_const_logic_0) or (select_V1_full_n = ap_const_logic_0) or (tsStreamOut_V_full_n = ap_const_logic_0) or (yStreamOut_V_V_full_n = ap_const_logic_0) or (xStreamOut_V_V_full_n = ap_const_logic_0) or (packetEventDataStream_V_V_full_n = ap_const_logic_0) or (controlStreamIn_V_V_0_vld_out = ap_const_logic_0) or (polStreamIn_V_V_0_vld_out = ap_const_logic_0) or (tsStreamIn_V_V_0_vld_out = ap_const_logic_0) or (yStreamIn_V_V_0_vld_out = ap_const_logic_0) or (xStreamIn_V_V_0_vld_out = ap_const_logic_0) or (select_V_2_full_n = ap_const_logic_0) or (select_V_full_n = ap_const_logic_0) or (select_V15_full_n = ap_const_logic_0) or (select_V14_full_n = ap_const_logic_0) or (select_V13_full_n = ap_const_logic_0) or (select_V12_full_n = ap_const_logic_0) or (select_V11_full_n = ap_const_logic_0) or (select_V10_full_n = ap_const_logic_0) or (select_V9_full_n = ap_const_logic_0) or (select_V8_full_n = ap_const_logic_0) or (select_V7_full_n = ap_const_logic_0) or (select_V6_full_n = ap_const_logic_0) or (select_V5_full_n = ap_const_logic_0) or (select_V4_full_n = ap_const_logic_0) or (select_V3_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    controlStreamIn_V_V_0_ack_in <= controlStreamIn_V_V_0_state(1);

    controlStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            controlStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            controlStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    controlStreamIn_V_V_0_data_out_assign_proc : process(controlStreamIn_V_V_0_payload_A, controlStreamIn_V_V_0_payload_B, controlStreamIn_V_V_0_sel)
    begin
        if ((controlStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            controlStreamIn_V_V_0_data_out <= controlStreamIn_V_V_0_payload_B;
        else 
            controlStreamIn_V_V_0_data_out <= controlStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    controlStreamIn_V_V_0_load_A <= (not(controlStreamIn_V_V_0_sel_wr) and controlStreamIn_V_V_0_state_cmp_full);
    controlStreamIn_V_V_0_load_B <= (controlStreamIn_V_V_0_state_cmp_full and controlStreamIn_V_V_0_sel_wr);
    controlStreamIn_V_V_0_sel <= controlStreamIn_V_V_0_sel_rd;
    controlStreamIn_V_V_0_state_cmp_full <= '0' when (controlStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    controlStreamIn_V_V_0_vld_in <= controlStreamIn_V_V_TVALID;
    controlStreamIn_V_V_0_vld_out <= controlStreamIn_V_V_0_state(0);

    controlStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, controlStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            controlStreamIn_V_V_TDATA_blk_n <= controlStreamIn_V_V_0_state(0);
        else 
            controlStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    controlStreamIn_V_V_TREADY <= controlStreamIn_V_V_0_state(1);

    internal_ap_ready_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    packetEventDataStream_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, packetEventDataStream_V_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            packetEventDataStream_V_V_blk_n <= packetEventDataStream_V_V_full_n;
        else 
            packetEventDataStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packetEventDataStream_V_V_din <= (((tmp_fu_298_p1 & tmp_V_6_fu_273_p1) & yStreamIn_V_V_0_data_out) & xStreamIn_V_V_0_data_out);

    packetEventDataStream_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            packetEventDataStream_V_V_write <= ap_const_logic_1;
        else 
            packetEventDataStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    polStreamIn_V_V_0_ack_in <= polStreamIn_V_V_0_state(1);

    polStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            polStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    polStreamIn_V_V_0_data_out_assign_proc : process(polStreamIn_V_V_0_payload_A, polStreamIn_V_V_0_payload_B, polStreamIn_V_V_0_sel)
    begin
        if ((polStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_B;
        else 
            polStreamIn_V_V_0_data_out <= polStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    polStreamIn_V_V_0_load_A <= (polStreamIn_V_V_0_state_cmp_full and not(polStreamIn_V_V_0_sel_wr));
    polStreamIn_V_V_0_load_B <= (polStreamIn_V_V_0_state_cmp_full and polStreamIn_V_V_0_sel_wr);
    polStreamIn_V_V_0_sel <= polStreamIn_V_V_0_sel_rd;
    polStreamIn_V_V_0_state_cmp_full <= '0' when (polStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    polStreamIn_V_V_0_vld_in <= polStreamIn_V_V_TVALID;
    polStreamIn_V_V_0_vld_out <= polStreamIn_V_V_0_state(0);

    polStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, polStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamIn_V_V_TDATA_blk_n <= polStreamIn_V_V_0_state(0);
        else 
            polStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamIn_V_V_TREADY <= polStreamIn_V_V_0_state(1);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    select_V10_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V10_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V10_blk_n <= select_V10_full_n;
        else 
            select_V10_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V10_din <= tmp_V_7_fu_277_p1;

    select_V10_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V10_write <= ap_const_logic_1;
        else 
            select_V10_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V11_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V11_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V11_blk_n <= select_V11_full_n;
        else 
            select_V11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V11_din <= tmp_V_7_fu_277_p1;

    select_V11_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V11_write <= ap_const_logic_1;
        else 
            select_V11_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V12_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V12_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V12_blk_n <= select_V12_full_n;
        else 
            select_V12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V12_din <= tmp_V_7_fu_277_p1;

    select_V12_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V12_write <= ap_const_logic_1;
        else 
            select_V12_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V13_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V13_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V13_blk_n <= select_V13_full_n;
        else 
            select_V13_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V13_din <= tmp_V_7_fu_277_p1;

    select_V13_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V13_write <= ap_const_logic_1;
        else 
            select_V13_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V14_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V14_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V14_blk_n <= select_V14_full_n;
        else 
            select_V14_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V14_din <= tmp_V_7_fu_277_p1;

    select_V14_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V14_write <= ap_const_logic_1;
        else 
            select_V14_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V15_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V15_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V15_blk_n <= select_V15_full_n;
        else 
            select_V15_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V15_din <= tmp_V_7_fu_277_p1;

    select_V15_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V15_write <= ap_const_logic_1;
        else 
            select_V15_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V1_blk_n <= select_V1_full_n;
        else 
            select_V1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V1_din <= tmp_V_7_fu_277_p1;

    select_V1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V1_write <= ap_const_logic_1;
        else 
            select_V1_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V2_blk_n <= select_V2_full_n;
        else 
            select_V2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V2_din <= tmp_V_7_fu_277_p1;

    select_V2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V2_write <= ap_const_logic_1;
        else 
            select_V2_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V3_blk_n <= select_V3_full_n;
        else 
            select_V3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V3_din <= tmp_V_7_fu_277_p1;

    select_V3_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V3_write <= ap_const_logic_1;
        else 
            select_V3_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V4_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V4_blk_n <= select_V4_full_n;
        else 
            select_V4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V4_din <= tmp_V_7_fu_277_p1;

    select_V4_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V4_write <= ap_const_logic_1;
        else 
            select_V4_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V5_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V5_blk_n <= select_V5_full_n;
        else 
            select_V5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V5_din <= tmp_V_7_fu_277_p1;

    select_V5_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V5_write <= ap_const_logic_1;
        else 
            select_V5_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V6_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V6_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V6_blk_n <= select_V6_full_n;
        else 
            select_V6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V6_din <= tmp_V_7_fu_277_p1;

    select_V6_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V6_write <= ap_const_logic_1;
        else 
            select_V6_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V7_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V7_blk_n <= select_V7_full_n;
        else 
            select_V7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V7_din <= tmp_V_7_fu_277_p1;

    select_V7_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V7_write <= ap_const_logic_1;
        else 
            select_V7_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V8_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V8_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V8_blk_n <= select_V8_full_n;
        else 
            select_V8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V8_din <= tmp_V_7_fu_277_p1;

    select_V8_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V8_write <= ap_const_logic_1;
        else 
            select_V8_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V9_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V9_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V9_blk_n <= select_V9_full_n;
        else 
            select_V9_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V9_din <= tmp_V_7_fu_277_p1;

    select_V9_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V9_write <= ap_const_logic_1;
        else 
            select_V9_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V_2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V_2_blk_n <= select_V_2_full_n;
        else 
            select_V_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V_2_din <= tmp_V_7_fu_277_p1;

    select_V_2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V_2_write <= ap_const_logic_1;
        else 
            select_V_2_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_V_blk_n <= select_V_full_n;
        else 
            select_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    select_V_din <= tmp_V_7_fu_277_p1;

    select_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            select_V_write <= ap_const_logic_1;
        else 
            select_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_6_fu_273_p1 <= polStreamIn_V_V_0_data_out(1 - 1 downto 0);
    tmp_V_7_fu_277_p1 <= controlStreamIn_V_V_0_data_out(1 - 1 downto 0);
    tmp_fu_298_p1 <= tsStreamIn_V_V_0_data_out(63 - 1 downto 0);
    tsStreamIn_V_V_0_ack_in <= tsStreamIn_V_V_0_state(1);

    tsStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            tsStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tsStreamIn_V_V_0_data_out_assign_proc : process(tsStreamIn_V_V_0_payload_A, tsStreamIn_V_V_0_payload_B, tsStreamIn_V_V_0_sel)
    begin
        if ((tsStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_B;
        else 
            tsStreamIn_V_V_0_data_out <= tsStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    tsStreamIn_V_V_0_load_A <= (tsStreamIn_V_V_0_state_cmp_full and not(tsStreamIn_V_V_0_sel_wr));
    tsStreamIn_V_V_0_load_B <= (tsStreamIn_V_V_0_state_cmp_full and tsStreamIn_V_V_0_sel_wr);
    tsStreamIn_V_V_0_sel <= tsStreamIn_V_V_0_sel_rd;
    tsStreamIn_V_V_0_state_cmp_full <= '0' when (tsStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    tsStreamIn_V_V_0_vld_in <= tsStreamIn_V_V_TVALID;
    tsStreamIn_V_V_0_vld_out <= tsStreamIn_V_V_0_state(0);

    tsStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tsStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamIn_V_V_TDATA_blk_n <= tsStreamIn_V_V_0_state(0);
        else 
            tsStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamIn_V_V_TREADY <= tsStreamIn_V_V_0_state(1);

    tsStreamOut_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tsStreamOut_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamOut_V_blk_n <= tsStreamOut_V_full_n;
        else 
            tsStreamOut_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut_V_din <= tsStreamIn_V_V_0_data_out(32 - 1 downto 0);

    tsStreamOut_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tsStreamOut_V_write <= ap_const_logic_1;
        else 
            tsStreamOut_V_write <= ap_const_logic_0;
        end if; 
    end process;

    xStreamIn_V_V_0_ack_in <= xStreamIn_V_V_0_state(1);

    xStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            xStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    xStreamIn_V_V_0_data_out_assign_proc : process(xStreamIn_V_V_0_payload_A, xStreamIn_V_V_0_payload_B, xStreamIn_V_V_0_sel)
    begin
        if ((xStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_B;
        else 
            xStreamIn_V_V_0_data_out <= xStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    xStreamIn_V_V_0_load_A <= (xStreamIn_V_V_0_state_cmp_full and not(xStreamIn_V_V_0_sel_wr));
    xStreamIn_V_V_0_load_B <= (xStreamIn_V_V_0_state_cmp_full and xStreamIn_V_V_0_sel_wr);
    xStreamIn_V_V_0_sel <= xStreamIn_V_V_0_sel_rd;
    xStreamIn_V_V_0_state_cmp_full <= '0' when (xStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    xStreamIn_V_V_0_vld_in <= xStreamIn_V_V_TVALID;
    xStreamIn_V_V_0_vld_out <= xStreamIn_V_V_0_state(0);

    xStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, xStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamIn_V_V_TDATA_blk_n <= xStreamIn_V_V_0_state(0);
        else 
            xStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamIn_V_V_TREADY <= xStreamIn_V_V_0_state(1);

    xStreamOut_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, xStreamOut_V_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamOut_V_V_blk_n <= xStreamOut_V_V_full_n;
        else 
            xStreamOut_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut_V_V_din <= xStreamIn_V_V_0_data_out(10 - 1 downto 0);

    xStreamOut_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xStreamOut_V_V_write <= ap_const_logic_1;
        else 
            xStreamOut_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    yStreamIn_V_V_0_ack_in <= yStreamIn_V_V_0_state(1);

    yStreamIn_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_1;
        else 
            yStreamIn_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    yStreamIn_V_V_0_data_out_assign_proc : process(yStreamIn_V_V_0_payload_A, yStreamIn_V_V_0_payload_B, yStreamIn_V_V_0_sel)
    begin
        if ((yStreamIn_V_V_0_sel = ap_const_logic_1)) then 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_B;
        else 
            yStreamIn_V_V_0_data_out <= yStreamIn_V_V_0_payload_A;
        end if; 
    end process;

    yStreamIn_V_V_0_load_A <= (yStreamIn_V_V_0_state_cmp_full and not(yStreamIn_V_V_0_sel_wr));
    yStreamIn_V_V_0_load_B <= (yStreamIn_V_V_0_state_cmp_full and yStreamIn_V_V_0_sel_wr);
    yStreamIn_V_V_0_sel <= yStreamIn_V_V_0_sel_rd;
    yStreamIn_V_V_0_state_cmp_full <= '0' when (yStreamIn_V_V_0_state = ap_const_lv2_1) else '1';
    yStreamIn_V_V_0_vld_in <= yStreamIn_V_V_TVALID;
    yStreamIn_V_V_0_vld_out <= yStreamIn_V_V_0_state(0);

    yStreamIn_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, yStreamIn_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamIn_V_V_TDATA_blk_n <= yStreamIn_V_V_0_state(0);
        else 
            yStreamIn_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamIn_V_V_TREADY <= yStreamIn_V_V_0_state(1);

    yStreamOut_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, yStreamOut_V_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamOut_V_V_blk_n <= yStreamOut_V_V_full_n;
        else 
            yStreamOut_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut_V_V_din <= yStreamIn_V_V_0_data_out(10 - 1 downto 0);

    yStreamOut_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            yStreamOut_V_V_write <= ap_const_logic_1;
        else 
            yStreamOut_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
