-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eventsGeneratorViaFile is
generic (
    C_S_AXI_CONFIG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONFIG_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    polStreamOut_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut_V_V_TREADY : IN STD_LOGIC;
    custDataStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    custDataStreamOut_V_V_TVALID : OUT STD_LOGIC;
    custDataStreamOut_V_V_TREADY : IN STD_LOGIC;
    s_axi_config_AWVALID : IN STD_LOGIC;
    s_axi_config_AWREADY : OUT STD_LOGIC;
    s_axi_config_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_WVALID : IN STD_LOGIC;
    s_axi_config_WREADY : OUT STD_LOGIC;
    s_axi_config_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH/8-1 downto 0);
    s_axi_config_ARVALID : IN STD_LOGIC;
    s_axi_config_ARREADY : OUT STD_LOGIC;
    s_axi_config_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_RVALID : OUT STD_LOGIC;
    s_axi_config_RREADY : IN STD_LOGIC;
    s_axi_config_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_config_BVALID : OUT STD_LOGIC;
    s_axi_config_BREADY : IN STD_LOGIC;
    s_axi_config_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of eventsGeneratorViaFile is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eventsGeneratorViaFile,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=427,HLS_SYN_LUT=448}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_V : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal input_V_ap_vld : STD_LOGIC;
    signal input_V_in_sig : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_ap_vld_preg : STD_LOGIC := '0';
    signal input_V_ap_vld_in_sig : STD_LOGIC;
    signal xStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel : STD_LOGIC;
    signal xStreamOut_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel : STD_LOGIC;
    signal yStreamOut_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal polStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal polStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal polStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel : STD_LOGIC;
    signal polStreamOut_V_V_1_load_A : STD_LOGIC;
    signal polStreamOut_V_V_1_load_B : STD_LOGIC;
    signal polStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal custDataStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal custDataStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal custDataStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal custDataStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal custDataStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal custDataStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal custDataStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal custDataStreamOut_V_V_1_sel : STD_LOGIC;
    signal custDataStreamOut_V_V_1_load_A : STD_LOGIC;
    signal custDataStreamOut_V_V_1_load_B : STD_LOGIC;
    signal custDataStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal custDataStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal input_V_blk_n : STD_LOGIC;
    signal xStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal yStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal custDataStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_V_fu_117_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal tmp_V_1_fu_132_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_fu_149_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_3_cast_fu_169_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal x_V_fu_107_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_122_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal custData_V_fu_145_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_154_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal pol_V_fu_137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component eventsGeneratorViaFile_config_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_V_ap_vld : OUT STD_LOGIC );
    end component;



begin
    eventsGeneratorViaFile_config_s_axi_U : component eventsGeneratorViaFile_config_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONFIG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONFIG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_config_AWVALID,
        AWREADY => s_axi_config_AWREADY,
        AWADDR => s_axi_config_AWADDR,
        WVALID => s_axi_config_WVALID,
        WREADY => s_axi_config_WREADY,
        WDATA => s_axi_config_WDATA,
        WSTRB => s_axi_config_WSTRB,
        ARVALID => s_axi_config_ARVALID,
        ARREADY => s_axi_config_ARREADY,
        ARADDR => s_axi_config_ARADDR,
        RVALID => s_axi_config_RVALID,
        RREADY => s_axi_config_RREADY,
        RDATA => s_axi_config_RDATA,
        RRESP => s_axi_config_RRESP,
        BVALID => s_axi_config_BVALID,
        BREADY => s_axi_config_BREADY,
        BRESP => s_axi_config_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_V => input_V,
        input_V_ap_vld => input_V_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((custDataStreamOut_V_V_1_ack_out = ap_const_logic_1) and (custDataStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        custDataStreamOut_V_V_1_sel_rd <= not(custDataStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((custDataStreamOut_V_V_1_ack_in = ap_const_logic_1) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        custDataStreamOut_V_V_1_sel_wr <= not(custDataStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                custDataStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((custDataStreamOut_V_V_1_state = ap_const_lv2_2) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((custDataStreamOut_V_V_1_state = ap_const_lv2_1) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((custDataStreamOut_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((custDataStreamOut_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (custDataStreamOut_V_V_1_state = ap_const_lv2_3)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_1) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_2) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    input_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_V_ap_vld = ap_const_logic_1))) then 
                    input_V_ap_vld_preg <= input_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    input_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_preg <= ap_const_lv64_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_V_ap_vld = ap_const_logic_1))) then 
                    input_V_preg <= input_V;
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_rd <= not(polStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_in = ap_const_logic_1) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_wr <= not(polStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((polStreamOut_V_V_1_state = ap_const_lv2_2) and (polStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((polStreamOut_V_V_1_state = ap_const_lv2_3) and (polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((polStreamOut_V_V_1_state = ap_const_lv2_1) and (polStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((polStreamOut_V_V_1_state = ap_const_lv2_3) and (polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (polStreamOut_V_V_1_state = ap_const_lv2_3)) or ((polStreamOut_V_V_1_state = ap_const_lv2_1) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((polStreamOut_V_V_1_state = ap_const_lv2_2) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_rd <= not(tsStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_in = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_wr <= not(tsStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut_V_V_1_state = ap_const_lv2_2) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_3) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut_V_V_1_state = ap_const_lv2_1) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_3) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_1) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_2) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_rd <= not(xStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_in = ap_const_logic_1) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_wr <= not(xStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut_V_V_1_state = ap_const_lv2_2) and (xStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((xStreamOut_V_V_1_state = ap_const_lv2_3) and (xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut_V_V_1_state = ap_const_lv2_1) and (xStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((xStreamOut_V_V_1_state = ap_const_lv2_3) and (xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (xStreamOut_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut_V_V_1_state = ap_const_lv2_1) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((xStreamOut_V_V_1_state = ap_const_lv2_2) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_rd <= not(yStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_in = ap_const_logic_1) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_wr <= not(yStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut_V_V_1_state = ap_const_lv2_2) and (yStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((yStreamOut_V_V_1_state = ap_const_lv2_3) and (yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut_V_V_1_state = ap_const_lv2_1) and (yStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((yStreamOut_V_V_1_state = ap_const_lv2_3) and (yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut_V_V_1_state = ap_const_lv2_1) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((yStreamOut_V_V_1_state = ap_const_lv2_2) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                custDataStreamOut_V_V_1_payload_A <= tmp_V_4_fu_149_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                custDataStreamOut_V_V_1_payload_B <= tmp_V_4_fu_149_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_A <= tmp_V_3_cast_fu_169_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_B <= tmp_V_3_cast_fu_169_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_A <= r_V_2_fu_164_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_B <= r_V_2_fu_164_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_A <= tmp_V_fu_117_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_B <= tmp_V_fu_117_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_A <= tmp_V_1_fu_132_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_B <= tmp_V_1_fu_132_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_V_ap_vld_in_sig, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, ap_CS_fsm_state2, ap_block_state1_io, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state1_io <= ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state2 <= ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state2_io <= ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    custDataStreamOut_V_V_1_ack_in <= custDataStreamOut_V_V_1_state(1);
    custDataStreamOut_V_V_1_ack_out <= custDataStreamOut_V_V_TREADY;

    custDataStreamOut_V_V_1_data_out_assign_proc : process(custDataStreamOut_V_V_1_payload_A, custDataStreamOut_V_V_1_payload_B, custDataStreamOut_V_V_1_sel)
    begin
        if ((custDataStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            custDataStreamOut_V_V_1_data_out <= custDataStreamOut_V_V_1_payload_B;
        else 
            custDataStreamOut_V_V_1_data_out <= custDataStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    custDataStreamOut_V_V_1_load_A <= (not(custDataStreamOut_V_V_1_sel_wr) and custDataStreamOut_V_V_1_state_cmp_full);
    custDataStreamOut_V_V_1_load_B <= (custDataStreamOut_V_V_1_state_cmp_full and custDataStreamOut_V_V_1_sel_wr);
    custDataStreamOut_V_V_1_sel <= custDataStreamOut_V_V_1_sel_rd;
    custDataStreamOut_V_V_1_state_cmp_full <= '0' when (custDataStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    custDataStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, input_V_ap_vld_in_sig, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            custDataStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            custDataStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    custDataStreamOut_V_V_1_vld_out <= custDataStreamOut_V_V_1_state(0);
    custDataStreamOut_V_V_TDATA <= custDataStreamOut_V_V_1_data_out;

    custDataStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, custDataStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            custDataStreamOut_V_V_TDATA_blk_n <= custDataStreamOut_V_V_1_state(1);
        else 
            custDataStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    custDataStreamOut_V_V_TVALID <= custDataStreamOut_V_V_1_state(0);
    custData_V_fu_145_p1 <= input_V_in_sig(11 - 1 downto 0);

    input_V_ap_vld_in_sig_assign_proc : process(input_V_ap_vld, input_V_ap_vld_preg)
    begin
        if ((input_V_ap_vld = ap_const_logic_1)) then 
            input_V_ap_vld_in_sig <= input_V_ap_vld;
        else 
            input_V_ap_vld_in_sig <= input_V_ap_vld_preg;
        end if; 
    end process;


    input_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, input_V_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_V_blk_n <= input_V_ap_vld;
        else 
            input_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_V_in_sig_assign_proc : process(input_V, input_V_preg, input_V_ap_vld)
    begin
        if ((input_V_ap_vld = ap_const_logic_1)) then 
            input_V_in_sig <= input_V;
        else 
            input_V_in_sig <= input_V_preg;
        end if; 
    end process;

    polStreamOut_V_V_1_ack_in <= polStreamOut_V_V_1_state(1);
    polStreamOut_V_V_1_ack_out <= polStreamOut_V_V_TREADY;

    polStreamOut_V_V_1_data_out_assign_proc : process(polStreamOut_V_V_1_payload_A, polStreamOut_V_V_1_payload_B, polStreamOut_V_V_1_sel)
    begin
        if ((polStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_B;
        else 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    polStreamOut_V_V_1_load_A <= (polStreamOut_V_V_1_state_cmp_full and not(polStreamOut_V_V_1_sel_wr));
    polStreamOut_V_V_1_load_B <= (polStreamOut_V_V_1_state_cmp_full and polStreamOut_V_V_1_sel_wr);
    polStreamOut_V_V_1_sel <= polStreamOut_V_V_1_sel_rd;
    polStreamOut_V_V_1_state_cmp_full <= '0' when (polStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    polStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, input_V_ap_vld_in_sig, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut_V_V_1_vld_out <= polStreamOut_V_V_1_state(0);
    polStreamOut_V_V_TDATA <= polStreamOut_V_V_1_data_out;

    polStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, polStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            polStreamOut_V_V_TDATA_blk_n <= polStreamOut_V_V_1_state(1);
        else 
            polStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamOut_V_V_TVALID <= polStreamOut_V_V_1_state(0);
    pol_V_fu_137_p3 <= input_V_in_sig(11 downto 11);
    r_V_2_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_154_p4),64));
    r_V_fu_154_p4 <= input_V_in_sig(63 downto 32);
    tmp_V_1_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_122_p4),16));
    tmp_V_3_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pol_V_fu_137_p3),8));
    tmp_V_4_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(custData_V_fu_145_p1),16));
    tmp_V_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_fu_107_p4),16));
    tsStreamOut_V_V_1_ack_in <= tsStreamOut_V_V_1_state(1);
    tsStreamOut_V_V_1_ack_out <= tsStreamOut_V_V_TREADY;

    tsStreamOut_V_V_1_data_out_assign_proc : process(tsStreamOut_V_V_1_payload_A, tsStreamOut_V_V_1_payload_B, tsStreamOut_V_V_1_sel)
    begin
        if ((tsStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_B;
        else 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut_V_V_1_load_A <= (tsStreamOut_V_V_1_state_cmp_full and not(tsStreamOut_V_V_1_sel_wr));
    tsStreamOut_V_V_1_load_B <= (tsStreamOut_V_V_1_state_cmp_full and tsStreamOut_V_V_1_sel_wr);
    tsStreamOut_V_V_1_sel <= tsStreamOut_V_V_1_sel_rd;
    tsStreamOut_V_V_1_state_cmp_full <= '0' when (tsStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    tsStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, input_V_ap_vld_in_sig, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tsStreamOut_V_V_1_vld_out <= tsStreamOut_V_V_1_state(0);
    tsStreamOut_V_V_TDATA <= tsStreamOut_V_V_1_data_out;

    tsStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, tsStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            tsStreamOut_V_V_TDATA_blk_n <= tsStreamOut_V_V_1_state(1);
        else 
            tsStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut_V_V_TVALID <= tsStreamOut_V_V_1_state(0);
    xStreamOut_V_V_1_ack_in <= xStreamOut_V_V_1_state(1);
    xStreamOut_V_V_1_ack_out <= xStreamOut_V_V_TREADY;

    xStreamOut_V_V_1_data_out_assign_proc : process(xStreamOut_V_V_1_payload_A, xStreamOut_V_V_1_payload_B, xStreamOut_V_V_1_sel)
    begin
        if ((xStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_B;
        else 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut_V_V_1_load_A <= (xStreamOut_V_V_1_state_cmp_full and not(xStreamOut_V_V_1_sel_wr));
    xStreamOut_V_V_1_load_B <= (xStreamOut_V_V_1_state_cmp_full and xStreamOut_V_V_1_sel_wr);
    xStreamOut_V_V_1_sel <= xStreamOut_V_V_1_sel_rd;
    xStreamOut_V_V_1_state_cmp_full <= '0' when (xStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    xStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, input_V_ap_vld_in_sig, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xStreamOut_V_V_1_vld_out <= xStreamOut_V_V_1_state(0);
    xStreamOut_V_V_TDATA <= xStreamOut_V_V_1_data_out;

    xStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, xStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            xStreamOut_V_V_TDATA_blk_n <= xStreamOut_V_V_1_state(1);
        else 
            xStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut_V_V_TVALID <= xStreamOut_V_V_1_state(0);
    x_V_fu_107_p4 <= input_V_in_sig(21 downto 12);
    yStreamOut_V_V_1_ack_in <= yStreamOut_V_V_1_state(1);
    yStreamOut_V_V_1_ack_out <= yStreamOut_V_V_TREADY;

    yStreamOut_V_V_1_data_out_assign_proc : process(yStreamOut_V_V_1_payload_A, yStreamOut_V_V_1_payload_B, yStreamOut_V_V_1_sel)
    begin
        if ((yStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_B;
        else 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut_V_V_1_load_A <= (yStreamOut_V_V_1_state_cmp_full and not(yStreamOut_V_V_1_sel_wr));
    yStreamOut_V_V_1_load_B <= (yStreamOut_V_V_1_state_cmp_full and yStreamOut_V_V_1_sel_wr);
    yStreamOut_V_V_1_sel <= yStreamOut_V_V_1_sel_rd;
    yStreamOut_V_V_1_state_cmp_full <= '0' when (yStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    yStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, input_V_ap_vld_in_sig, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yStreamOut_V_V_1_vld_out <= yStreamOut_V_V_1_state(0);
    yStreamOut_V_V_TDATA <= yStreamOut_V_V_1_data_out;

    yStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, yStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            yStreamOut_V_V_TDATA_blk_n <= yStreamOut_V_V_1_state(1);
        else 
            yStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut_V_V_TVALID <= yStreamOut_V_V_1_state(0);
    y_V_fu_122_p4 <= input_V_in_sig(30 downto 22);
end behav;
