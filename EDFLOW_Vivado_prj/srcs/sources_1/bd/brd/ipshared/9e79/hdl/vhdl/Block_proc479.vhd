-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc479 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    select_V_empty_n : IN STD_LOGIC;
    select_V_read : OUT STD_LOGIC;
    pktEventDataStream_V_V_dout : IN STD_LOGIC_VECTOR (95 downto 0);
    pktEventDataStream_V_V_empty_n : IN STD_LOGIC;
    pktEventDataStream_V_V_read : OUT STD_LOGIC;
    miniSumStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    miniSumStreamScale0_V_V_empty_n : IN STD_LOGIC;
    miniSumStreamScale0_V_V_read : OUT STD_LOGIC;
    OFRetStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    OFRetStreamScale0_V_V_empty_n : IN STD_LOGIC;
    OFRetStreamScale0_V_V_read : OUT STD_LOGIC;
    miniSumStreamScale1Copy_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    miniSumStreamScale1Copy_V_V_empty_n : IN STD_LOGIC;
    miniSumStreamScale1Copy_V_V_read : OUT STD_LOGIC;
    OFRetStreamScale1Copy_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    OFRetStreamScale1Copy_V_V_empty_n : IN STD_LOGIC;
    OFRetStreamScale1Copy_V_V_read : OUT STD_LOGIC;
    miniSumStreamScale2Copy_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    miniSumStreamScale2Copy_V_V_empty_n : IN STD_LOGIC;
    miniSumStreamScale2Copy_V_V_read : OUT STD_LOGIC;
    OFRetStreamScale2Copy_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    OFRetStreamScale2Copy_V_V_empty_n : IN STD_LOGIC;
    OFRetStreamScale2Copy_V_V_read : OUT STD_LOGIC;
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    polStreamOut_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    pixelDataStream_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    pixelDataStream_V_V_TVALID : OUT STD_LOGIC;
    pixelDataStream_V_V_TREADY : IN STD_LOGIC;
    status_currentDeltaTSHW : OUT STD_LOGIC_VECTOR (31 downto 0);
    status_currentDeltaTSHW_ap_vld : OUT STD_LOGIC;
    status_currentAreaCntThr : OUT STD_LOGIC_VECTOR (31 downto 0);
    status_currentAreaCntThr_ap_vld : OUT STD_LOGIC;
    status_currentFeedbackAreaCntThr : OUT STD_LOGIC_VECTOR (31 downto 0);
    status_currentFeedbackAreaCntThr_ap_vld : OUT STD_LOGIC;
    status_currentOFHistCntSum : OUT STD_LOGIC_VECTOR (31 downto 0);
    status_currentOFHistCntSum_ap_vld : OUT STD_LOGIC;
    status_currentOFHistRadiusSum : OUT STD_LOGIC_VECTOR (31 downto 0);
    status_currentOFHistRadiusSum_ap_vld : OUT STD_LOGIC;
    status_currentAverageTgtValue : OUT STD_LOGIC_VECTOR (31 downto 0);
    status_currentAverageTgtValue_ap_vld : OUT STD_LOGIC;
    deltaTsHWBak_V_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    deltaTsHWBak_V_empty_n : IN STD_LOGIC;
    deltaTsHWBak_V_read : OUT STD_LOGIC;
    glConfig_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    glConfig_V_empty_n : IN STD_LOGIC;
    glConfig_V_read : OUT STD_LOGIC;
    glRotateFlg_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    glRotateFlg_V_empty_n : IN STD_LOGIC;
    glRotateFlg_V_read : OUT STD_LOGIC;
    glSFASTAreaCntThrBak_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    glSFASTAreaCntThrBak_empty_n : IN STD_LOGIC;
    glSFASTAreaCntThrBak_read : OUT STD_LOGIC );
end;


architecture behav of Block_proc479 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel : STD_LOGIC;
    signal xStreamOut_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel : STD_LOGIC;
    signal yStreamOut_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal polStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal polStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal polStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel : STD_LOGIC;
    signal polStreamOut_V_V_1_load_A : STD_LOGIC;
    signal polStreamOut_V_V_1_load_B : STD_LOGIC;
    signal polStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal pixelDataStream_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal pixelDataStream_V_V_1_vld_in : STD_LOGIC;
    signal pixelDataStream_V_V_1_vld_out : STD_LOGIC;
    signal pixelDataStream_V_V_1_ack_in : STD_LOGIC;
    signal pixelDataStream_V_V_1_ack_out : STD_LOGIC;
    signal pixelDataStream_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal pixelDataStream_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal pixelDataStream_V_V_1_sel_rd : STD_LOGIC := '0';
    signal pixelDataStream_V_V_1_sel_wr : STD_LOGIC := '0';
    signal pixelDataStream_V_V_1_sel : STD_LOGIC;
    signal pixelDataStream_V_V_1_load_A : STD_LOGIC;
    signal pixelDataStream_V_V_1_load_B : STD_LOGIC;
    signal pixelDataStream_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal pixelDataStream_V_V_1_state_cmp_full : STD_LOGIC;
    signal glOFHistCntSum_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal glOFHistRadiusSum_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal areaEventThrBak : STD_LOGIC_VECTOR (15 downto 0) := "0000001010111100";
    signal glAverageTargetValue_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal select_V_blk_n : STD_LOGIC;
    signal deltaTsHWBak_V_blk_n : STD_LOGIC;
    signal glConfig_V_blk_n : STD_LOGIC;
    signal glRotateFlg_V_blk_n : STD_LOGIC;
    signal glSFASTAreaCntThrBak_blk_n : STD_LOGIC;
    signal glConfig_V_read_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal glRotateFlg_V_read_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_V_read_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_ap_start : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_ap_done : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_ap_idle : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_ap_ready : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_packetEventDataStream_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_miniSumStreamScale0_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_OFRetStreamScale0_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_miniSumStreamScale1_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_OFRetStreamScale1_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_miniSumStreamScale2_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_OFRetStreamScale2_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_glOFHistCntSum_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_glOFHistCntSum_V_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_glOFHistRadiusSum_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_glOFHistRadiusSum_V_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_areaEventThrBak : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_areaEventThrBak_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_glAverageTargetValue_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_fu_172_glAverageTargetValue_1_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_fu_172_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call28 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_i_i_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal status_currentDeltaTSHW_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tmp_i_i_i_1668_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal status_currentAreaCntThr_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state3 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component feedbackAndCombineOu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        select_V : IN STD_LOGIC_VECTOR (0 downto 0);
        packetEventDataStream_V_V_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        packetEventDataStream_V_V_empty_n : IN STD_LOGIC;
        packetEventDataStream_V_V_read : OUT STD_LOGIC;
        miniSumStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
        miniSumStreamScale0_V_V_empty_n : IN STD_LOGIC;
        miniSumStreamScale0_V_V_read : OUT STD_LOGIC;
        OFRetStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        OFRetStreamScale0_V_V_empty_n : IN STD_LOGIC;
        OFRetStreamScale0_V_V_read : OUT STD_LOGIC;
        miniSumStreamScale1_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
        miniSumStreamScale1_V_V_empty_n : IN STD_LOGIC;
        miniSumStreamScale1_V_V_read : OUT STD_LOGIC;
        OFRetStreamScale1_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        OFRetStreamScale1_V_V_empty_n : IN STD_LOGIC;
        OFRetStreamScale1_V_V_read : OUT STD_LOGIC;
        miniSumStreamScale2_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
        miniSumStreamScale2_V_V_empty_n : IN STD_LOGIC;
        miniSumStreamScale2_V_V_read : OUT STD_LOGIC;
        OFRetStreamScale2_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        OFRetStreamScale2_V_V_empty_n : IN STD_LOGIC;
        OFRetStreamScale2_V_V_read : OUT STD_LOGIC;
        xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        xStreamOut_V_V_TVALID : OUT STD_LOGIC;
        xStreamOut_V_V_TREADY : IN STD_LOGIC;
        yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        yStreamOut_V_V_TVALID : OUT STD_LOGIC;
        yStreamOut_V_V_TREADY : IN STD_LOGIC;
        polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        polStreamOut_V_V_TVALID : OUT STD_LOGIC;
        polStreamOut_V_V_TREADY : IN STD_LOGIC;
        tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
        tsStreamOut_V_V_TREADY : IN STD_LOGIC;
        custDataStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        custDataStreamOut_V_V_TVALID : OUT STD_LOGIC;
        custDataStreamOut_V_V_TREADY : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (0 downto 0);
        glOFHistCntSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        glOFHistCntSum_V_ap_vld : OUT STD_LOGIC;
        glOFHistRadiusSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        glOFHistRadiusSum_V_ap_vld : OUT STD_LOGIC;
        areaEventThrBak : OUT STD_LOGIC_VECTOR (15 downto 0);
        areaEventThrBak_ap_vld : OUT STD_LOGIC;
        glAverageTargetValue_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        glAverageTargetValue_1_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_feedbackAndCombineOu_fu_172 : component feedbackAndCombineOu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feedbackAndCombineOu_fu_172_ap_start,
        ap_done => grp_feedbackAndCombineOu_fu_172_ap_done,
        ap_idle => grp_feedbackAndCombineOu_fu_172_ap_idle,
        ap_ready => grp_feedbackAndCombineOu_fu_172_ap_ready,
        select_V => select_V_read_reg_278,
        packetEventDataStream_V_V_dout => pktEventDataStream_V_V_dout,
        packetEventDataStream_V_V_empty_n => pktEventDataStream_V_V_empty_n,
        packetEventDataStream_V_V_read => grp_feedbackAndCombineOu_fu_172_packetEventDataStream_V_V_read,
        miniSumStreamScale0_V_V_dout => miniSumStreamScale0_V_V_dout,
        miniSumStreamScale0_V_V_empty_n => miniSumStreamScale0_V_V_empty_n,
        miniSumStreamScale0_V_V_read => grp_feedbackAndCombineOu_fu_172_miniSumStreamScale0_V_V_read,
        OFRetStreamScale0_V_V_dout => OFRetStreamScale0_V_V_dout,
        OFRetStreamScale0_V_V_empty_n => OFRetStreamScale0_V_V_empty_n,
        OFRetStreamScale0_V_V_read => grp_feedbackAndCombineOu_fu_172_OFRetStreamScale0_V_V_read,
        miniSumStreamScale1_V_V_dout => miniSumStreamScale1Copy_V_V_dout,
        miniSumStreamScale1_V_V_empty_n => miniSumStreamScale1Copy_V_V_empty_n,
        miniSumStreamScale1_V_V_read => grp_feedbackAndCombineOu_fu_172_miniSumStreamScale1_V_V_read,
        OFRetStreamScale1_V_V_dout => OFRetStreamScale1Copy_V_V_dout,
        OFRetStreamScale1_V_V_empty_n => OFRetStreamScale1Copy_V_V_empty_n,
        OFRetStreamScale1_V_V_read => grp_feedbackAndCombineOu_fu_172_OFRetStreamScale1_V_V_read,
        miniSumStreamScale2_V_V_dout => miniSumStreamScale2Copy_V_V_dout,
        miniSumStreamScale2_V_V_empty_n => miniSumStreamScale2Copy_V_V_empty_n,
        miniSumStreamScale2_V_V_read => grp_feedbackAndCombineOu_fu_172_miniSumStreamScale2_V_V_read,
        OFRetStreamScale2_V_V_dout => OFRetStreamScale2Copy_V_V_dout,
        OFRetStreamScale2_V_V_empty_n => OFRetStreamScale2Copy_V_V_empty_n,
        OFRetStreamScale2_V_V_read => grp_feedbackAndCombineOu_fu_172_OFRetStreamScale2_V_V_read,
        xStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TVALID,
        xStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TREADY,
        yStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TVALID,
        yStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TREADY,
        polStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TVALID,
        polStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TREADY,
        tsStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TREADY,
        custDataStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TDATA,
        custDataStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TVALID,
        custDataStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TREADY,
        p_read => glConfig_V_read_reg_268,
        p_read1 => glRotateFlg_V_read_reg_273,
        glOFHistCntSum_V => grp_feedbackAndCombineOu_fu_172_glOFHistCntSum_V,
        glOFHistCntSum_V_ap_vld => grp_feedbackAndCombineOu_fu_172_glOFHistCntSum_V_ap_vld,
        glOFHistRadiusSum_V => grp_feedbackAndCombineOu_fu_172_glOFHistRadiusSum_V,
        glOFHistRadiusSum_V_ap_vld => grp_feedbackAndCombineOu_fu_172_glOFHistRadiusSum_V_ap_vld,
        areaEventThrBak => grp_feedbackAndCombineOu_fu_172_areaEventThrBak,
        areaEventThrBak_ap_vld => grp_feedbackAndCombineOu_fu_172_areaEventThrBak_ap_vld,
        glAverageTargetValue_1 => grp_feedbackAndCombineOu_fu_172_glAverageTargetValue_1,
        glAverageTargetValue_1_ap_vld => grp_feedbackAndCombineOu_fu_172_glAverageTargetValue_1_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_feedbackAndCombineOu_fu_172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feedbackAndCombineOu_fu_172_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_feedbackAndCombineOu_fu_172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_feedbackAndCombineOu_fu_172_ap_ready = ap_const_logic_1)) then 
                    grp_feedbackAndCombineOu_fu_172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pixelDataStream_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pixelDataStream_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((pixelDataStream_V_V_1_ack_out = ap_const_logic_1) and (pixelDataStream_V_V_1_vld_out = ap_const_logic_1))) then 
                                        pixelDataStream_V_V_1_sel_rd <= not(pixelDataStream_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    pixelDataStream_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pixelDataStream_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((pixelDataStream_V_V_1_ack_in = ap_const_logic_1) and (pixelDataStream_V_V_1_vld_in = ap_const_logic_1))) then 
                                        pixelDataStream_V_V_1_sel_wr <= not(pixelDataStream_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    pixelDataStream_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pixelDataStream_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((pixelDataStream_V_V_1_state = ap_const_lv2_2) and (pixelDataStream_V_V_1_vld_in = ap_const_logic_0)) or ((pixelDataStream_V_V_1_state = ap_const_lv2_3) and (pixelDataStream_V_V_1_vld_in = ap_const_logic_0) and (pixelDataStream_V_V_1_ack_out = ap_const_logic_1)))) then 
                    pixelDataStream_V_V_1_state <= ap_const_lv2_2;
                elsif ((((pixelDataStream_V_V_1_state = ap_const_lv2_1) and (pixelDataStream_V_V_1_ack_out = ap_const_logic_0)) or ((pixelDataStream_V_V_1_state = ap_const_lv2_3) and (pixelDataStream_V_V_1_ack_out = ap_const_logic_0) and (pixelDataStream_V_V_1_vld_in = ap_const_logic_1)))) then 
                    pixelDataStream_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((pixelDataStream_V_V_1_vld_in = ap_const_logic_0) and (pixelDataStream_V_V_1_ack_out = ap_const_logic_1))) and not(((pixelDataStream_V_V_1_ack_out = ap_const_logic_0) and (pixelDataStream_V_V_1_vld_in = ap_const_logic_1))) and (pixelDataStream_V_V_1_state = ap_const_lv2_3)) or ((pixelDataStream_V_V_1_state = ap_const_lv2_1) and (pixelDataStream_V_V_1_ack_out = ap_const_logic_1)) or ((pixelDataStream_V_V_1_state = ap_const_lv2_2) and (pixelDataStream_V_V_1_vld_in = ap_const_logic_1)))) then 
                    pixelDataStream_V_V_1_state <= ap_const_lv2_3;
                else 
                    pixelDataStream_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_rd <= not(polStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_in = ap_const_logic_1) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_wr <= not(polStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((polStreamOut_V_V_1_state = ap_const_lv2_2) and (polStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((polStreamOut_V_V_1_state = ap_const_lv2_3) and (polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((polStreamOut_V_V_1_state = ap_const_lv2_1) and (polStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((polStreamOut_V_V_1_state = ap_const_lv2_3) and (polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (polStreamOut_V_V_1_state = ap_const_lv2_3)) or ((polStreamOut_V_V_1_state = ap_const_lv2_1) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((polStreamOut_V_V_1_state = ap_const_lv2_2) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    status_currentAreaCntThr_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                status_currentAreaCntThr_preg(0) <= '0';
                status_currentAreaCntThr_preg(1) <= '0';
                status_currentAreaCntThr_preg(2) <= '0';
                status_currentAreaCntThr_preg(3) <= '0';
                status_currentAreaCntThr_preg(4) <= '0';
                status_currentAreaCntThr_preg(5) <= '0';
                status_currentAreaCntThr_preg(6) <= '0';
                status_currentAreaCntThr_preg(7) <= '0';
                status_currentAreaCntThr_preg(8) <= '0';
                status_currentAreaCntThr_preg(9) <= '0';
                status_currentAreaCntThr_preg(10) <= '0';
                status_currentAreaCntThr_preg(11) <= '0';
                status_currentAreaCntThr_preg(12) <= '0';
                status_currentAreaCntThr_preg(13) <= '0';
                status_currentAreaCntThr_preg(14) <= '0';
                status_currentAreaCntThr_preg(15) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        status_currentAreaCntThr_preg(15 downto 0) <= tmp_i_i_i_1668_fu_227_p1(15 downto 0);
                end if; 
            end if;
        end if;
    end process;


    status_currentDeltaTSHW_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                status_currentDeltaTSHW_preg(0) <= '0';
                status_currentDeltaTSHW_preg(1) <= '0';
                status_currentDeltaTSHW_preg(2) <= '0';
                status_currentDeltaTSHW_preg(3) <= '0';
                status_currentDeltaTSHW_preg(4) <= '0';
                status_currentDeltaTSHW_preg(5) <= '0';
                status_currentDeltaTSHW_preg(6) <= '0';
                status_currentDeltaTSHW_preg(7) <= '0';
                status_currentDeltaTSHW_preg(8) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        status_currentDeltaTSHW_preg(8 downto 0) <= tmp_i_i_i_fu_222_p1(8 downto 0);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_rd <= not(tsStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_in = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_wr <= not(tsStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut_V_V_1_state = ap_const_lv2_2) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_3) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut_V_V_1_state = ap_const_lv2_1) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_3) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_1) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_2) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_rd <= not(xStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_in = ap_const_logic_1) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_wr <= not(xStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut_V_V_1_state = ap_const_lv2_2) and (xStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((xStreamOut_V_V_1_state = ap_const_lv2_3) and (xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut_V_V_1_state = ap_const_lv2_1) and (xStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((xStreamOut_V_V_1_state = ap_const_lv2_3) and (xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) and not(((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1))) and (xStreamOut_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut_V_V_1_state = ap_const_lv2_1) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((xStreamOut_V_V_1_state = ap_const_lv2_2) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_rd <= not(yStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_in = ap_const_logic_1) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_wr <= not(yStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut_V_V_1_state = ap_const_lv2_2) and (yStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((yStreamOut_V_V_1_state = ap_const_lv2_3) and (yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut_V_V_1_state = ap_const_lv2_1) and (yStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((yStreamOut_V_V_1_state = ap_const_lv2_3) and (yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut_V_V_1_state = ap_const_lv2_1) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((yStreamOut_V_V_1_state = ap_const_lv2_2) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_feedbackAndCombineOu_fu_172_areaEventThrBak_ap_vld = ap_const_logic_1))) then
                areaEventThrBak <= grp_feedbackAndCombineOu_fu_172_areaEventThrBak;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_feedbackAndCombineOu_fu_172_glAverageTargetValue_1_ap_vld = ap_const_logic_1))) then
                glAverageTargetValue_1 <= grp_feedbackAndCombineOu_fu_172_glAverageTargetValue_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                glConfig_V_read_reg_268 <= glConfig_V_dout;
                glRotateFlg_V_read_reg_273 <= glRotateFlg_V_dout;
                select_V_read_reg_278 <= select_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_feedbackAndCombineOu_fu_172_glOFHistCntSum_V_ap_vld = ap_const_logic_1))) then
                glOFHistCntSum_V <= grp_feedbackAndCombineOu_fu_172_glOFHistCntSum_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_feedbackAndCombineOu_fu_172_glOFHistRadiusSum_V_ap_vld = ap_const_logic_1))) then
                glOFHistRadiusSum_V <= grp_feedbackAndCombineOu_fu_172_glOFHistRadiusSum_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((pixelDataStream_V_V_1_load_A = ap_const_logic_1)) then
                pixelDataStream_V_V_1_payload_A <= grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((pixelDataStream_V_V_1_load_B = ap_const_logic_1)) then
                pixelDataStream_V_V_1_payload_B <= grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_A <= grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_B <= grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_A <= grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_B <= grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_A <= grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_B <= grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_A <= grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_B <= grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TDATA;
            end if;
        end if;
    end process;
    status_currentDeltaTSHW_preg(31 downto 9) <= "00000000000000000000000";
    status_currentAreaCntThr_preg(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, select_V_empty_n, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n, grp_feedbackAndCombineOu_fu_172_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_feedbackAndCombineOu_fu_172_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    OFRetStreamScale0_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_fu_172_OFRetStreamScale0_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            OFRetStreamScale0_V_V_read <= grp_feedbackAndCombineOu_fu_172_OFRetStreamScale0_V_V_read;
        else 
            OFRetStreamScale0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    OFRetStreamScale1Copy_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_fu_172_OFRetStreamScale1_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            OFRetStreamScale1Copy_V_V_read <= grp_feedbackAndCombineOu_fu_172_OFRetStreamScale1_V_V_read;
        else 
            OFRetStreamScale1Copy_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    OFRetStreamScale2Copy_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_fu_172_OFRetStreamScale2_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            OFRetStreamScale2Copy_V_V_read <= grp_feedbackAndCombineOu_fu_172_OFRetStreamScale2_V_V_read;
        else 
            OFRetStreamScale2Copy_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call28_assign_proc : process(ap_start, ap_done_reg, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
                ap_block_state1_ignore_call28 <= ((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in)
    begin
                ap_block_state3 <= ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    deltaTsHWBak_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, deltaTsHWBak_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            deltaTsHWBak_V_blk_n <= deltaTsHWBak_V_empty_n;
        else 
            deltaTsHWBak_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    deltaTsHWBak_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            deltaTsHWBak_V_read <= ap_const_logic_1;
        else 
            deltaTsHWBak_V_read <= ap_const_logic_0;
        end if; 
    end process;


    glConfig_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, glConfig_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            glConfig_V_blk_n <= glConfig_V_empty_n;
        else 
            glConfig_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    glConfig_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            glConfig_V_read <= ap_const_logic_1;
        else 
            glConfig_V_read <= ap_const_logic_0;
        end if; 
    end process;


    glRotateFlg_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, glRotateFlg_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            glRotateFlg_V_blk_n <= glRotateFlg_V_empty_n;
        else 
            glRotateFlg_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    glRotateFlg_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            glRotateFlg_V_read <= ap_const_logic_1;
        else 
            glRotateFlg_V_read <= ap_const_logic_0;
        end if; 
    end process;


    glSFASTAreaCntThrBak_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            glSFASTAreaCntThrBak_blk_n <= glSFASTAreaCntThrBak_empty_n;
        else 
            glSFASTAreaCntThrBak_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    glSFASTAreaCntThrBak_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            glSFASTAreaCntThrBak_read <= ap_const_logic_1;
        else 
            glSFASTAreaCntThrBak_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_feedbackAndCombineOu_fu_172_ap_start <= grp_feedbackAndCombineOu_fu_172_ap_start_reg;
    grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TREADY <= pixelDataStream_V_V_1_state(1);
    grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TREADY <= polStreamOut_V_V_1_state(1);
    grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TREADY <= tsStreamOut_V_V_1_state(1);
    grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TREADY <= xStreamOut_V_V_1_state(1);
    grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TREADY <= yStreamOut_V_V_1_state(1);

    miniSumStreamScale0_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_fu_172_miniSumStreamScale0_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            miniSumStreamScale0_V_V_read <= grp_feedbackAndCombineOu_fu_172_miniSumStreamScale0_V_V_read;
        else 
            miniSumStreamScale0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    miniSumStreamScale1Copy_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_fu_172_miniSumStreamScale1_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            miniSumStreamScale1Copy_V_V_read <= grp_feedbackAndCombineOu_fu_172_miniSumStreamScale1_V_V_read;
        else 
            miniSumStreamScale1Copy_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    miniSumStreamScale2Copy_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_fu_172_miniSumStreamScale2_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            miniSumStreamScale2Copy_V_V_read <= grp_feedbackAndCombineOu_fu_172_miniSumStreamScale2_V_V_read;
        else 
            miniSumStreamScale2Copy_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    pixelDataStream_V_V_1_ack_in <= pixelDataStream_V_V_1_state(1);
    pixelDataStream_V_V_1_ack_out <= pixelDataStream_V_V_TREADY;

    pixelDataStream_V_V_1_data_out_assign_proc : process(pixelDataStream_V_V_1_payload_A, pixelDataStream_V_V_1_payload_B, pixelDataStream_V_V_1_sel)
    begin
        if ((pixelDataStream_V_V_1_sel = ap_const_logic_1)) then 
            pixelDataStream_V_V_1_data_out <= pixelDataStream_V_V_1_payload_B;
        else 
            pixelDataStream_V_V_1_data_out <= pixelDataStream_V_V_1_payload_A;
        end if; 
    end process;

    pixelDataStream_V_V_1_load_A <= (pixelDataStream_V_V_1_state_cmp_full and not(pixelDataStream_V_V_1_sel_wr));
    pixelDataStream_V_V_1_load_B <= (pixelDataStream_V_V_1_state_cmp_full and pixelDataStream_V_V_1_sel_wr);
    pixelDataStream_V_V_1_sel <= pixelDataStream_V_V_1_sel_rd;
    pixelDataStream_V_V_1_state_cmp_full <= '0' when (pixelDataStream_V_V_1_state = ap_const_lv2_1) else '1';
    pixelDataStream_V_V_1_vld_in <= grp_feedbackAndCombineOu_fu_172_custDataStreamOut_V_V_TVALID;
    pixelDataStream_V_V_1_vld_out <= pixelDataStream_V_V_1_state(0);
    pixelDataStream_V_V_TDATA <= pixelDataStream_V_V_1_data_out;
    pixelDataStream_V_V_TVALID <= pixelDataStream_V_V_1_state(0);

    pktEventDataStream_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_fu_172_packetEventDataStream_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pktEventDataStream_V_V_read <= grp_feedbackAndCombineOu_fu_172_packetEventDataStream_V_V_read;
        else 
            pktEventDataStream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut_V_V_1_ack_in <= polStreamOut_V_V_1_state(1);
    polStreamOut_V_V_1_ack_out <= polStreamOut_V_V_TREADY;

    polStreamOut_V_V_1_data_out_assign_proc : process(polStreamOut_V_V_1_payload_A, polStreamOut_V_V_1_payload_B, polStreamOut_V_V_1_sel)
    begin
        if ((polStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_B;
        else 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    polStreamOut_V_V_1_load_A <= (polStreamOut_V_V_1_state_cmp_full and not(polStreamOut_V_V_1_sel_wr));
    polStreamOut_V_V_1_load_B <= (polStreamOut_V_V_1_state_cmp_full and polStreamOut_V_V_1_sel_wr);
    polStreamOut_V_V_1_sel <= polStreamOut_V_V_1_sel_rd;
    polStreamOut_V_V_1_state_cmp_full <= '0' when (polStreamOut_V_V_1_state = ap_const_lv2_1) else '1';
    polStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_fu_172_polStreamOut_V_V_TVALID;
    polStreamOut_V_V_1_vld_out <= polStreamOut_V_V_1_state(0);
    polStreamOut_V_V_TDATA <= polStreamOut_V_V_1_data_out;
    polStreamOut_V_V_TVALID <= polStreamOut_V_V_1_state(0);

    select_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            select_V_blk_n <= select_V_empty_n;
        else 
            select_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    select_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            select_V_read <= ap_const_logic_1;
        else 
            select_V_read <= ap_const_logic_0;
        end if; 
    end process;


    status_currentAreaCntThr_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n, tmp_i_i_i_1668_fu_227_p1, status_currentAreaCntThr_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            status_currentAreaCntThr <= tmp_i_i_i_1668_fu_227_p1;
        else 
            status_currentAreaCntThr <= status_currentAreaCntThr_preg;
        end if; 
    end process;


    status_currentAreaCntThr_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            status_currentAreaCntThr_ap_vld <= ap_const_logic_1;
        else 
            status_currentAreaCntThr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    status_currentAverageTgtValue <= std_logic_vector(IEEE.numeric_std.resize(unsigned(glAverageTargetValue_1),32));

    status_currentAverageTgtValue_ap_vld_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            status_currentAverageTgtValue_ap_vld <= ap_const_logic_1;
        else 
            status_currentAverageTgtValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    status_currentDeltaTSHW_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n, tmp_i_i_i_fu_222_p1, status_currentDeltaTSHW_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            status_currentDeltaTSHW <= tmp_i_i_i_fu_222_p1;
        else 
            status_currentDeltaTSHW <= status_currentDeltaTSHW_preg;
        end if; 
    end process;


    status_currentDeltaTSHW_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n, deltaTsHWBak_V_empty_n, glConfig_V_empty_n, glRotateFlg_V_empty_n, glSFASTAreaCntThrBak_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (glSFASTAreaCntThrBak_empty_n = ap_const_logic_0) or (glRotateFlg_V_empty_n = ap_const_logic_0) or (glConfig_V_empty_n = ap_const_logic_0) or (deltaTsHWBak_V_empty_n = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            status_currentDeltaTSHW_ap_vld <= ap_const_logic_1;
        else 
            status_currentDeltaTSHW_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    status_currentFeedbackAreaCntThr <= std_logic_vector(IEEE.numeric_std.resize(unsigned(areaEventThrBak),32));

    status_currentFeedbackAreaCntThr_ap_vld_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            status_currentFeedbackAreaCntThr_ap_vld <= ap_const_logic_1;
        else 
            status_currentFeedbackAreaCntThr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    status_currentOFHistCntSum <= std_logic_vector(IEEE.numeric_std.resize(unsigned(glOFHistCntSum_V),32));

    status_currentOFHistCntSum_ap_vld_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            status_currentOFHistCntSum_ap_vld <= ap_const_logic_1;
        else 
            status_currentOFHistCntSum_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    status_currentOFHistRadiusSum <= std_logic_vector(IEEE.numeric_std.resize(unsigned(glOFHistRadiusSum_V),32));

    status_currentOFHistRadiusSum_ap_vld_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, pixelDataStream_V_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (pixelDataStream_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            status_currentOFHistRadiusSum_ap_vld <= ap_const_logic_1;
        else 
            status_currentOFHistRadiusSum_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_i_i_1668_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(glSFASTAreaCntThrBak_dout),32));
    tmp_i_i_i_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deltaTsHWBak_V_dout),32));
    tsStreamOut_V_V_1_ack_in <= tsStreamOut_V_V_1_state(1);
    tsStreamOut_V_V_1_ack_out <= tsStreamOut_V_V_TREADY;

    tsStreamOut_V_V_1_data_out_assign_proc : process(tsStreamOut_V_V_1_payload_A, tsStreamOut_V_V_1_payload_B, tsStreamOut_V_V_1_sel)
    begin
        if ((tsStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_B;
        else 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut_V_V_1_load_A <= (tsStreamOut_V_V_1_state_cmp_full and not(tsStreamOut_V_V_1_sel_wr));
    tsStreamOut_V_V_1_load_B <= (tsStreamOut_V_V_1_state_cmp_full and tsStreamOut_V_V_1_sel_wr);
    tsStreamOut_V_V_1_sel <= tsStreamOut_V_V_1_sel_rd;
    tsStreamOut_V_V_1_state_cmp_full <= '0' when (tsStreamOut_V_V_1_state = ap_const_lv2_1) else '1';
    tsStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_fu_172_tsStreamOut_V_V_TVALID;
    tsStreamOut_V_V_1_vld_out <= tsStreamOut_V_V_1_state(0);
    tsStreamOut_V_V_TDATA <= tsStreamOut_V_V_1_data_out;
    tsStreamOut_V_V_TVALID <= tsStreamOut_V_V_1_state(0);
    xStreamOut_V_V_1_ack_in <= xStreamOut_V_V_1_state(1);
    xStreamOut_V_V_1_ack_out <= xStreamOut_V_V_TREADY;

    xStreamOut_V_V_1_data_out_assign_proc : process(xStreamOut_V_V_1_payload_A, xStreamOut_V_V_1_payload_B, xStreamOut_V_V_1_sel)
    begin
        if ((xStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_B;
        else 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut_V_V_1_load_A <= (xStreamOut_V_V_1_state_cmp_full and not(xStreamOut_V_V_1_sel_wr));
    xStreamOut_V_V_1_load_B <= (xStreamOut_V_V_1_state_cmp_full and xStreamOut_V_V_1_sel_wr);
    xStreamOut_V_V_1_sel <= xStreamOut_V_V_1_sel_rd;
    xStreamOut_V_V_1_state_cmp_full <= '0' when (xStreamOut_V_V_1_state = ap_const_lv2_1) else '1';
    xStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_fu_172_xStreamOut_V_V_TVALID;
    xStreamOut_V_V_1_vld_out <= xStreamOut_V_V_1_state(0);
    xStreamOut_V_V_TDATA <= xStreamOut_V_V_1_data_out;
    xStreamOut_V_V_TVALID <= xStreamOut_V_V_1_state(0);
    yStreamOut_V_V_1_ack_in <= yStreamOut_V_V_1_state(1);
    yStreamOut_V_V_1_ack_out <= yStreamOut_V_V_TREADY;

    yStreamOut_V_V_1_data_out_assign_proc : process(yStreamOut_V_V_1_payload_A, yStreamOut_V_V_1_payload_B, yStreamOut_V_V_1_sel)
    begin
        if ((yStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_B;
        else 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut_V_V_1_load_A <= (yStreamOut_V_V_1_state_cmp_full and not(yStreamOut_V_V_1_sel_wr));
    yStreamOut_V_V_1_load_B <= (yStreamOut_V_V_1_state_cmp_full and yStreamOut_V_V_1_sel_wr);
    yStreamOut_V_V_1_sel <= yStreamOut_V_V_1_sel_rd;
    yStreamOut_V_V_1_state_cmp_full <= '0' when (yStreamOut_V_V_1_state = ap_const_lv2_1) else '1';
    yStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_fu_172_yStreamOut_V_V_TVALID;
    yStreamOut_V_V_1_vld_out <= yStreamOut_V_V_1_state(0);
    yStreamOut_V_V_TDATA <= yStreamOut_V_V_1_data_out;
    yStreamOut_V_V_TVALID <= yStreamOut_V_V_1_state(0);
end behav;
