-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity findStreamMinScale2W is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    select_V_empty_n : IN STD_LOGIC;
    select_V_read : OUT STD_LOGIC;
    inStream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    inStream_V_empty_n : IN STD_LOGIC;
    inStream_V_read : OUT STD_LOGIC;
    OF_yStream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    OF_yStream_V_empty_n : IN STD_LOGIC;
    OF_yStream_V_read : OUT STD_LOGIC;
    minStream_V_V_din : OUT STD_LOGIC_VECTOR (14 downto 0);
    minStream_V_V_full_n : IN STD_LOGIC;
    minStream_V_V_write : OUT STD_LOGIC;
    OFStream_V_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    OFStream_V_V_full_n : IN STD_LOGIC;
    OFStream_V_V_write : OUT STD_LOGIC );
end;


architecture behav of findStreamMinScale2W is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal select_V_blk_n : STD_LOGIC;
    signal select_V_read_read_fu_36_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_V_read_reg_56 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_findStreamMinScale2_fu_42_ap_start : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_ap_done : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_ap_idle : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_ap_ready : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_inStream_V_read : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_OF_yStream_V_read : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_minStream_V_V_din : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_findStreamMinScale2_fu_42_minStream_V_V_write : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_OFStream_V_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_findStreamMinScale2_fu_42_OFStream_V_V_write : STD_LOGIC;
    signal grp_findStreamMinScale2_fu_42_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component findStreamMinScale2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        inStream_V_empty_n : IN STD_LOGIC;
        inStream_V_read : OUT STD_LOGIC;
        OF_yStream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        OF_yStream_V_empty_n : IN STD_LOGIC;
        OF_yStream_V_read : OUT STD_LOGIC;
        minStream_V_V_din : OUT STD_LOGIC_VECTOR (14 downto 0);
        minStream_V_V_full_n : IN STD_LOGIC;
        minStream_V_V_write : OUT STD_LOGIC;
        OFStream_V_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        OFStream_V_V_full_n : IN STD_LOGIC;
        OFStream_V_V_write : OUT STD_LOGIC );
    end component;



begin
    grp_findStreamMinScale2_fu_42 : component findStreamMinScale2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_findStreamMinScale2_fu_42_ap_start,
        ap_done => grp_findStreamMinScale2_fu_42_ap_done,
        ap_idle => grp_findStreamMinScale2_fu_42_ap_idle,
        ap_ready => grp_findStreamMinScale2_fu_42_ap_ready,
        inStream_V_dout => inStream_V_dout,
        inStream_V_empty_n => inStream_V_empty_n,
        inStream_V_read => grp_findStreamMinScale2_fu_42_inStream_V_read,
        OF_yStream_V_dout => OF_yStream_V_dout,
        OF_yStream_V_empty_n => OF_yStream_V_empty_n,
        OF_yStream_V_read => grp_findStreamMinScale2_fu_42_OF_yStream_V_read,
        minStream_V_V_din => grp_findStreamMinScale2_fu_42_minStream_V_V_din,
        minStream_V_V_full_n => minStream_V_V_full_n,
        minStream_V_V_write => grp_findStreamMinScale2_fu_42_minStream_V_V_write,
        OFStream_V_V_din => grp_findStreamMinScale2_fu_42_OFStream_V_V_din,
        OFStream_V_V_full_n => OFStream_V_V_full_n,
        OFStream_V_V_write => grp_findStreamMinScale2_fu_42_OFStream_V_V_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_findStreamMinScale2_fu_42_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_findStreamMinScale2_fu_42_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (select_V_read_read_fu_36_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_findStreamMinScale2_fu_42_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_findStreamMinScale2_fu_42_ap_ready = ap_const_logic_1)) then 
                    grp_findStreamMinScale2_fu_42_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                select_V_read_reg_56 <= select_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, select_V_empty_n, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    OFStream_V_V_din <= grp_findStreamMinScale2_fu_42_OFStream_V_V_din;

    OFStream_V_V_write_assign_proc : process(select_V_read_reg_56, grp_findStreamMinScale2_fu_42_OFStream_V_V_write, ap_CS_fsm_state2)
    begin
        if (((select_V_read_reg_56 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OFStream_V_V_write <= grp_findStreamMinScale2_fu_42_OFStream_V_V_write;
        else 
            OFStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    OF_yStream_V_read_assign_proc : process(select_V_read_reg_56, grp_findStreamMinScale2_fu_42_OF_yStream_V_read, ap_CS_fsm_state2)
    begin
        if (((select_V_read_reg_56 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OF_yStream_V_read <= grp_findStreamMinScale2_fu_42_OF_yStream_V_read;
        else 
            OF_yStream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, select_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, ap_done_reg, select_V_empty_n)
    begin
                ap_block_state1_ignore_call0 <= ((ap_start = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(select_V_read_reg_56, grp_findStreamMinScale2_fu_42_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((select_V_read_reg_56 = ap_const_lv1_1) and (grp_findStreamMinScale2_fu_42_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_findStreamMinScale2_fu_42_ap_start <= grp_findStreamMinScale2_fu_42_ap_start_reg;

    inStream_V_read_assign_proc : process(select_V_read_reg_56, grp_findStreamMinScale2_fu_42_inStream_V_read, ap_CS_fsm_state2)
    begin
        if (((select_V_read_reg_56 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inStream_V_read <= grp_findStreamMinScale2_fu_42_inStream_V_read;
        else 
            inStream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    minStream_V_V_din <= grp_findStreamMinScale2_fu_42_minStream_V_V_din;

    minStream_V_V_write_assign_proc : process(select_V_read_reg_56, grp_findStreamMinScale2_fu_42_minStream_V_V_write, ap_CS_fsm_state2)
    begin
        if (((select_V_read_reg_56 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            minStream_V_V_write <= grp_findStreamMinScale2_fu_42_minStream_V_V_write;
        else 
            minStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    select_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            select_V_blk_n <= select_V_empty_n;
        else 
            select_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    select_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (select_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            select_V_read <= ap_const_logic_1;
        else 
            select_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_V_read_read_fu_36_p2 <= select_V_dout;
end behav;
