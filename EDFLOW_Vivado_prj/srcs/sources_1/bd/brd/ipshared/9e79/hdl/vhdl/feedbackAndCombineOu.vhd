-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feedbackAndCombineOu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_V : IN STD_LOGIC_VECTOR (0 downto 0);
    packetEventDataStream_V_V_dout : IN STD_LOGIC_VECTOR (95 downto 0);
    packetEventDataStream_V_V_empty_n : IN STD_LOGIC;
    packetEventDataStream_V_V_read : OUT STD_LOGIC;
    miniSumStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    miniSumStreamScale0_V_V_empty_n : IN STD_LOGIC;
    miniSumStreamScale0_V_V_read : OUT STD_LOGIC;
    OFRetStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    OFRetStreamScale0_V_V_empty_n : IN STD_LOGIC;
    OFRetStreamScale0_V_V_read : OUT STD_LOGIC;
    miniSumStreamScale1_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    miniSumStreamScale1_V_V_empty_n : IN STD_LOGIC;
    miniSumStreamScale1_V_V_read : OUT STD_LOGIC;
    OFRetStreamScale1_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    OFRetStreamScale1_V_V_empty_n : IN STD_LOGIC;
    OFRetStreamScale1_V_V_read : OUT STD_LOGIC;
    miniSumStreamScale2_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    miniSumStreamScale2_V_V_empty_n : IN STD_LOGIC;
    miniSumStreamScale2_V_V_read : OUT STD_LOGIC;
    OFRetStreamScale2_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    OFRetStreamScale2_V_V_empty_n : IN STD_LOGIC;
    OFRetStreamScale2_V_V_read : OUT STD_LOGIC;
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    polStreamOut_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    custDataStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    custDataStreamOut_V_V_TVALID : OUT STD_LOGIC;
    custDataStreamOut_V_V_TREADY : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (0 downto 0);
    glOFHistCntSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    glOFHistCntSum_V_ap_vld : OUT STD_LOGIC;
    glOFHistRadiusSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    glOFHistRadiusSum_V_ap_vld : OUT STD_LOGIC;
    areaEventThrBak : OUT STD_LOGIC_VECTOR (15 downto 0);
    areaEventThrBak_ap_vld : OUT STD_LOGIC;
    glAverageTargetValue_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    glAverageTargetValue_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of feedbackAndCombineOu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_7F7F : STD_LOGIC_VECTOR (15 downto 0) := "0111111101111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xStreamOut_V_V_1_data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel : STD_LOGIC;
    signal xStreamOut_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut_V_V_1_data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel : STD_LOGIC;
    signal yStreamOut_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal polStreamOut_V_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal polStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal polStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel : STD_LOGIC;
    signal polStreamOut_V_V_1_load_A : STD_LOGIC;
    signal polStreamOut_V_V_1_load_B : STD_LOGIC;
    signal polStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut_V_V_1_data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal custDataStreamOut_V_V_1_data_in : STD_LOGIC_VECTOR (23 downto 0);
    signal custDataStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal custDataStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal custDataStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal custDataStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal custDataStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal custDataStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal custDataStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal custDataStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal custDataStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal custDataStreamOut_V_V_1_sel : STD_LOGIC;
    signal custDataStreamOut_V_V_1_load_A : STD_LOGIC;
    signal custDataStreamOut_V_V_1_load_B : STD_LOGIC;
    signal custDataStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal custDataStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal OFHistRadiusSum_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal OFHistCntSum_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal glAverageTargetValue : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal areaEventThr : STD_LOGIC_VECTOR (15 downto 0) := "0000001010111100";
    signal packetEventDataStream_V_V_blk_n : STD_LOGIC;
    signal select_V_read_read_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal yStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal custDataStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal x_V_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_289_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_144_cast_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_148_cast_fu_327_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_ap_start : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_ap_done : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_ap_idle : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_ap_ready : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_packetEventDataStream_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale0_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale0_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale1_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale1_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale2_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale2_V_V_read : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TVALID : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TREADY : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_OFHistRadiusSum_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_OFHistRadiusSum_V_o_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_OFHistCntSum_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_OFHistCntSum_V_o_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_o_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_areaEventThr_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_areaEventThr_o_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_ap_start : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_ap_done : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_ap_idle : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_ap_ready : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_OFHistRadiusSum_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_OFHistRadiusSum_V_o_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_OFHistCntSum_V_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_OFHistCntSum_V_o_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_o_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_areaEventThr_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_areaEventThr_o_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_areaEventThrBak : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_areaEventThrBak_ap_vld : STD_LOGIC;
    signal grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1_ap_vld : STD_LOGIC;
    signal grp_feedbackAndCombineOu_1_fu_181_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_feedbackWithoutOFHis_fu_229_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call6 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal p_Result_i_fu_279_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_cast_i_cast_cast_fu_302_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal pol_V_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_fu_310_p5 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component feedbackAndCombineOu_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        packetEventDataStream_V_V_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        packetEventDataStream_V_V_empty_n : IN STD_LOGIC;
        packetEventDataStream_V_V_read : OUT STD_LOGIC;
        miniSumStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
        miniSumStreamScale0_V_V_empty_n : IN STD_LOGIC;
        miniSumStreamScale0_V_V_read : OUT STD_LOGIC;
        OFRetStreamScale0_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        OFRetStreamScale0_V_V_empty_n : IN STD_LOGIC;
        OFRetStreamScale0_V_V_read : OUT STD_LOGIC;
        miniSumStreamScale1_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
        miniSumStreamScale1_V_V_empty_n : IN STD_LOGIC;
        miniSumStreamScale1_V_V_read : OUT STD_LOGIC;
        OFRetStreamScale1_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        OFRetStreamScale1_V_V_empty_n : IN STD_LOGIC;
        OFRetStreamScale1_V_V_read : OUT STD_LOGIC;
        miniSumStreamScale2_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
        miniSumStreamScale2_V_V_empty_n : IN STD_LOGIC;
        miniSumStreamScale2_V_V_read : OUT STD_LOGIC;
        OFRetStreamScale2_V_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        OFRetStreamScale2_V_V_empty_n : IN STD_LOGIC;
        OFRetStreamScale2_V_V_read : OUT STD_LOGIC;
        xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        xStreamOut_V_V_TVALID : OUT STD_LOGIC;
        xStreamOut_V_V_TREADY : IN STD_LOGIC;
        yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        yStreamOut_V_V_TVALID : OUT STD_LOGIC;
        yStreamOut_V_V_TREADY : IN STD_LOGIC;
        polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        polStreamOut_V_V_TVALID : OUT STD_LOGIC;
        polStreamOut_V_V_TREADY : IN STD_LOGIC;
        tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
        tsStreamOut_V_V_TREADY : IN STD_LOGIC;
        custDataStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        custDataStreamOut_V_V_TVALID : OUT STD_LOGIC;
        custDataStreamOut_V_V_TREADY : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (0 downto 0);
        OFHistRadiusSum_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        OFHistRadiusSum_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        OFHistRadiusSum_V_o_ap_vld : OUT STD_LOGIC;
        OFHistCntSum_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        OFHistCntSum_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        OFHistCntSum_V_o_ap_vld : OUT STD_LOGIC;
        glAverageTargetValue_i : IN STD_LOGIC_VECTOR (15 downto 0);
        glAverageTargetValue_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        glAverageTargetValue_o_ap_vld : OUT STD_LOGIC;
        areaEventThr_i : IN STD_LOGIC_VECTOR (15 downto 0);
        areaEventThr_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        areaEventThr_o_ap_vld : OUT STD_LOGIC;
        glOFHistCntSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        glOFHistCntSum_V_ap_vld : OUT STD_LOGIC;
        glOFHistRadiusSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        glOFHistRadiusSum_V_ap_vld : OUT STD_LOGIC;
        areaEventThrBak : OUT STD_LOGIC_VECTOR (15 downto 0);
        areaEventThrBak_ap_vld : OUT STD_LOGIC;
        glAverageTargetValue_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        glAverageTargetValue_1_ap_vld : OUT STD_LOGIC );
    end component;


    component feedbackWithoutOFHis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        OFRet_V : IN STD_LOGIC_VECTOR (15 downto 0);
        rotateFlg_V : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        OFHistRadiusSum_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        OFHistRadiusSum_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        OFHistRadiusSum_V_o_ap_vld : OUT STD_LOGIC;
        OFHistCntSum_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
        OFHistCntSum_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        OFHistCntSum_V_o_ap_vld : OUT STD_LOGIC;
        glAverageTargetValue_i : IN STD_LOGIC_VECTOR (15 downto 0);
        glAverageTargetValue_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        glAverageTargetValue_o_ap_vld : OUT STD_LOGIC;
        areaEventThr_i : IN STD_LOGIC_VECTOR (15 downto 0);
        areaEventThr_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        areaEventThr_o_ap_vld : OUT STD_LOGIC;
        glOFHistCntSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        glOFHistCntSum_V_ap_vld : OUT STD_LOGIC;
        glOFHistRadiusSum_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        glOFHistRadiusSum_V_ap_vld : OUT STD_LOGIC;
        areaEventThrBak : OUT STD_LOGIC_VECTOR (15 downto 0);
        areaEventThrBak_ap_vld : OUT STD_LOGIC;
        glAverageTargetValue_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        glAverageTargetValue_1_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_feedbackAndCombineOu_1_fu_181 : component feedbackAndCombineOu_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feedbackAndCombineOu_1_fu_181_ap_start,
        ap_done => grp_feedbackAndCombineOu_1_fu_181_ap_done,
        ap_idle => grp_feedbackAndCombineOu_1_fu_181_ap_idle,
        ap_ready => grp_feedbackAndCombineOu_1_fu_181_ap_ready,
        packetEventDataStream_V_V_dout => packetEventDataStream_V_V_dout,
        packetEventDataStream_V_V_empty_n => packetEventDataStream_V_V_empty_n,
        packetEventDataStream_V_V_read => grp_feedbackAndCombineOu_1_fu_181_packetEventDataStream_V_V_read,
        miniSumStreamScale0_V_V_dout => miniSumStreamScale0_V_V_dout,
        miniSumStreamScale0_V_V_empty_n => miniSumStreamScale0_V_V_empty_n,
        miniSumStreamScale0_V_V_read => grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale0_V_V_read,
        OFRetStreamScale0_V_V_dout => OFRetStreamScale0_V_V_dout,
        OFRetStreamScale0_V_V_empty_n => OFRetStreamScale0_V_V_empty_n,
        OFRetStreamScale0_V_V_read => grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale0_V_V_read,
        miniSumStreamScale1_V_V_dout => miniSumStreamScale1_V_V_dout,
        miniSumStreamScale1_V_V_empty_n => miniSumStreamScale1_V_V_empty_n,
        miniSumStreamScale1_V_V_read => grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale1_V_V_read,
        OFRetStreamScale1_V_V_dout => OFRetStreamScale1_V_V_dout,
        OFRetStreamScale1_V_V_empty_n => OFRetStreamScale1_V_V_empty_n,
        OFRetStreamScale1_V_V_read => grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale1_V_V_read,
        miniSumStreamScale2_V_V_dout => miniSumStreamScale2_V_V_dout,
        miniSumStreamScale2_V_V_empty_n => miniSumStreamScale2_V_V_empty_n,
        miniSumStreamScale2_V_V_read => grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale2_V_V_read,
        OFRetStreamScale2_V_V_dout => OFRetStreamScale2_V_V_dout,
        OFRetStreamScale2_V_V_empty_n => OFRetStreamScale2_V_V_empty_n,
        OFRetStreamScale2_V_V_read => grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale2_V_V_read,
        xStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TVALID,
        xStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TREADY,
        yStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TVALID,
        yStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TREADY,
        polStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TVALID,
        polStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TREADY,
        tsStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TREADY,
        custDataStreamOut_V_V_TDATA => grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TDATA,
        custDataStreamOut_V_V_TVALID => grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TVALID,
        custDataStreamOut_V_V_TREADY => grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TREADY,
        p_read => p_read,
        p_read1 => p_read1,
        OFHistRadiusSum_V_i => OFHistRadiusSum_V,
        OFHistRadiusSum_V_o => grp_feedbackAndCombineOu_1_fu_181_OFHistRadiusSum_V_o,
        OFHistRadiusSum_V_o_ap_vld => grp_feedbackAndCombineOu_1_fu_181_OFHistRadiusSum_V_o_ap_vld,
        OFHistCntSum_V_i => OFHistCntSum_V,
        OFHistCntSum_V_o => grp_feedbackAndCombineOu_1_fu_181_OFHistCntSum_V_o,
        OFHistCntSum_V_o_ap_vld => grp_feedbackAndCombineOu_1_fu_181_OFHistCntSum_V_o_ap_vld,
        glAverageTargetValue_i => glAverageTargetValue,
        glAverageTargetValue_o => grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_o,
        glAverageTargetValue_o_ap_vld => grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_o_ap_vld,
        areaEventThr_i => areaEventThr,
        areaEventThr_o => grp_feedbackAndCombineOu_1_fu_181_areaEventThr_o,
        areaEventThr_o_ap_vld => grp_feedbackAndCombineOu_1_fu_181_areaEventThr_o_ap_vld,
        glOFHistCntSum_V => grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V,
        glOFHistCntSum_V_ap_vld => grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V_ap_vld,
        glOFHistRadiusSum_V => grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V,
        glOFHistRadiusSum_V_ap_vld => grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V_ap_vld,
        areaEventThrBak => grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak,
        areaEventThrBak_ap_vld => grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak_ap_vld,
        glAverageTargetValue_1 => grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1,
        glAverageTargetValue_1_ap_vld => grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1_ap_vld);

    grp_feedbackWithoutOFHis_fu_229 : component feedbackWithoutOFHis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feedbackWithoutOFHis_fu_229_ap_start,
        ap_done => grp_feedbackWithoutOFHis_fu_229_ap_done,
        ap_idle => grp_feedbackWithoutOFHis_fu_229_ap_idle,
        ap_ready => grp_feedbackWithoutOFHis_fu_229_ap_ready,
        OFRet_V => ap_const_lv16_7F7F,
        rotateFlg_V => p_read1,
        p_read => p_read,
        OFHistRadiusSum_V_i => OFHistRadiusSum_V,
        OFHistRadiusSum_V_o => grp_feedbackWithoutOFHis_fu_229_OFHistRadiusSum_V_o,
        OFHistRadiusSum_V_o_ap_vld => grp_feedbackWithoutOFHis_fu_229_OFHistRadiusSum_V_o_ap_vld,
        OFHistCntSum_V_i => OFHistCntSum_V,
        OFHistCntSum_V_o => grp_feedbackWithoutOFHis_fu_229_OFHistCntSum_V_o,
        OFHistCntSum_V_o_ap_vld => grp_feedbackWithoutOFHis_fu_229_OFHistCntSum_V_o_ap_vld,
        glAverageTargetValue_i => glAverageTargetValue,
        glAverageTargetValue_o => grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_o,
        glAverageTargetValue_o_ap_vld => grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_o_ap_vld,
        areaEventThr_i => areaEventThr,
        areaEventThr_o => grp_feedbackWithoutOFHis_fu_229_areaEventThr_o,
        areaEventThr_o_ap_vld => grp_feedbackWithoutOFHis_fu_229_areaEventThr_o_ap_vld,
        glOFHistCntSum_V => grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V,
        glOFHistCntSum_V_ap_vld => grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V_ap_vld,
        glOFHistRadiusSum_V => grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V,
        glOFHistRadiusSum_V_ap_vld => grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V_ap_vld,
        areaEventThrBak => grp_feedbackWithoutOFHis_fu_229_areaEventThrBak,
        areaEventThrBak_ap_vld => grp_feedbackWithoutOFHis_fu_229_areaEventThrBak_ap_vld,
        glAverageTargetValue_1 => grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1,
        glAverageTargetValue_1_ap_vld => grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                custDataStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((custDataStreamOut_V_V_1_ack_out = ap_const_logic_1) and (custDataStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        custDataStreamOut_V_V_1_sel_rd <= not(custDataStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                custDataStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((custDataStreamOut_V_V_1_ack_in = ap_const_logic_1) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        custDataStreamOut_V_V_1_sel_wr <= not(custDataStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    custDataStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                custDataStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((custDataStreamOut_V_V_1_state = ap_const_lv2_2) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((custDataStreamOut_V_V_1_state = ap_const_lv2_1) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_3) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((custDataStreamOut_V_V_1_vld_in = ap_const_logic_0) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((custDataStreamOut_V_V_1_ack_out = ap_const_logic_0) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (custDataStreamOut_V_V_1_state = ap_const_lv2_3)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_1) and (custDataStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((custDataStreamOut_V_V_1_state = ap_const_lv2_2) and (custDataStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    custDataStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_feedbackAndCombineOu_1_fu_181_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feedbackAndCombineOu_1_fu_181_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_feedbackAndCombineOu_1_fu_181_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_feedbackAndCombineOu_1_fu_181_ap_ready = ap_const_logic_1)) then 
                    grp_feedbackAndCombineOu_1_fu_181_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_feedbackWithoutOFHis_fu_229_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feedbackWithoutOFHis_fu_229_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_feedbackWithoutOFHis_fu_229_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_feedbackWithoutOFHis_fu_229_ap_ready = ap_const_logic_1)) then 
                    grp_feedbackWithoutOFHis_fu_229_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_rd <= not(polStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_in = ap_const_logic_1) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_wr <= not(polStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                polStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((polStreamOut_V_V_1_state = ap_const_lv2_2) and (polStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((polStreamOut_V_V_1_state = ap_const_lv2_3) and (polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((polStreamOut_V_V_1_state = ap_const_lv2_1) and (polStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((polStreamOut_V_V_1_state = ap_const_lv2_3) and (polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (polStreamOut_V_V_1_state = ap_const_lv2_3)) or ((polStreamOut_V_V_1_state = ap_const_lv2_1) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((polStreamOut_V_V_1_state = ap_const_lv2_2) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_rd <= not(tsStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_in = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_wr <= not(tsStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tsStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut_V_V_1_state = ap_const_lv2_2) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_3) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut_V_V_1_state = ap_const_lv2_1) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_3) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_1) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((tsStreamOut_V_V_1_state = ap_const_lv2_2) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_rd <= not(xStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_in = ap_const_logic_1) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_wr <= not(xStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut_V_V_1_state = ap_const_lv2_2) and (xStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((xStreamOut_V_V_1_state = ap_const_lv2_3) and (xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut_V_V_1_state = ap_const_lv2_1) and (xStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((xStreamOut_V_V_1_state = ap_const_lv2_3) and (xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (xStreamOut_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut_V_V_1_state = ap_const_lv2_1) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((xStreamOut_V_V_1_state = ap_const_lv2_2) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_rd <= not(yStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_in = ap_const_logic_1) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_wr <= not(yStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut_V_V_1_state = ap_const_lv2_2) and (yStreamOut_V_V_1_vld_in = ap_const_logic_0)) or ((yStreamOut_V_V_1_state = ap_const_lv2_3) and (yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut_V_V_1_state = ap_const_lv2_1) and (yStreamOut_V_V_1_ack_out = ap_const_logic_0)) or ((yStreamOut_V_V_1_state = ap_const_lv2_3) and (yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut_V_V_1_state = ap_const_lv2_1) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1)) or ((yStreamOut_V_V_1_state = ap_const_lv2_2) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OFHistCntSum_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_feedbackWithoutOFHis_fu_229_OFHistCntSum_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                OFHistCntSum_V <= grp_feedbackWithoutOFHis_fu_229_OFHistCntSum_V_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_OFHistCntSum_V_o_ap_vld = ap_const_logic_1))) then 
                OFHistCntSum_V <= grp_feedbackAndCombineOu_1_fu_181_OFHistCntSum_V_o;
            end if; 
        end if;
    end process;

    OFHistRadiusSum_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_feedbackWithoutOFHis_fu_229_OFHistRadiusSum_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                OFHistRadiusSum_V <= grp_feedbackWithoutOFHis_fu_229_OFHistRadiusSum_V_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_OFHistRadiusSum_V_o_ap_vld = ap_const_logic_1))) then 
                OFHistRadiusSum_V <= grp_feedbackAndCombineOu_1_fu_181_OFHistRadiusSum_V_o;
            end if; 
        end if;
    end process;

    areaEventThr_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_feedbackWithoutOFHis_fu_229_areaEventThr_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                areaEventThr <= grp_feedbackWithoutOFHis_fu_229_areaEventThr_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_areaEventThr_o_ap_vld = ap_const_logic_1))) then 
                areaEventThr <= grp_feedbackAndCombineOu_1_fu_181_areaEventThr_o;
            end if; 
        end if;
    end process;

    glAverageTargetValue_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                glAverageTargetValue <= grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_o_ap_vld = ap_const_logic_1))) then 
                glAverageTargetValue <= grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_o;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                custDataStreamOut_V_V_1_payload_A <= custDataStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((custDataStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                custDataStreamOut_V_V_1_payload_B <= custDataStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_A <= polStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_B <= polStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_A <= tsStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_B <= tsStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_A <= xStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_B <= xStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_A <= yStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_B <= yStreamOut_V_V_1_data_in;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, select_V_read_read_fu_134_p2, ap_CS_fsm_state2, ap_block_state1_io, grp_feedbackAndCombineOu_1_fu_181_ap_done, grp_feedbackWithoutOFHis_fu_229_ap_done, ap_CS_fsm_state3, ap_block_state2_io, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((grp_feedbackWithoutOFHis_fu_229_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_feedbackAndCombineOu_1_fu_181_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    OFRetStreamScale0_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale0_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            OFRetStreamScale0_V_V_read <= grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale0_V_V_read;
        else 
            OFRetStreamScale0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    OFRetStreamScale1_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale1_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            OFRetStreamScale1_V_V_read <= grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale1_V_V_read;
        else 
            OFRetStreamScale1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    OFRetStreamScale2_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale2_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            OFRetStreamScale2_V_V_read <= grp_feedbackAndCombineOu_1_fu_181_OFRetStreamScale2_V_V_read;
        else 
            OFRetStreamScale2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, select_V, packetEventDataStream_V_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, select_V, packetEventDataStream_V_V_empty_n)
    begin
                ap_block_state1_ignore_call0 <= ((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_ignore_call6_assign_proc : process(ap_start, select_V, packetEventDataStream_V_V_empty_n)
    begin
                ap_block_state1_ignore_call6 <= ((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_io_assign_proc : process(select_V, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state1_io <= (((select_V = ap_const_lv1_0) and (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0)) or ((select_V = ap_const_lv1_0) and (tsStreamOut_V_V_1_ack_in = ap_const_logic_0)) or ((select_V = ap_const_lv1_0) and (polStreamOut_V_V_1_ack_in = ap_const_logic_0)) or ((select_V = ap_const_lv1_0) and (yStreamOut_V_V_1_ack_in = ap_const_logic_0)) or ((select_V = ap_const_lv1_0) and (xStreamOut_V_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state2_io <= ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in)
    begin
                ap_block_state4 <= ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if (((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, custDataStreamOut_V_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (custDataStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    areaEventThrBak_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak, grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak_ap_vld, grp_feedbackWithoutOFHis_fu_229_areaEventThrBak, grp_feedbackWithoutOFHis_fu_229_areaEventThrBak_ap_vld, ap_CS_fsm_state3)
    begin
        if (((grp_feedbackWithoutOFHis_fu_229_areaEventThrBak_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            areaEventThrBak <= grp_feedbackWithoutOFHis_fu_229_areaEventThrBak;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak_ap_vld = ap_const_logic_1))) then 
            areaEventThrBak <= grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak;
        else 
            areaEventThrBak <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    areaEventThrBak_ap_vld_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak_ap_vld, grp_feedbackWithoutOFHis_fu_229_areaEventThrBak_ap_vld, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            areaEventThrBak_ap_vld <= grp_feedbackWithoutOFHis_fu_229_areaEventThrBak_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            areaEventThrBak_ap_vld <= grp_feedbackAndCombineOu_1_fu_181_areaEventThrBak_ap_vld;
        else 
            areaEventThrBak_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    custDataStreamOut_V_V_1_ack_in <= custDataStreamOut_V_V_1_state(1);
    custDataStreamOut_V_V_1_ack_out <= custDataStreamOut_V_V_TREADY;

    custDataStreamOut_V_V_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, tmp_V_148_cast_fu_327_p1, grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TDATA, grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            custDataStreamOut_V_V_1_data_in <= tmp_V_148_cast_fu_327_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TVALID = ap_const_logic_1))) then 
            custDataStreamOut_V_V_1_data_in <= grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TDATA;
        else 
            custDataStreamOut_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    custDataStreamOut_V_V_1_data_out_assign_proc : process(custDataStreamOut_V_V_1_payload_A, custDataStreamOut_V_V_1_payload_B, custDataStreamOut_V_V_1_sel)
    begin
        if ((custDataStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            custDataStreamOut_V_V_1_data_out <= custDataStreamOut_V_V_1_payload_B;
        else 
            custDataStreamOut_V_V_1_data_out <= custDataStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    custDataStreamOut_V_V_1_load_A <= (not(custDataStreamOut_V_V_1_sel_wr) and custDataStreamOut_V_V_1_state_cmp_full);
    custDataStreamOut_V_V_1_load_B <= (custDataStreamOut_V_V_1_state_cmp_full and custDataStreamOut_V_V_1_sel_wr);
    custDataStreamOut_V_V_1_sel <= custDataStreamOut_V_V_1_sel_rd;
    custDataStreamOut_V_V_1_state_cmp_full <= '0' when (custDataStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    custDataStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, ap_block_state1_io, grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            custDataStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            custDataStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TVALID;
        else 
            custDataStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    custDataStreamOut_V_V_1_vld_out <= custDataStreamOut_V_V_1_state(0);
    custDataStreamOut_V_V_TDATA <= custDataStreamOut_V_V_1_data_out;

    custDataStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, custDataStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            custDataStreamOut_V_V_TDATA_blk_n <= custDataStreamOut_V_V_1_state(1);
        else 
            custDataStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    custDataStreamOut_V_V_TVALID <= custDataStreamOut_V_V_1_state(0);

    glAverageTargetValue_1_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1, grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1_ap_vld, grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1, grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1_ap_vld, ap_CS_fsm_state3)
    begin
        if (((grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            glAverageTargetValue_1 <= grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1_ap_vld = ap_const_logic_1))) then 
            glAverageTargetValue_1 <= grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1;
        else 
            glAverageTargetValue_1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    glAverageTargetValue_1_ap_vld_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1_ap_vld, grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1_ap_vld, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glAverageTargetValue_1_ap_vld <= grp_feedbackWithoutOFHis_fu_229_glAverageTargetValue_1_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            glAverageTargetValue_1_ap_vld <= grp_feedbackAndCombineOu_1_fu_181_glAverageTargetValue_1_ap_vld;
        else 
            glAverageTargetValue_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    glOFHistCntSum_V_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V, grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V_ap_vld, grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V, grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V_ap_vld, ap_CS_fsm_state3)
    begin
        if (((grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            glOFHistCntSum_V <= grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V_ap_vld = ap_const_logic_1))) then 
            glOFHistCntSum_V <= grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V;
        else 
            glOFHistCntSum_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    glOFHistCntSum_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V_ap_vld, grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V_ap_vld, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glOFHistCntSum_V_ap_vld <= grp_feedbackWithoutOFHis_fu_229_glOFHistCntSum_V_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            glOFHistCntSum_V_ap_vld <= grp_feedbackAndCombineOu_1_fu_181_glOFHistCntSum_V_ap_vld;
        else 
            glOFHistCntSum_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    glOFHistRadiusSum_V_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V, grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V_ap_vld, grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V, grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V_ap_vld, ap_CS_fsm_state3)
    begin
        if (((grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            glOFHistRadiusSum_V <= grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V_ap_vld = ap_const_logic_1))) then 
            glOFHistRadiusSum_V <= grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V;
        else 
            glOFHistRadiusSum_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    glOFHistRadiusSum_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V_ap_vld, grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V_ap_vld, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glOFHistRadiusSum_V_ap_vld <= grp_feedbackWithoutOFHis_fu_229_glOFHistRadiusSum_V_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            glOFHistRadiusSum_V_ap_vld <= grp_feedbackAndCombineOu_1_fu_181_glOFHistRadiusSum_V_ap_vld;
        else 
            glOFHistRadiusSum_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_feedbackAndCombineOu_1_fu_181_ap_start <= grp_feedbackAndCombineOu_1_fu_181_ap_start_reg;
    grp_feedbackAndCombineOu_1_fu_181_custDataStreamOut_V_V_TREADY <= custDataStreamOut_V_V_1_state(1);
    grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TREADY <= polStreamOut_V_V_1_state(1);
    grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TREADY <= tsStreamOut_V_V_1_state(1);
    grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TREADY <= xStreamOut_V_V_1_state(1);
    grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TREADY <= yStreamOut_V_V_1_state(1);
    grp_feedbackWithoutOFHis_fu_229_ap_start <= grp_feedbackWithoutOFHis_fu_229_ap_start_reg;

    miniSumStreamScale0_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale0_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            miniSumStreamScale0_V_V_read <= grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale0_V_V_read;
        else 
            miniSumStreamScale0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    miniSumStreamScale1_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale1_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            miniSumStreamScale1_V_V_read <= grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale1_V_V_read;
        else 
            miniSumStreamScale1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    miniSumStreamScale2_V_V_read_assign_proc : process(grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale2_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            miniSumStreamScale2_V_V_read <= grp_feedbackAndCombineOu_1_fu_181_miniSumStreamScale2_V_V_read;
        else 
            miniSumStreamScale2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_27_fu_310_p5 <= (ap_const_lv17_0(16 downto 11) & tmp_cast_i_cast_cast_fu_302_p3);
    p_Result_i_fu_279_p4 <= packetEventDataStream_V_V_dout(95 downto 33);
    p_Result_s_fu_289_p5 <= (ap_const_lv64_0(63 downto 63) & p_Result_i_fu_279_p4);

    packetEventDataStream_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packetEventDataStream_V_V_blk_n <= packetEventDataStream_V_V_empty_n;
        else 
            packetEventDataStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    packetEventDataStream_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, ap_block_state1_io, grp_feedbackAndCombineOu_1_fu_181_packetEventDataStream_V_V_read, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packetEventDataStream_V_V_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            packetEventDataStream_V_V_read <= grp_feedbackAndCombineOu_1_fu_181_packetEventDataStream_V_V_read;
        else 
            packetEventDataStream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut_V_V_1_ack_in <= polStreamOut_V_V_1_state(1);
    polStreamOut_V_V_1_ack_out <= polStreamOut_V_V_TREADY;

    polStreamOut_V_V_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, tmp_V_144_cast_fu_322_p1, grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TDATA, grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            polStreamOut_V_V_1_data_in <= tmp_V_144_cast_fu_322_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TVALID = ap_const_logic_1))) then 
            polStreamOut_V_V_1_data_in <= grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TDATA;
        else 
            polStreamOut_V_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    polStreamOut_V_V_1_data_out_assign_proc : process(polStreamOut_V_V_1_payload_A, polStreamOut_V_V_1_payload_B, polStreamOut_V_V_1_sel)
    begin
        if ((polStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_B;
        else 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    polStreamOut_V_V_1_load_A <= (polStreamOut_V_V_1_state_cmp_full and not(polStreamOut_V_V_1_sel_wr));
    polStreamOut_V_V_1_load_B <= (polStreamOut_V_V_1_state_cmp_full and polStreamOut_V_V_1_sel_wr);
    polStreamOut_V_V_1_sel <= polStreamOut_V_V_1_sel_rd;
    polStreamOut_V_V_1_state_cmp_full <= '0' when (polStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    polStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, ap_block_state1_io, grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            polStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_1_fu_181_polStreamOut_V_V_TVALID;
        else 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut_V_V_1_vld_out <= polStreamOut_V_V_1_state(0);
    polStreamOut_V_V_TDATA <= polStreamOut_V_V_1_data_out;

    polStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, polStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            polStreamOut_V_V_TDATA_blk_n <= polStreamOut_V_V_1_state(1);
        else 
            polStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamOut_V_V_TVALID <= polStreamOut_V_V_1_state(0);
    pol_V_fu_271_p3 <= packetEventDataStream_V_V_dout(32 downto 32);
    select_V_read_read_fu_134_p2 <= select_V;
    tmp_V_144_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pol_V_fu_271_p3),8));
    tmp_V_148_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_27_fu_310_p5),24));
    tmp_cast_i_cast_cast_fu_302_p3 <= 
        ap_const_lv11_7FE when (p_read1(0) = '1') else 
        ap_const_lv11_7FF;
    tsStreamOut_V_V_1_ack_in <= tsStreamOut_V_V_1_state(1);
    tsStreamOut_V_V_1_ack_out <= tsStreamOut_V_V_TREADY;

    tsStreamOut_V_V_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, p_Result_s_fu_289_p5, grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TDATA, grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tsStreamOut_V_V_1_data_in <= p_Result_s_fu_289_p5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TVALID = ap_const_logic_1))) then 
            tsStreamOut_V_V_1_data_in <= grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TDATA;
        else 
            tsStreamOut_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tsStreamOut_V_V_1_data_out_assign_proc : process(tsStreamOut_V_V_1_payload_A, tsStreamOut_V_V_1_payload_B, tsStreamOut_V_V_1_sel)
    begin
        if ((tsStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_B;
        else 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut_V_V_1_load_A <= (tsStreamOut_V_V_1_state_cmp_full and not(tsStreamOut_V_V_1_sel_wr));
    tsStreamOut_V_V_1_load_B <= (tsStreamOut_V_V_1_state_cmp_full and tsStreamOut_V_V_1_sel_wr);
    tsStreamOut_V_V_1_sel <= tsStreamOut_V_V_1_sel_rd;
    tsStreamOut_V_V_1_state_cmp_full <= '0' when (tsStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    tsStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, ap_block_state1_io, grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tsStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_1_fu_181_tsStreamOut_V_V_TVALID;
        else 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tsStreamOut_V_V_1_vld_out <= tsStreamOut_V_V_1_state(0);
    tsStreamOut_V_V_TDATA <= tsStreamOut_V_V_1_data_out;

    tsStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, tsStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            tsStreamOut_V_V_TDATA_blk_n <= tsStreamOut_V_V_1_state(1);
        else 
            tsStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut_V_V_TVALID <= tsStreamOut_V_V_1_state(0);
    xStreamOut_V_V_1_ack_in <= xStreamOut_V_V_1_state(1);
    xStreamOut_V_V_1_ack_out <= xStreamOut_V_V_TREADY;

    xStreamOut_V_V_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, x_V_fu_266_p1, grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TDATA, grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xStreamOut_V_V_1_data_in <= x_V_fu_266_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TVALID = ap_const_logic_1))) then 
            xStreamOut_V_V_1_data_in <= grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TDATA;
        else 
            xStreamOut_V_V_1_data_in <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xStreamOut_V_V_1_data_out_assign_proc : process(xStreamOut_V_V_1_payload_A, xStreamOut_V_V_1_payload_B, xStreamOut_V_V_1_sel)
    begin
        if ((xStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_B;
        else 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut_V_V_1_load_A <= (xStreamOut_V_V_1_state_cmp_full and not(xStreamOut_V_V_1_sel_wr));
    xStreamOut_V_V_1_load_B <= (xStreamOut_V_V_1_state_cmp_full and xStreamOut_V_V_1_sel_wr);
    xStreamOut_V_V_1_sel <= xStreamOut_V_V_1_sel_rd;
    xStreamOut_V_V_1_state_cmp_full <= '0' when (xStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    xStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, ap_block_state1_io, grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_1_fu_181_xStreamOut_V_V_TVALID;
        else 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xStreamOut_V_V_1_vld_out <= xStreamOut_V_V_1_state(0);
    xStreamOut_V_V_TDATA <= xStreamOut_V_V_1_data_out;

    xStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, xStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            xStreamOut_V_V_TDATA_blk_n <= xStreamOut_V_V_1_state(1);
        else 
            xStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut_V_V_TVALID <= xStreamOut_V_V_1_state(0);
    x_V_fu_266_p1 <= packetEventDataStream_V_V_dout(16 - 1 downto 0);
    yStreamOut_V_V_1_ack_in <= yStreamOut_V_V_1_state(1);
    yStreamOut_V_V_1_ack_out <= yStreamOut_V_V_TREADY;

    yStreamOut_V_V_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_dout, packetEventDataStream_V_V_empty_n, grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TDATA, grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            yStreamOut_V_V_1_data_in <= packetEventDataStream_V_V_dout(31 downto 16);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TVALID = ap_const_logic_1))) then 
            yStreamOut_V_V_1_data_in <= grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TDATA;
        else 
            yStreamOut_V_V_1_data_in <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    yStreamOut_V_V_1_data_out_assign_proc : process(yStreamOut_V_V_1_payload_A, yStreamOut_V_V_1_payload_B, yStreamOut_V_V_1_sel)
    begin
        if ((yStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_B;
        else 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut_V_V_1_load_A <= (yStreamOut_V_V_1_state_cmp_full and not(yStreamOut_V_V_1_sel_wr));
    yStreamOut_V_V_1_load_B <= (yStreamOut_V_V_1_state_cmp_full and yStreamOut_V_V_1_sel_wr);
    yStreamOut_V_V_1_sel <= yStreamOut_V_V_1_sel_rd;
    yStreamOut_V_V_1_state_cmp_full <= '0' when (yStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    yStreamOut_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, packetEventDataStream_V_V_empty_n, ap_block_state1_io, grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TVALID, ap_CS_fsm_state3)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or ((select_V = ap_const_lv1_0) and (packetEventDataStream_V_V_empty_n = ap_const_logic_0)))) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            yStreamOut_V_V_1_vld_in <= grp_feedbackAndCombineOu_1_fu_181_yStreamOut_V_V_TVALID;
        else 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yStreamOut_V_V_1_vld_out <= yStreamOut_V_V_1_state(0);
    yStreamOut_V_V_TDATA <= yStreamOut_V_V_1_data_out;

    yStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, select_V, yStreamOut_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (select_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            yStreamOut_V_V_TDATA_blk_n <= yStreamOut_V_V_1_state(1);
        else 
            yStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut_V_V_TVALID <= yStreamOut_V_V_1_state(0);
end behav;
