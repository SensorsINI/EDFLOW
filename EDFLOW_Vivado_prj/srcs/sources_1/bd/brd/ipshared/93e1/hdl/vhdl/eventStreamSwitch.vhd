-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eventStreamSwitch is
generic (
    C_S_AXI_CONFIG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONFIG_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    polStreamOut_V_V_TREADY : IN STD_LOGIC;
    cornerStreamOut_V_V_TREADY : IN STD_LOGIC;
    xStreamIn0_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    xStreamIn0_V_V_TVALID : IN STD_LOGIC;
    xStreamIn0_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn0_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn0_V_V_TVALID : IN STD_LOGIC;
    yStreamIn0_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn0_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    tsStreamIn0_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn0_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn0_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    polStreamIn0_V_V_TVALID : IN STD_LOGIC;
    polStreamIn0_V_V_TREADY : OUT STD_LOGIC;
    cornerStreamIn0_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    cornerStreamIn0_V_V_TVALID : IN STD_LOGIC;
    cornerStreamIn0_V_V_TREADY : OUT STD_LOGIC;
    xStreamIn1_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    xStreamIn1_V_V_TVALID : IN STD_LOGIC;
    xStreamIn1_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn1_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn1_V_V_TVALID : IN STD_LOGIC;
    yStreamIn1_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn1_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    tsStreamIn1_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn1_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn1_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    polStreamIn1_V_V_TVALID : IN STD_LOGIC;
    polStreamIn1_V_V_TREADY : OUT STD_LOGIC;
    cornerStreamIn1_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    cornerStreamIn1_V_V_TVALID : IN STD_LOGIC;
    cornerStreamIn1_V_V_TREADY : OUT STD_LOGIC;
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    polStreamOut_V_V_TVALID : OUT STD_LOGIC;
    cornerStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    cornerStreamOut_V_V_TVALID : OUT STD_LOGIC;
    s_axi_config_AWVALID : IN STD_LOGIC;
    s_axi_config_AWREADY : OUT STD_LOGIC;
    s_axi_config_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_WVALID : IN STD_LOGIC;
    s_axi_config_WREADY : OUT STD_LOGIC;
    s_axi_config_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH/8-1 downto 0);
    s_axi_config_ARVALID : IN STD_LOGIC;
    s_axi_config_ARREADY : OUT STD_LOGIC;
    s_axi_config_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_RVALID : OUT STD_LOGIC;
    s_axi_config_RREADY : IN STD_LOGIC;
    s_axi_config_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_config_BVALID : OUT STD_LOGIC;
    s_axi_config_BREADY : IN STD_LOGIC;
    s_axi_config_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of eventStreamSwitch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eventStreamSwitch,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.747000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=806,HLS_SYN_LUT=870}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal xStreamIn0_V_V_0_vld_out : STD_LOGIC;
    signal tmp_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal yStreamIn0_V_V_0_vld_out : STD_LOGIC;
    signal polStreamIn0_V_V_0_vld_out : STD_LOGIC;
    signal tsStreamIn0_V_V_0_vld_out : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_vld_out : STD_LOGIC;
    signal xStreamIn1_V_V_0_vld_out : STD_LOGIC;
    signal yStreamIn1_V_V_0_vld_out : STD_LOGIC;
    signal polStreamIn1_V_V_0_vld_out : STD_LOGIC;
    signal tsStreamIn1_V_V_0_vld_out : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_vld_out : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal xStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal cornerStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal config_V : STD_LOGIC_VECTOR (31 downto 0);
    signal xStreamIn0_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn0_V_V_0_vld_in : STD_LOGIC;
    signal xStreamIn0_V_V_0_ack_in : STD_LOGIC;
    signal xStreamIn0_V_V_0_ack_out : STD_LOGIC;
    signal xStreamIn0_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn0_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn0_V_V_0_sel_rd : STD_LOGIC := '0';
    signal xStreamIn0_V_V_0_sel_wr : STD_LOGIC := '0';
    signal xStreamIn0_V_V_0_sel : STD_LOGIC;
    signal xStreamIn0_V_V_0_load_A : STD_LOGIC;
    signal xStreamIn0_V_V_0_load_B : STD_LOGIC;
    signal xStreamIn0_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamIn0_V_V_0_state_cmp_full : STD_LOGIC;
    signal yStreamIn0_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn0_V_V_0_vld_in : STD_LOGIC;
    signal yStreamIn0_V_V_0_ack_in : STD_LOGIC;
    signal yStreamIn0_V_V_0_ack_out : STD_LOGIC;
    signal yStreamIn0_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn0_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn0_V_V_0_sel_rd : STD_LOGIC := '0';
    signal yStreamIn0_V_V_0_sel_wr : STD_LOGIC := '0';
    signal yStreamIn0_V_V_0_sel : STD_LOGIC;
    signal yStreamIn0_V_V_0_load_A : STD_LOGIC;
    signal yStreamIn0_V_V_0_load_B : STD_LOGIC;
    signal yStreamIn0_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamIn0_V_V_0_state_cmp_full : STD_LOGIC;
    signal tsStreamIn0_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn0_V_V_0_vld_in : STD_LOGIC;
    signal tsStreamIn0_V_V_0_ack_in : STD_LOGIC;
    signal tsStreamIn0_V_V_0_ack_out : STD_LOGIC;
    signal tsStreamIn0_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn0_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn0_V_V_0_sel_rd : STD_LOGIC := '0';
    signal tsStreamIn0_V_V_0_sel_wr : STD_LOGIC := '0';
    signal tsStreamIn0_V_V_0_sel : STD_LOGIC;
    signal tsStreamIn0_V_V_0_load_A : STD_LOGIC;
    signal tsStreamIn0_V_V_0_load_B : STD_LOGIC;
    signal tsStreamIn0_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamIn0_V_V_0_state_cmp_full : STD_LOGIC;
    signal polStreamIn0_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn0_V_V_0_vld_in : STD_LOGIC;
    signal polStreamIn0_V_V_0_ack_in : STD_LOGIC;
    signal polStreamIn0_V_V_0_ack_out : STD_LOGIC;
    signal polStreamIn0_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn0_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn0_V_V_0_sel_rd : STD_LOGIC := '0';
    signal polStreamIn0_V_V_0_sel_wr : STD_LOGIC := '0';
    signal polStreamIn0_V_V_0_sel : STD_LOGIC;
    signal polStreamIn0_V_V_0_load_A : STD_LOGIC;
    signal polStreamIn0_V_V_0_load_B : STD_LOGIC;
    signal polStreamIn0_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamIn0_V_V_0_state_cmp_full : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamIn0_V_V_0_vld_in : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_ack_in : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_ack_out : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamIn0_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamIn0_V_V_0_sel_rd : STD_LOGIC := '0';
    signal cornerStreamIn0_V_V_0_sel_wr : STD_LOGIC := '0';
    signal cornerStreamIn0_V_V_0_sel : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_load_A : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_load_B : STD_LOGIC;
    signal cornerStreamIn0_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal cornerStreamIn0_V_V_0_state_cmp_full : STD_LOGIC;
    signal xStreamIn1_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn1_V_V_0_vld_in : STD_LOGIC;
    signal xStreamIn1_V_V_0_ack_in : STD_LOGIC;
    signal xStreamIn1_V_V_0_ack_out : STD_LOGIC;
    signal xStreamIn1_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn1_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamIn1_V_V_0_sel_rd : STD_LOGIC := '0';
    signal xStreamIn1_V_V_0_sel_wr : STD_LOGIC := '0';
    signal xStreamIn1_V_V_0_sel : STD_LOGIC;
    signal xStreamIn1_V_V_0_load_A : STD_LOGIC;
    signal xStreamIn1_V_V_0_load_B : STD_LOGIC;
    signal xStreamIn1_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamIn1_V_V_0_state_cmp_full : STD_LOGIC;
    signal yStreamIn1_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn1_V_V_0_vld_in : STD_LOGIC;
    signal yStreamIn1_V_V_0_ack_in : STD_LOGIC;
    signal yStreamIn1_V_V_0_ack_out : STD_LOGIC;
    signal yStreamIn1_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn1_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamIn1_V_V_0_sel_rd : STD_LOGIC := '0';
    signal yStreamIn1_V_V_0_sel_wr : STD_LOGIC := '0';
    signal yStreamIn1_V_V_0_sel : STD_LOGIC;
    signal yStreamIn1_V_V_0_load_A : STD_LOGIC;
    signal yStreamIn1_V_V_0_load_B : STD_LOGIC;
    signal yStreamIn1_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamIn1_V_V_0_state_cmp_full : STD_LOGIC;
    signal tsStreamIn1_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn1_V_V_0_vld_in : STD_LOGIC;
    signal tsStreamIn1_V_V_0_ack_in : STD_LOGIC;
    signal tsStreamIn1_V_V_0_ack_out : STD_LOGIC;
    signal tsStreamIn1_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn1_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamIn1_V_V_0_sel_rd : STD_LOGIC := '0';
    signal tsStreamIn1_V_V_0_sel_wr : STD_LOGIC := '0';
    signal tsStreamIn1_V_V_0_sel : STD_LOGIC;
    signal tsStreamIn1_V_V_0_load_A : STD_LOGIC;
    signal tsStreamIn1_V_V_0_load_B : STD_LOGIC;
    signal tsStreamIn1_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamIn1_V_V_0_state_cmp_full : STD_LOGIC;
    signal polStreamIn1_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn1_V_V_0_vld_in : STD_LOGIC;
    signal polStreamIn1_V_V_0_ack_in : STD_LOGIC;
    signal polStreamIn1_V_V_0_ack_out : STD_LOGIC;
    signal polStreamIn1_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn1_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamIn1_V_V_0_sel_rd : STD_LOGIC := '0';
    signal polStreamIn1_V_V_0_sel_wr : STD_LOGIC := '0';
    signal polStreamIn1_V_V_0_sel : STD_LOGIC;
    signal polStreamIn1_V_V_0_load_A : STD_LOGIC;
    signal polStreamIn1_V_V_0_load_B : STD_LOGIC;
    signal polStreamIn1_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamIn1_V_V_0_state_cmp_full : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamIn1_V_V_0_vld_in : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_ack_in : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_ack_out : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamIn1_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamIn1_V_V_0_sel_rd : STD_LOGIC := '0';
    signal cornerStreamIn1_V_V_0_sel_wr : STD_LOGIC := '0';
    signal cornerStreamIn1_V_V_0_sel : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_load_A : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_load_B : STD_LOGIC;
    signal cornerStreamIn1_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal cornerStreamIn1_V_V_0_state_cmp_full : STD_LOGIC;
    signal xStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel : STD_LOGIC;
    signal xStreamOut_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel : STD_LOGIC;
    signal yStreamOut_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal tsStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal polStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal polStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal polStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal polStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal polStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal polStreamOut_V_V_1_sel : STD_LOGIC;
    signal polStreamOut_V_V_1_load_A : STD_LOGIC;
    signal polStreamOut_V_V_1_load_B : STD_LOGIC;
    signal polStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal polStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal cornerStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal cornerStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal cornerStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal cornerStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal cornerStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal cornerStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal cornerStreamOut_V_V_1_sel : STD_LOGIC;
    signal cornerStreamOut_V_V_1_load_A : STD_LOGIC;
    signal cornerStreamOut_V_V_1_load_B : STD_LOGIC;
    signal cornerStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal cornerStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal xStreamIn0_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal yStreamIn0_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamIn0_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamIn0_V_V_TDATA_blk_n : STD_LOGIC;
    signal cornerStreamIn0_V_V_TDATA_blk_n : STD_LOGIC;
    signal xStreamIn1_V_V_TDATA_blk_n : STD_LOGIC;
    signal yStreamIn1_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamIn1_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamIn1_V_V_TDATA_blk_n : STD_LOGIC;
    signal cornerStreamIn1_V_V_TDATA_blk_n : STD_LOGIC;
    signal xStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal yStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal polStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal cornerStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_fu_245_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_3_cast_fu_273_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_4_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_tmp_V_2_phi_fu_190_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_V_2_reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_tmp_V_4_phi_fu_203_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal corner_V_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_V_4_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal corner_V_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_V_1_phi_fu_213_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_V_1_reg_209 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_V_phi_fu_227_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_V_reg_223 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_V_8_fu_249_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_12_fu_259_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pol0_V_fu_269_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_996 : BOOLEAN;

    component eventStreamSwitch_config_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        config_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    eventStreamSwitch_config_s_axi_U : component eventStreamSwitch_config_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONFIG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONFIG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_config_AWVALID,
        AWREADY => s_axi_config_AWREADY,
        AWADDR => s_axi_config_AWADDR,
        WVALID => s_axi_config_WVALID,
        WREADY => s_axi_config_WREADY,
        WDATA => s_axi_config_WDATA,
        WSTRB => s_axi_config_WSTRB,
        ARVALID => s_axi_config_ARVALID,
        ARREADY => s_axi_config_ARREADY,
        ARADDR => s_axi_config_ARADDR,
        RVALID => s_axi_config_RVALID,
        RREADY => s_axi_config_RREADY,
        RDATA => s_axi_config_RDATA,
        RRESP => s_axi_config_RRESP,
        BVALID => s_axi_config_BVALID,
        BREADY => s_axi_config_BREADY,
        BRESP => s_axi_config_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        config_V => config_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    cornerStreamIn0_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamIn0_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((cornerStreamIn0_V_V_0_vld_out = ap_const_logic_1) and (cornerStreamIn0_V_V_0_ack_out = ap_const_logic_1))) then 
                                        cornerStreamIn0_V_V_0_sel_rd <= not(cornerStreamIn0_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    cornerStreamIn0_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamIn0_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((cornerStreamIn0_V_V_0_ack_in = ap_const_logic_1) and (cornerStreamIn0_V_V_0_vld_in = ap_const_logic_1))) then 
                                        cornerStreamIn0_V_V_0_sel_wr <= not(cornerStreamIn0_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    cornerStreamIn0_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamIn0_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((cornerStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (cornerStreamIn0_V_V_0_state = ap_const_lv2_2)) or ((cornerStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (cornerStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (cornerStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    cornerStreamIn0_V_V_0_state <= ap_const_lv2_2;
                elsif ((((cornerStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (cornerStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((cornerStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (cornerStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (cornerStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    cornerStreamIn0_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((cornerStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (cornerStreamIn0_V_V_0_ack_out = ap_const_logic_1))) and not(((cornerStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (cornerStreamIn0_V_V_0_vld_in = ap_const_logic_1))) and (cornerStreamIn0_V_V_0_state = ap_const_lv2_3)) or ((cornerStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (cornerStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((cornerStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (cornerStreamIn0_V_V_0_state = ap_const_lv2_2)))) then 
                    cornerStreamIn0_V_V_0_state <= ap_const_lv2_3;
                else 
                    cornerStreamIn0_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    cornerStreamIn1_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamIn1_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((cornerStreamIn1_V_V_0_vld_out = ap_const_logic_1) and (cornerStreamIn1_V_V_0_ack_out = ap_const_logic_1))) then 
                                        cornerStreamIn1_V_V_0_sel_rd <= not(cornerStreamIn1_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    cornerStreamIn1_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamIn1_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((cornerStreamIn1_V_V_0_ack_in = ap_const_logic_1) and (cornerStreamIn1_V_V_0_vld_in = ap_const_logic_1))) then 
                                        cornerStreamIn1_V_V_0_sel_wr <= not(cornerStreamIn1_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    cornerStreamIn1_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamIn1_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((cornerStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (cornerStreamIn1_V_V_0_state = ap_const_lv2_2)) or ((cornerStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (cornerStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (cornerStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    cornerStreamIn1_V_V_0_state <= ap_const_lv2_2;
                elsif ((((cornerStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (cornerStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((cornerStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (cornerStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (cornerStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    cornerStreamIn1_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((cornerStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (cornerStreamIn1_V_V_0_ack_out = ap_const_logic_1))) and not(((cornerStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (cornerStreamIn1_V_V_0_vld_in = ap_const_logic_1))) and (cornerStreamIn1_V_V_0_state = ap_const_lv2_3)) or ((cornerStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (cornerStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((cornerStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (cornerStreamIn1_V_V_0_state = ap_const_lv2_2)))) then 
                    cornerStreamIn1_V_V_0_state <= ap_const_lv2_3;
                else 
                    cornerStreamIn1_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    cornerStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((cornerStreamOut_V_V_1_ack_out = ap_const_logic_1) and (cornerStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        cornerStreamOut_V_V_1_sel_rd <= not(cornerStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    cornerStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((cornerStreamOut_V_V_1_vld_in = ap_const_logic_1) and (cornerStreamOut_V_V_1_ack_in = ap_const_logic_1))) then 
                                        cornerStreamOut_V_V_1_sel_wr <= not(cornerStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    cornerStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cornerStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((cornerStreamOut_V_V_1_vld_in = ap_const_logic_0) and (cornerStreamOut_V_V_1_state = ap_const_lv2_2)) or ((cornerStreamOut_V_V_1_vld_in = ap_const_logic_0) and (cornerStreamOut_V_V_1_ack_out = ap_const_logic_1) and (cornerStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    cornerStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((cornerStreamOut_V_V_1_ack_out = ap_const_logic_0) and (cornerStreamOut_V_V_1_state = ap_const_lv2_1)) or ((cornerStreamOut_V_V_1_ack_out = ap_const_logic_0) and (cornerStreamOut_V_V_1_vld_in = ap_const_logic_1) and (cornerStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    cornerStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((cornerStreamOut_V_V_1_vld_in = ap_const_logic_0) and (cornerStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((cornerStreamOut_V_V_1_ack_out = ap_const_logic_0) and (cornerStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (cornerStreamOut_V_V_1_state = ap_const_lv2_3)) or ((cornerStreamOut_V_V_1_ack_out = ap_const_logic_1) and (cornerStreamOut_V_V_1_state = ap_const_lv2_1)) or ((cornerStreamOut_V_V_1_vld_in = ap_const_logic_1) and (cornerStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    cornerStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    cornerStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamIn0_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn0_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamIn0_V_V_0_vld_out = ap_const_logic_1) and (polStreamIn0_V_V_0_ack_out = ap_const_logic_1))) then 
                                        polStreamIn0_V_V_0_sel_rd <= not(polStreamIn0_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn0_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn0_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamIn0_V_V_0_ack_in = ap_const_logic_1) and (polStreamIn0_V_V_0_vld_in = ap_const_logic_1))) then 
                                        polStreamIn0_V_V_0_sel_wr <= not(polStreamIn0_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn0_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn0_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((polStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn0_V_V_0_state = ap_const_lv2_2)) or ((polStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn0_V_V_0_state <= ap_const_lv2_2;
                elsif ((((polStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn0_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((polStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn0_V_V_0_ack_out = ap_const_logic_1))) and not(((polStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn0_V_V_0_vld_in = ap_const_logic_1))) and (polStreamIn0_V_V_0_state = ap_const_lv2_3)) or ((polStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn0_V_V_0_state = ap_const_lv2_2)))) then 
                    polStreamIn0_V_V_0_state <= ap_const_lv2_3;
                else 
                    polStreamIn0_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamIn1_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn1_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamIn1_V_V_0_vld_out = ap_const_logic_1) and (polStreamIn1_V_V_0_ack_out = ap_const_logic_1))) then 
                                        polStreamIn1_V_V_0_sel_rd <= not(polStreamIn1_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn1_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn1_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamIn1_V_V_0_ack_in = ap_const_logic_1) and (polStreamIn1_V_V_0_vld_in = ap_const_logic_1))) then 
                                        polStreamIn1_V_V_0_sel_wr <= not(polStreamIn1_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamIn1_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamIn1_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((polStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn1_V_V_0_state = ap_const_lv2_2)) or ((polStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn1_V_V_0_state <= ap_const_lv2_2;
                elsif ((((polStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    polStreamIn1_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((polStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (polStreamIn1_V_V_0_ack_out = ap_const_logic_1))) and not(((polStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (polStreamIn1_V_V_0_vld_in = ap_const_logic_1))) and (polStreamIn1_V_V_0_state = ap_const_lv2_3)) or ((polStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (polStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((polStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (polStreamIn1_V_V_0_state = ap_const_lv2_2)))) then 
                    polStreamIn1_V_V_0_state <= ap_const_lv2_3;
                else 
                    polStreamIn1_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_rd <= not(polStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((polStreamOut_V_V_1_vld_in = ap_const_logic_1) and (polStreamOut_V_V_1_ack_in = ap_const_logic_1))) then 
                                        polStreamOut_V_V_1_sel_wr <= not(polStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    polStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                polStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_state = ap_const_lv2_2)) or ((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_state = ap_const_lv2_1)) or ((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((polStreamOut_V_V_1_vld_in = ap_const_logic_0) and (polStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((polStreamOut_V_V_1_ack_out = ap_const_logic_0) and (polStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (polStreamOut_V_V_1_state = ap_const_lv2_3)) or ((polStreamOut_V_V_1_ack_out = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_1)) or ((polStreamOut_V_V_1_vld_in = ap_const_logic_1) and (polStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    polStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    polStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn0_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn0_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamIn0_V_V_0_vld_out = ap_const_logic_1) and (tsStreamIn0_V_V_0_ack_out = ap_const_logic_1))) then 
                                        tsStreamIn0_V_V_0_sel_rd <= not(tsStreamIn0_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn0_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn0_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamIn0_V_V_0_ack_in = ap_const_logic_1) and (tsStreamIn0_V_V_0_vld_in = ap_const_logic_1))) then 
                                        tsStreamIn0_V_V_0_sel_wr <= not(tsStreamIn0_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn0_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn0_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((tsStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn0_V_V_0_state = ap_const_lv2_2)) or ((tsStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn0_V_V_0_state <= ap_const_lv2_2;
                elsif ((((tsStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn0_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn0_V_V_0_ack_out = ap_const_logic_1))) and not(((tsStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn0_V_V_0_vld_in = ap_const_logic_1))) and (tsStreamIn0_V_V_0_state = ap_const_lv2_3)) or ((tsStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn0_V_V_0_state = ap_const_lv2_2)))) then 
                    tsStreamIn0_V_V_0_state <= ap_const_lv2_3;
                else 
                    tsStreamIn0_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn1_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn1_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamIn1_V_V_0_vld_out = ap_const_logic_1) and (tsStreamIn1_V_V_0_ack_out = ap_const_logic_1))) then 
                                        tsStreamIn1_V_V_0_sel_rd <= not(tsStreamIn1_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn1_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn1_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamIn1_V_V_0_ack_in = ap_const_logic_1) and (tsStreamIn1_V_V_0_vld_in = ap_const_logic_1))) then 
                                        tsStreamIn1_V_V_0_sel_wr <= not(tsStreamIn1_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamIn1_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamIn1_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((tsStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn1_V_V_0_state = ap_const_lv2_2)) or ((tsStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn1_V_V_0_state <= ap_const_lv2_2;
                elsif ((((tsStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    tsStreamIn1_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (tsStreamIn1_V_V_0_ack_out = ap_const_logic_1))) and not(((tsStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (tsStreamIn1_V_V_0_vld_in = ap_const_logic_1))) and (tsStreamIn1_V_V_0_state = ap_const_lv2_3)) or ((tsStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (tsStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((tsStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (tsStreamIn1_V_V_0_state = ap_const_lv2_2)))) then 
                    tsStreamIn1_V_V_0_state <= ap_const_lv2_3;
                else 
                    tsStreamIn1_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_rd <= not(tsStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut_V_V_1_ack_in = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_wr <= not(tsStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_state = ap_const_lv2_2)) or ((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamIn0_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn0_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamIn0_V_V_0_vld_out = ap_const_logic_1) and (xStreamIn0_V_V_0_ack_out = ap_const_logic_1))) then 
                                        xStreamIn0_V_V_0_sel_rd <= not(xStreamIn0_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn0_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn0_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamIn0_V_V_0_ack_in = ap_const_logic_1) and (xStreamIn0_V_V_0_vld_in = ap_const_logic_1))) then 
                                        xStreamIn0_V_V_0_sel_wr <= not(xStreamIn0_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn0_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn0_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((xStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn0_V_V_0_state = ap_const_lv2_2)) or ((xStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn0_V_V_0_state <= ap_const_lv2_2;
                elsif ((((xStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn0_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((xStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn0_V_V_0_ack_out = ap_const_logic_1))) and not(((xStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn0_V_V_0_vld_in = ap_const_logic_1))) and (xStreamIn0_V_V_0_state = ap_const_lv2_3)) or ((xStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn0_V_V_0_state = ap_const_lv2_2)))) then 
                    xStreamIn0_V_V_0_state <= ap_const_lv2_3;
                else 
                    xStreamIn0_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamIn1_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn1_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamIn1_V_V_0_vld_out = ap_const_logic_1) and (xStreamIn1_V_V_0_ack_out = ap_const_logic_1))) then 
                                        xStreamIn1_V_V_0_sel_rd <= not(xStreamIn1_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn1_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn1_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamIn1_V_V_0_ack_in = ap_const_logic_1) and (xStreamIn1_V_V_0_vld_in = ap_const_logic_1))) then 
                                        xStreamIn1_V_V_0_sel_wr <= not(xStreamIn1_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamIn1_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamIn1_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((xStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn1_V_V_0_state = ap_const_lv2_2)) or ((xStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn1_V_V_0_state <= ap_const_lv2_2;
                elsif ((((xStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    xStreamIn1_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((xStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (xStreamIn1_V_V_0_ack_out = ap_const_logic_1))) and not(((xStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (xStreamIn1_V_V_0_vld_in = ap_const_logic_1))) and (xStreamIn1_V_V_0_state = ap_const_lv2_3)) or ((xStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (xStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((xStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (xStreamIn1_V_V_0_state = ap_const_lv2_2)))) then 
                    xStreamIn1_V_V_0_state <= ap_const_lv2_3;
                else 
                    xStreamIn1_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_rd <= not(xStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_in = ap_const_logic_1) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_wr <= not(xStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_state = ap_const_lv2_2)) or ((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (xStreamOut_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut_V_V_1_vld_in = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamIn0_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn0_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamIn0_V_V_0_vld_out = ap_const_logic_1) and (yStreamIn0_V_V_0_ack_out = ap_const_logic_1))) then 
                                        yStreamIn0_V_V_0_sel_rd <= not(yStreamIn0_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn0_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn0_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamIn0_V_V_0_ack_in = ap_const_logic_1) and (yStreamIn0_V_V_0_vld_in = ap_const_logic_1))) then 
                                        yStreamIn0_V_V_0_sel_wr <= not(yStreamIn0_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn0_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn0_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((yStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn0_V_V_0_state = ap_const_lv2_2)) or ((yStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn0_V_V_0_state <= ap_const_lv2_2;
                elsif ((((yStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn0_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn0_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((yStreamIn0_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn0_V_V_0_ack_out = ap_const_logic_1))) and not(((yStreamIn0_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn0_V_V_0_vld_in = ap_const_logic_1))) and (yStreamIn0_V_V_0_state = ap_const_lv2_3)) or ((yStreamIn0_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn0_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn0_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn0_V_V_0_state = ap_const_lv2_2)))) then 
                    yStreamIn0_V_V_0_state <= ap_const_lv2_3;
                else 
                    yStreamIn0_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamIn1_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn1_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamIn1_V_V_0_vld_out = ap_const_logic_1) and (yStreamIn1_V_V_0_ack_out = ap_const_logic_1))) then 
                                        yStreamIn1_V_V_0_sel_rd <= not(yStreamIn1_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn1_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn1_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamIn1_V_V_0_ack_in = ap_const_logic_1) and (yStreamIn1_V_V_0_vld_in = ap_const_logic_1))) then 
                                        yStreamIn1_V_V_0_sel_wr <= not(yStreamIn1_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamIn1_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamIn1_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((yStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn1_V_V_0_state = ap_const_lv2_2)) or ((yStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn1_V_V_0_state <= ap_const_lv2_2;
                elsif ((((yStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn1_V_V_0_state = ap_const_lv2_3)))) then 
                    yStreamIn1_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((yStreamIn1_V_V_0_vld_in = ap_const_logic_0) and (yStreamIn1_V_V_0_ack_out = ap_const_logic_1))) and not(((yStreamIn1_V_V_0_ack_out = ap_const_logic_0) and (yStreamIn1_V_V_0_vld_in = ap_const_logic_1))) and (yStreamIn1_V_V_0_state = ap_const_lv2_3)) or ((yStreamIn1_V_V_0_ack_out = ap_const_logic_1) and (yStreamIn1_V_V_0_state = ap_const_lv2_1)) or ((yStreamIn1_V_V_0_vld_in = ap_const_logic_1) and (yStreamIn1_V_V_0_state = ap_const_lv2_2)))) then 
                    yStreamIn1_V_V_0_state <= ap_const_lv2_3;
                else 
                    yStreamIn1_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_rd <= not(yStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_in = ap_const_logic_1) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_wr <= not(yStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_state = ap_const_lv2_2)) or ((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut_V_V_1_vld_in = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((cornerStreamIn0_V_V_0_load_A = ap_const_logic_1)) then
                cornerStreamIn0_V_V_0_payload_A <= cornerStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((cornerStreamIn0_V_V_0_load_B = ap_const_logic_1)) then
                cornerStreamIn0_V_V_0_payload_B <= cornerStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((cornerStreamIn1_V_V_0_load_A = ap_const_logic_1)) then
                cornerStreamIn1_V_V_0_payload_A <= cornerStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((cornerStreamIn1_V_V_0_load_B = ap_const_logic_1)) then
                cornerStreamIn1_V_V_0_payload_B <= cornerStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((cornerStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                cornerStreamOut_V_V_1_payload_A <= tmp_V_4_cast_fu_278_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((cornerStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                cornerStreamOut_V_V_1_payload_B <= tmp_V_4_cast_fu_278_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn0_V_V_0_load_A = ap_const_logic_1)) then
                polStreamIn0_V_V_0_payload_A <= polStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn0_V_V_0_load_B = ap_const_logic_1)) then
                polStreamIn0_V_V_0_payload_B <= polStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn1_V_V_0_load_A = ap_const_logic_1)) then
                polStreamIn1_V_V_0_payload_A <= polStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamIn1_V_V_0_load_B = ap_const_logic_1)) then
                polStreamIn1_V_V_0_payload_B <= polStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_A <= tmp_V_3_cast_fu_273_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((polStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                polStreamOut_V_V_1_payload_B <= tmp_V_3_cast_fu_273_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_245_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_292 <= config_V(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_245_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_4_reg_287 <= config_V(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_283 <= tmp_fu_245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn0_V_V_0_load_A = ap_const_logic_1)) then
                tsStreamIn0_V_V_0_payload_A <= tsStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn0_V_V_0_load_B = ap_const_logic_1)) then
                tsStreamIn0_V_V_0_payload_B <= tsStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn1_V_V_0_load_A = ap_const_logic_1)) then
                tsStreamIn1_V_V_0_payload_A <= tsStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamIn1_V_V_0_load_B = ap_const_logic_1)) then
                tsStreamIn1_V_V_0_payload_B <= tsStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_A <= ap_phi_mux_tmp_V_2_phi_fu_190_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_B <= ap_phi_mux_tmp_V_2_phi_fu_190_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn0_V_V_0_load_A = ap_const_logic_1)) then
                xStreamIn0_V_V_0_payload_A <= xStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn0_V_V_0_load_B = ap_const_logic_1)) then
                xStreamIn0_V_V_0_payload_B <= xStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn1_V_V_0_load_A = ap_const_logic_1)) then
                xStreamIn1_V_V_0_payload_A <= xStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamIn1_V_V_0_load_B = ap_const_logic_1)) then
                xStreamIn1_V_V_0_payload_B <= xStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_A <= ap_phi_mux_tmp_V_phi_fu_227_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_B <= ap_phi_mux_tmp_V_phi_fu_227_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn0_V_V_0_load_A = ap_const_logic_1)) then
                yStreamIn0_V_V_0_payload_A <= yStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn0_V_V_0_load_B = ap_const_logic_1)) then
                yStreamIn0_V_V_0_payload_B <= yStreamIn0_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn1_V_V_0_load_A = ap_const_logic_1)) then
                yStreamIn1_V_V_0_payload_A <= yStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamIn1_V_V_0_load_B = ap_const_logic_1)) then
                yStreamIn1_V_V_0_payload_B <= yStreamIn1_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_A <= ap_phi_mux_tmp_V_1_phi_fu_213_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_B <= ap_phi_mux_tmp_V_1_phi_fu_213_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, xStreamIn0_V_V_0_vld_out, tmp_reg_283, yStreamIn0_V_V_0_vld_out, polStreamIn0_V_V_0_vld_out, tsStreamIn0_V_V_0_vld_out, cornerStreamIn0_V_V_0_vld_out, xStreamIn1_V_V_0_vld_out, yStreamIn1_V_V_0_vld_out, polStreamIn1_V_V_0_vld_out, tsStreamIn1_V_V_0_vld_out, cornerStreamIn1_V_V_0_vld_out, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, cornerStreamOut_V_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_reg_283 = ap_const_lv1_1) and (cornerStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (tsStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (polStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (yStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (xStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (cornerStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (tsStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (polStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (yStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (xStreamIn0_V_V_0_vld_out = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (cornerStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, xStreamIn0_V_V_0_vld_out, tmp_reg_283, yStreamIn0_V_V_0_vld_out, polStreamIn0_V_V_0_vld_out, tsStreamIn0_V_V_0_vld_out, cornerStreamIn0_V_V_0_vld_out, xStreamIn1_V_V_0_vld_out, yStreamIn1_V_V_0_vld_out, polStreamIn1_V_V_0_vld_out, tsStreamIn1_V_V_0_vld_out, cornerStreamIn1_V_V_0_vld_out, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, cornerStreamOut_V_V_1_ack_in, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (cornerStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_reg_283 = ap_const_lv1_1) and (cornerStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (tsStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (polStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (yStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (xStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (cornerStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (tsStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (polStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (yStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (xStreamIn0_V_V_0_vld_out = ap_const_logic_0)))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, xStreamIn0_V_V_0_vld_out, tmp_reg_283, yStreamIn0_V_V_0_vld_out, polStreamIn0_V_V_0_vld_out, tsStreamIn0_V_V_0_vld_out, cornerStreamIn0_V_V_0_vld_out, xStreamIn1_V_V_0_vld_out, yStreamIn1_V_V_0_vld_out, polStreamIn1_V_V_0_vld_out, tsStreamIn1_V_V_0_vld_out, cornerStreamIn1_V_V_0_vld_out, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, cornerStreamOut_V_V_1_ack_in, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (cornerStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_reg_283 = ap_const_lv1_1) and (cornerStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (tsStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (polStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (yStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (xStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (cornerStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (tsStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (polStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (yStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (xStreamIn0_V_V_0_vld_out = ap_const_logic_0)))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, cornerStreamOut_V_V_1_ack_in)
    begin
                ap_block_state2_io <= ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (cornerStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(xStreamIn0_V_V_0_vld_out, tmp_reg_283, yStreamIn0_V_V_0_vld_out, polStreamIn0_V_V_0_vld_out, tsStreamIn0_V_V_0_vld_out, cornerStreamIn0_V_V_0_vld_out, xStreamIn1_V_V_0_vld_out, yStreamIn1_V_V_0_vld_out, polStreamIn1_V_V_0_vld_out, tsStreamIn1_V_V_0_vld_out, cornerStreamIn1_V_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((tmp_reg_283 = ap_const_lv1_1) and (cornerStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (tsStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (polStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (yStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_1) and (xStreamIn1_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (cornerStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (tsStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (polStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (yStreamIn0_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_reg_283 = ap_const_lv1_0) and (xStreamIn0_V_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, cornerStreamOut_V_V_1_ack_in)
    begin
                ap_block_state3_io <= ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (cornerStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, polStreamOut_V_V_1_ack_in, cornerStreamOut_V_V_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (cornerStreamOut_V_V_1_ack_in = ap_const_logic_0) or (polStreamOut_V_V_1_ack_in = ap_const_logic_0) or (tsStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_996_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_996 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_V_1_phi_fu_213_p4_assign_proc : process(tmp_reg_283, yStreamIn0_V_V_0_data_out, yStreamIn1_V_V_0_data_out, ap_phi_reg_pp0_iter1_tmp_V_1_reg_209, ap_condition_996)
    begin
        if ((ap_const_boolean_1 = ap_condition_996)) then
            if ((tmp_reg_283 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_V_1_phi_fu_213_p4 <= yStreamIn1_V_V_0_data_out;
            elsif ((tmp_reg_283 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_V_1_phi_fu_213_p4 <= yStreamIn0_V_V_0_data_out;
            else 
                ap_phi_mux_tmp_V_1_phi_fu_213_p4 <= ap_phi_reg_pp0_iter1_tmp_V_1_reg_209;
            end if;
        else 
            ap_phi_mux_tmp_V_1_phi_fu_213_p4 <= ap_phi_reg_pp0_iter1_tmp_V_1_reg_209;
        end if; 
    end process;


    ap_phi_mux_tmp_V_25_in_phi_fu_178_p4_assign_proc : process(tmp_reg_283, polStreamIn0_V_V_0_data_out, polStreamIn1_V_V_0_data_out, ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175, ap_condition_996)
    begin
        if ((ap_const_boolean_1 = ap_condition_996)) then
            if ((tmp_reg_283 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 <= polStreamIn1_V_V_0_data_out;
            elsif ((tmp_reg_283 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 <= polStreamIn0_V_V_0_data_out;
            else 
                ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 <= ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175;
            end if;
        else 
            ap_phi_mux_tmp_V_25_in_phi_fu_178_p4 <= ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175;
        end if; 
    end process;


    ap_phi_mux_tmp_V_2_phi_fu_190_p4_assign_proc : process(tmp_reg_283, tsStreamIn0_V_V_0_data_out, tsStreamIn1_V_V_0_data_out, ap_phi_reg_pp0_iter1_tmp_V_2_reg_186, ap_condition_996)
    begin
        if ((ap_const_boolean_1 = ap_condition_996)) then
            if ((tmp_reg_283 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_V_2_phi_fu_190_p4 <= tsStreamIn1_V_V_0_data_out;
            elsif ((tmp_reg_283 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_V_2_phi_fu_190_p4 <= tsStreamIn0_V_V_0_data_out;
            else 
                ap_phi_mux_tmp_V_2_phi_fu_190_p4 <= ap_phi_reg_pp0_iter1_tmp_V_2_reg_186;
            end if;
        else 
            ap_phi_mux_tmp_V_2_phi_fu_190_p4 <= ap_phi_reg_pp0_iter1_tmp_V_2_reg_186;
        end if; 
    end process;


    ap_phi_mux_tmp_V_4_phi_fu_203_p4_assign_proc : process(tmp_reg_283, corner_V_fu_253_p2, ap_phi_reg_pp0_iter1_tmp_V_4_reg_200, corner_V_1_fu_263_p2, ap_condition_996)
    begin
        if ((ap_const_boolean_1 = ap_condition_996)) then
            if ((tmp_reg_283 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_V_4_phi_fu_203_p4 <= corner_V_1_fu_263_p2;
            elsif ((tmp_reg_283 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_V_4_phi_fu_203_p4 <= corner_V_fu_253_p2;
            else 
                ap_phi_mux_tmp_V_4_phi_fu_203_p4 <= ap_phi_reg_pp0_iter1_tmp_V_4_reg_200;
            end if;
        else 
            ap_phi_mux_tmp_V_4_phi_fu_203_p4 <= ap_phi_reg_pp0_iter1_tmp_V_4_reg_200;
        end if; 
    end process;


    ap_phi_mux_tmp_V_phi_fu_227_p4_assign_proc : process(tmp_reg_283, xStreamIn0_V_V_0_data_out, xStreamIn1_V_V_0_data_out, ap_phi_reg_pp0_iter1_tmp_V_reg_223, ap_condition_996)
    begin
        if ((ap_const_boolean_1 = ap_condition_996)) then
            if ((tmp_reg_283 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_V_phi_fu_227_p4 <= xStreamIn1_V_V_0_data_out;
            elsif ((tmp_reg_283 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_V_phi_fu_227_p4 <= xStreamIn0_V_V_0_data_out;
            else 
                ap_phi_mux_tmp_V_phi_fu_227_p4 <= ap_phi_reg_pp0_iter1_tmp_V_reg_223;
            end if;
        else 
            ap_phi_mux_tmp_V_phi_fu_227_p4 <= ap_phi_reg_pp0_iter1_tmp_V_reg_223;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_tmp_V_1_reg_209 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_tmp_V_25_in_reg_175 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter1_tmp_V_2_reg_186 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_tmp_V_4_reg_200 <= "X";
    ap_phi_reg_pp0_iter1_tmp_V_reg_223 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cornerStreamIn0_V_V_0_ack_in <= cornerStreamIn0_V_V_0_state(1);

    cornerStreamIn0_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cornerStreamIn0_V_V_0_ack_out <= ap_const_logic_1;
        else 
            cornerStreamIn0_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    cornerStreamIn0_V_V_0_data_out_assign_proc : process(cornerStreamIn0_V_V_0_payload_A, cornerStreamIn0_V_V_0_payload_B, cornerStreamIn0_V_V_0_sel)
    begin
        if ((cornerStreamIn0_V_V_0_sel = ap_const_logic_1)) then 
            cornerStreamIn0_V_V_0_data_out <= cornerStreamIn0_V_V_0_payload_B;
        else 
            cornerStreamIn0_V_V_0_data_out <= cornerStreamIn0_V_V_0_payload_A;
        end if; 
    end process;

    cornerStreamIn0_V_V_0_load_A <= (not(cornerStreamIn0_V_V_0_sel_wr) and cornerStreamIn0_V_V_0_state_cmp_full);
    cornerStreamIn0_V_V_0_load_B <= (cornerStreamIn0_V_V_0_state_cmp_full and cornerStreamIn0_V_V_0_sel_wr);
    cornerStreamIn0_V_V_0_sel <= cornerStreamIn0_V_V_0_sel_rd;
    cornerStreamIn0_V_V_0_state_cmp_full <= '0' when (cornerStreamIn0_V_V_0_state = ap_const_lv2_1) else '1';
    cornerStreamIn0_V_V_0_vld_in <= cornerStreamIn0_V_V_TVALID;
    cornerStreamIn0_V_V_0_vld_out <= cornerStreamIn0_V_V_0_state(0);

    cornerStreamIn0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, cornerStreamIn0_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cornerStreamIn0_V_V_TDATA_blk_n <= cornerStreamIn0_V_V_0_state(0);
        else 
            cornerStreamIn0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cornerStreamIn0_V_V_TREADY <= cornerStreamIn0_V_V_0_state(1);
    cornerStreamIn1_V_V_0_ack_in <= cornerStreamIn1_V_V_0_state(1);

    cornerStreamIn1_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cornerStreamIn1_V_V_0_ack_out <= ap_const_logic_1;
        else 
            cornerStreamIn1_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    cornerStreamIn1_V_V_0_data_out_assign_proc : process(cornerStreamIn1_V_V_0_payload_A, cornerStreamIn1_V_V_0_payload_B, cornerStreamIn1_V_V_0_sel)
    begin
        if ((cornerStreamIn1_V_V_0_sel = ap_const_logic_1)) then 
            cornerStreamIn1_V_V_0_data_out <= cornerStreamIn1_V_V_0_payload_B;
        else 
            cornerStreamIn1_V_V_0_data_out <= cornerStreamIn1_V_V_0_payload_A;
        end if; 
    end process;

    cornerStreamIn1_V_V_0_load_A <= (not(cornerStreamIn1_V_V_0_sel_wr) and cornerStreamIn1_V_V_0_state_cmp_full);
    cornerStreamIn1_V_V_0_load_B <= (cornerStreamIn1_V_V_0_state_cmp_full and cornerStreamIn1_V_V_0_sel_wr);
    cornerStreamIn1_V_V_0_sel <= cornerStreamIn1_V_V_0_sel_rd;
    cornerStreamIn1_V_V_0_state_cmp_full <= '0' when (cornerStreamIn1_V_V_0_state = ap_const_lv2_1) else '1';
    cornerStreamIn1_V_V_0_vld_in <= cornerStreamIn1_V_V_TVALID;
    cornerStreamIn1_V_V_0_vld_out <= cornerStreamIn1_V_V_0_state(0);

    cornerStreamIn1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, cornerStreamIn1_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cornerStreamIn1_V_V_TDATA_blk_n <= cornerStreamIn1_V_V_0_state(0);
        else 
            cornerStreamIn1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cornerStreamIn1_V_V_TREADY <= cornerStreamIn1_V_V_0_state(1);
    cornerStreamOut_V_V_1_ack_in <= cornerStreamOut_V_V_1_state(1);
    cornerStreamOut_V_V_1_ack_out <= cornerStreamOut_V_V_TREADY;

    cornerStreamOut_V_V_1_data_out_assign_proc : process(cornerStreamOut_V_V_1_payload_A, cornerStreamOut_V_V_1_payload_B, cornerStreamOut_V_V_1_sel)
    begin
        if ((cornerStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            cornerStreamOut_V_V_1_data_out <= cornerStreamOut_V_V_1_payload_B;
        else 
            cornerStreamOut_V_V_1_data_out <= cornerStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    cornerStreamOut_V_V_1_load_A <= (not(cornerStreamOut_V_V_1_sel_wr) and cornerStreamOut_V_V_1_state_cmp_full);
    cornerStreamOut_V_V_1_load_B <= (cornerStreamOut_V_V_1_state_cmp_full and cornerStreamOut_V_V_1_sel_wr);
    cornerStreamOut_V_V_1_sel <= cornerStreamOut_V_V_1_sel_rd;
    cornerStreamOut_V_V_1_state_cmp_full <= '0' when (cornerStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    cornerStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cornerStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            cornerStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    cornerStreamOut_V_V_1_vld_out <= cornerStreamOut_V_V_1_state(0);
    cornerStreamOut_V_V_TDATA <= cornerStreamOut_V_V_1_data_out;

    cornerStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, cornerStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            cornerStreamOut_V_V_TDATA_blk_n <= cornerStreamOut_V_V_1_state(1);
        else 
            cornerStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cornerStreamOut_V_V_TVALID <= cornerStreamOut_V_V_1_state(0);
    corner_V_1_fu_263_p2 <= (tmp_V_12_fu_259_p1 or tmp_2_reg_292);
    corner_V_fu_253_p2 <= (tmp_V_8_fu_249_p1 or tmp_4_reg_287);
    pol0_V_fu_269_p1 <= ap_phi_mux_tmp_V_25_in_phi_fu_178_p4(1 - 1 downto 0);
    polStreamIn0_V_V_0_ack_in <= polStreamIn0_V_V_0_state(1);

    polStreamIn0_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            polStreamIn0_V_V_0_ack_out <= ap_const_logic_1;
        else 
            polStreamIn0_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    polStreamIn0_V_V_0_data_out_assign_proc : process(polStreamIn0_V_V_0_payload_A, polStreamIn0_V_V_0_payload_B, polStreamIn0_V_V_0_sel)
    begin
        if ((polStreamIn0_V_V_0_sel = ap_const_logic_1)) then 
            polStreamIn0_V_V_0_data_out <= polStreamIn0_V_V_0_payload_B;
        else 
            polStreamIn0_V_V_0_data_out <= polStreamIn0_V_V_0_payload_A;
        end if; 
    end process;

    polStreamIn0_V_V_0_load_A <= (polStreamIn0_V_V_0_state_cmp_full and not(polStreamIn0_V_V_0_sel_wr));
    polStreamIn0_V_V_0_load_B <= (polStreamIn0_V_V_0_state_cmp_full and polStreamIn0_V_V_0_sel_wr);
    polStreamIn0_V_V_0_sel <= polStreamIn0_V_V_0_sel_rd;
    polStreamIn0_V_V_0_state_cmp_full <= '0' when (polStreamIn0_V_V_0_state = ap_const_lv2_1) else '1';
    polStreamIn0_V_V_0_vld_in <= polStreamIn0_V_V_TVALID;
    polStreamIn0_V_V_0_vld_out <= polStreamIn0_V_V_0_state(0);

    polStreamIn0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, polStreamIn0_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamIn0_V_V_TDATA_blk_n <= polStreamIn0_V_V_0_state(0);
        else 
            polStreamIn0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamIn0_V_V_TREADY <= polStreamIn0_V_V_0_state(1);
    polStreamIn1_V_V_0_ack_in <= polStreamIn1_V_V_0_state(1);

    polStreamIn1_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            polStreamIn1_V_V_0_ack_out <= ap_const_logic_1;
        else 
            polStreamIn1_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    polStreamIn1_V_V_0_data_out_assign_proc : process(polStreamIn1_V_V_0_payload_A, polStreamIn1_V_V_0_payload_B, polStreamIn1_V_V_0_sel)
    begin
        if ((polStreamIn1_V_V_0_sel = ap_const_logic_1)) then 
            polStreamIn1_V_V_0_data_out <= polStreamIn1_V_V_0_payload_B;
        else 
            polStreamIn1_V_V_0_data_out <= polStreamIn1_V_V_0_payload_A;
        end if; 
    end process;

    polStreamIn1_V_V_0_load_A <= (polStreamIn1_V_V_0_state_cmp_full and not(polStreamIn1_V_V_0_sel_wr));
    polStreamIn1_V_V_0_load_B <= (polStreamIn1_V_V_0_state_cmp_full and polStreamIn1_V_V_0_sel_wr);
    polStreamIn1_V_V_0_sel <= polStreamIn1_V_V_0_sel_rd;
    polStreamIn1_V_V_0_state_cmp_full <= '0' when (polStreamIn1_V_V_0_state = ap_const_lv2_1) else '1';
    polStreamIn1_V_V_0_vld_in <= polStreamIn1_V_V_TVALID;
    polStreamIn1_V_V_0_vld_out <= polStreamIn1_V_V_0_state(0);

    polStreamIn1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, polStreamIn1_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            polStreamIn1_V_V_TDATA_blk_n <= polStreamIn1_V_V_0_state(0);
        else 
            polStreamIn1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamIn1_V_V_TREADY <= polStreamIn1_V_V_0_state(1);
    polStreamOut_V_V_1_ack_in <= polStreamOut_V_V_1_state(1);
    polStreamOut_V_V_1_ack_out <= polStreamOut_V_V_TREADY;

    polStreamOut_V_V_1_data_out_assign_proc : process(polStreamOut_V_V_1_payload_A, polStreamOut_V_V_1_payload_B, polStreamOut_V_V_1_sel)
    begin
        if ((polStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_B;
        else 
            polStreamOut_V_V_1_data_out <= polStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    polStreamOut_V_V_1_load_A <= (polStreamOut_V_V_1_state_cmp_full and not(polStreamOut_V_V_1_sel_wr));
    polStreamOut_V_V_1_load_B <= (polStreamOut_V_V_1_state_cmp_full and polStreamOut_V_V_1_sel_wr);
    polStreamOut_V_V_1_sel <= polStreamOut_V_V_1_sel_rd;
    polStreamOut_V_V_1_state_cmp_full <= '0' when (polStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    polStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            polStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    polStreamOut_V_V_1_vld_out <= polStreamOut_V_V_1_state(0);
    polStreamOut_V_V_TDATA <= polStreamOut_V_V_1_data_out;

    polStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, polStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            polStreamOut_V_V_TDATA_blk_n <= polStreamOut_V_V_1_state(1);
        else 
            polStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    polStreamOut_V_V_TVALID <= polStreamOut_V_V_1_state(0);
    tmp_V_12_fu_259_p1 <= cornerStreamIn1_V_V_0_data_out(1 - 1 downto 0);
    tmp_V_3_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pol0_V_fu_269_p1),8));
    tmp_V_4_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_tmp_V_4_phi_fu_203_p4),8));
    tmp_V_8_fu_249_p1 <= cornerStreamIn0_V_V_0_data_out(1 - 1 downto 0);
    tmp_fu_245_p1 <= config_V(1 - 1 downto 0);
    tsStreamIn0_V_V_0_ack_in <= tsStreamIn0_V_V_0_state(1);

    tsStreamIn0_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tsStreamIn0_V_V_0_ack_out <= ap_const_logic_1;
        else 
            tsStreamIn0_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tsStreamIn0_V_V_0_data_out_assign_proc : process(tsStreamIn0_V_V_0_payload_A, tsStreamIn0_V_V_0_payload_B, tsStreamIn0_V_V_0_sel)
    begin
        if ((tsStreamIn0_V_V_0_sel = ap_const_logic_1)) then 
            tsStreamIn0_V_V_0_data_out <= tsStreamIn0_V_V_0_payload_B;
        else 
            tsStreamIn0_V_V_0_data_out <= tsStreamIn0_V_V_0_payload_A;
        end if; 
    end process;

    tsStreamIn0_V_V_0_load_A <= (tsStreamIn0_V_V_0_state_cmp_full and not(tsStreamIn0_V_V_0_sel_wr));
    tsStreamIn0_V_V_0_load_B <= (tsStreamIn0_V_V_0_state_cmp_full and tsStreamIn0_V_V_0_sel_wr);
    tsStreamIn0_V_V_0_sel <= tsStreamIn0_V_V_0_sel_rd;
    tsStreamIn0_V_V_0_state_cmp_full <= '0' when (tsStreamIn0_V_V_0_state = ap_const_lv2_1) else '1';
    tsStreamIn0_V_V_0_vld_in <= tsStreamIn0_V_V_TVALID;
    tsStreamIn0_V_V_0_vld_out <= tsStreamIn0_V_V_0_state(0);

    tsStreamIn0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, tsStreamIn0_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamIn0_V_V_TDATA_blk_n <= tsStreamIn0_V_V_0_state(0);
        else 
            tsStreamIn0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamIn0_V_V_TREADY <= tsStreamIn0_V_V_0_state(1);
    tsStreamIn1_V_V_0_ack_in <= tsStreamIn1_V_V_0_state(1);

    tsStreamIn1_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tsStreamIn1_V_V_0_ack_out <= ap_const_logic_1;
        else 
            tsStreamIn1_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    tsStreamIn1_V_V_0_data_out_assign_proc : process(tsStreamIn1_V_V_0_payload_A, tsStreamIn1_V_V_0_payload_B, tsStreamIn1_V_V_0_sel)
    begin
        if ((tsStreamIn1_V_V_0_sel = ap_const_logic_1)) then 
            tsStreamIn1_V_V_0_data_out <= tsStreamIn1_V_V_0_payload_B;
        else 
            tsStreamIn1_V_V_0_data_out <= tsStreamIn1_V_V_0_payload_A;
        end if; 
    end process;

    tsStreamIn1_V_V_0_load_A <= (tsStreamIn1_V_V_0_state_cmp_full and not(tsStreamIn1_V_V_0_sel_wr));
    tsStreamIn1_V_V_0_load_B <= (tsStreamIn1_V_V_0_state_cmp_full and tsStreamIn1_V_V_0_sel_wr);
    tsStreamIn1_V_V_0_sel <= tsStreamIn1_V_V_0_sel_rd;
    tsStreamIn1_V_V_0_state_cmp_full <= '0' when (tsStreamIn1_V_V_0_state = ap_const_lv2_1) else '1';
    tsStreamIn1_V_V_0_vld_in <= tsStreamIn1_V_V_TVALID;
    tsStreamIn1_V_V_0_vld_out <= tsStreamIn1_V_V_0_state(0);

    tsStreamIn1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, tsStreamIn1_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tsStreamIn1_V_V_TDATA_blk_n <= tsStreamIn1_V_V_0_state(0);
        else 
            tsStreamIn1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamIn1_V_V_TREADY <= tsStreamIn1_V_V_0_state(1);
    tsStreamOut_V_V_1_ack_in <= tsStreamOut_V_V_1_state(1);
    tsStreamOut_V_V_1_ack_out <= tsStreamOut_V_V_TREADY;

    tsStreamOut_V_V_1_data_out_assign_proc : process(tsStreamOut_V_V_1_payload_A, tsStreamOut_V_V_1_payload_B, tsStreamOut_V_V_1_sel)
    begin
        if ((tsStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_B;
        else 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut_V_V_1_load_A <= (tsStreamOut_V_V_1_state_cmp_full and not(tsStreamOut_V_V_1_sel_wr));
    tsStreamOut_V_V_1_load_B <= (tsStreamOut_V_V_1_state_cmp_full and tsStreamOut_V_V_1_sel_wr);
    tsStreamOut_V_V_1_sel <= tsStreamOut_V_V_1_sel_rd;
    tsStreamOut_V_V_1_state_cmp_full <= '0' when (tsStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    tsStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tsStreamOut_V_V_1_vld_out <= tsStreamOut_V_V_1_state(0);
    tsStreamOut_V_V_TDATA <= tsStreamOut_V_V_1_data_out;

    tsStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tsStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            tsStreamOut_V_V_TDATA_blk_n <= tsStreamOut_V_V_1_state(1);
        else 
            tsStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut_V_V_TVALID <= tsStreamOut_V_V_1_state(0);
    xStreamIn0_V_V_0_ack_in <= xStreamIn0_V_V_0_state(1);

    xStreamIn0_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xStreamIn0_V_V_0_ack_out <= ap_const_logic_1;
        else 
            xStreamIn0_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    xStreamIn0_V_V_0_data_out_assign_proc : process(xStreamIn0_V_V_0_payload_A, xStreamIn0_V_V_0_payload_B, xStreamIn0_V_V_0_sel)
    begin
        if ((xStreamIn0_V_V_0_sel = ap_const_logic_1)) then 
            xStreamIn0_V_V_0_data_out <= xStreamIn0_V_V_0_payload_B;
        else 
            xStreamIn0_V_V_0_data_out <= xStreamIn0_V_V_0_payload_A;
        end if; 
    end process;

    xStreamIn0_V_V_0_load_A <= (xStreamIn0_V_V_0_state_cmp_full and not(xStreamIn0_V_V_0_sel_wr));
    xStreamIn0_V_V_0_load_B <= (xStreamIn0_V_V_0_state_cmp_full and xStreamIn0_V_V_0_sel_wr);
    xStreamIn0_V_V_0_sel <= xStreamIn0_V_V_0_sel_rd;
    xStreamIn0_V_V_0_state_cmp_full <= '0' when (xStreamIn0_V_V_0_state = ap_const_lv2_1) else '1';
    xStreamIn0_V_V_0_vld_in <= xStreamIn0_V_V_TVALID;
    xStreamIn0_V_V_0_vld_out <= xStreamIn0_V_V_0_state(0);

    xStreamIn0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, xStreamIn0_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamIn0_V_V_TDATA_blk_n <= xStreamIn0_V_V_0_state(0);
        else 
            xStreamIn0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamIn0_V_V_TREADY <= xStreamIn0_V_V_0_state(1);
    xStreamIn1_V_V_0_ack_in <= xStreamIn1_V_V_0_state(1);

    xStreamIn1_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xStreamIn1_V_V_0_ack_out <= ap_const_logic_1;
        else 
            xStreamIn1_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    xStreamIn1_V_V_0_data_out_assign_proc : process(xStreamIn1_V_V_0_payload_A, xStreamIn1_V_V_0_payload_B, xStreamIn1_V_V_0_sel)
    begin
        if ((xStreamIn1_V_V_0_sel = ap_const_logic_1)) then 
            xStreamIn1_V_V_0_data_out <= xStreamIn1_V_V_0_payload_B;
        else 
            xStreamIn1_V_V_0_data_out <= xStreamIn1_V_V_0_payload_A;
        end if; 
    end process;

    xStreamIn1_V_V_0_load_A <= (xStreamIn1_V_V_0_state_cmp_full and not(xStreamIn1_V_V_0_sel_wr));
    xStreamIn1_V_V_0_load_B <= (xStreamIn1_V_V_0_state_cmp_full and xStreamIn1_V_V_0_sel_wr);
    xStreamIn1_V_V_0_sel <= xStreamIn1_V_V_0_sel_rd;
    xStreamIn1_V_V_0_state_cmp_full <= '0' when (xStreamIn1_V_V_0_state = ap_const_lv2_1) else '1';
    xStreamIn1_V_V_0_vld_in <= xStreamIn1_V_V_TVALID;
    xStreamIn1_V_V_0_vld_out <= xStreamIn1_V_V_0_state(0);

    xStreamIn1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, xStreamIn1_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xStreamIn1_V_V_TDATA_blk_n <= xStreamIn1_V_V_0_state(0);
        else 
            xStreamIn1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamIn1_V_V_TREADY <= xStreamIn1_V_V_0_state(1);
    xStreamOut_V_V_1_ack_in <= xStreamOut_V_V_1_state(1);
    xStreamOut_V_V_1_ack_out <= xStreamOut_V_V_TREADY;

    xStreamOut_V_V_1_data_out_assign_proc : process(xStreamOut_V_V_1_payload_A, xStreamOut_V_V_1_payload_B, xStreamOut_V_V_1_sel)
    begin
        if ((xStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_B;
        else 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut_V_V_1_load_A <= (xStreamOut_V_V_1_state_cmp_full and not(xStreamOut_V_V_1_sel_wr));
    xStreamOut_V_V_1_load_B <= (xStreamOut_V_V_1_state_cmp_full and xStreamOut_V_V_1_sel_wr);
    xStreamOut_V_V_1_sel <= xStreamOut_V_V_1_sel_rd;
    xStreamOut_V_V_1_state_cmp_full <= '0' when (xStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    xStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xStreamOut_V_V_1_vld_out <= xStreamOut_V_V_1_state(0);
    xStreamOut_V_V_TDATA <= xStreamOut_V_V_1_data_out;

    xStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, xStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            xStreamOut_V_V_TDATA_blk_n <= xStreamOut_V_V_1_state(1);
        else 
            xStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut_V_V_TVALID <= xStreamOut_V_V_1_state(0);
    yStreamIn0_V_V_0_ack_in <= yStreamIn0_V_V_0_state(1);

    yStreamIn0_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            yStreamIn0_V_V_0_ack_out <= ap_const_logic_1;
        else 
            yStreamIn0_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    yStreamIn0_V_V_0_data_out_assign_proc : process(yStreamIn0_V_V_0_payload_A, yStreamIn0_V_V_0_payload_B, yStreamIn0_V_V_0_sel)
    begin
        if ((yStreamIn0_V_V_0_sel = ap_const_logic_1)) then 
            yStreamIn0_V_V_0_data_out <= yStreamIn0_V_V_0_payload_B;
        else 
            yStreamIn0_V_V_0_data_out <= yStreamIn0_V_V_0_payload_A;
        end if; 
    end process;

    yStreamIn0_V_V_0_load_A <= (yStreamIn0_V_V_0_state_cmp_full and not(yStreamIn0_V_V_0_sel_wr));
    yStreamIn0_V_V_0_load_B <= (yStreamIn0_V_V_0_state_cmp_full and yStreamIn0_V_V_0_sel_wr);
    yStreamIn0_V_V_0_sel <= yStreamIn0_V_V_0_sel_rd;
    yStreamIn0_V_V_0_state_cmp_full <= '0' when (yStreamIn0_V_V_0_state = ap_const_lv2_1) else '1';
    yStreamIn0_V_V_0_vld_in <= yStreamIn0_V_V_TVALID;
    yStreamIn0_V_V_0_vld_out <= yStreamIn0_V_V_0_state(0);

    yStreamIn0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, yStreamIn0_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamIn0_V_V_TDATA_blk_n <= yStreamIn0_V_V_0_state(0);
        else 
            yStreamIn0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamIn0_V_V_TREADY <= yStreamIn0_V_V_0_state(1);
    yStreamIn1_V_V_0_ack_in <= yStreamIn1_V_V_0_state(1);

    yStreamIn1_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            yStreamIn1_V_V_0_ack_out <= ap_const_logic_1;
        else 
            yStreamIn1_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    yStreamIn1_V_V_0_data_out_assign_proc : process(yStreamIn1_V_V_0_payload_A, yStreamIn1_V_V_0_payload_B, yStreamIn1_V_V_0_sel)
    begin
        if ((yStreamIn1_V_V_0_sel = ap_const_logic_1)) then 
            yStreamIn1_V_V_0_data_out <= yStreamIn1_V_V_0_payload_B;
        else 
            yStreamIn1_V_V_0_data_out <= yStreamIn1_V_V_0_payload_A;
        end if; 
    end process;

    yStreamIn1_V_V_0_load_A <= (yStreamIn1_V_V_0_state_cmp_full and not(yStreamIn1_V_V_0_sel_wr));
    yStreamIn1_V_V_0_load_B <= (yStreamIn1_V_V_0_state_cmp_full and yStreamIn1_V_V_0_sel_wr);
    yStreamIn1_V_V_0_sel <= yStreamIn1_V_V_0_sel_rd;
    yStreamIn1_V_V_0_state_cmp_full <= '0' when (yStreamIn1_V_V_0_state = ap_const_lv2_1) else '1';
    yStreamIn1_V_V_0_vld_in <= yStreamIn1_V_V_TVALID;
    yStreamIn1_V_V_0_vld_out <= yStreamIn1_V_V_0_state(0);

    yStreamIn1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_283, yStreamIn1_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            yStreamIn1_V_V_TDATA_blk_n <= yStreamIn1_V_V_0_state(0);
        else 
            yStreamIn1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamIn1_V_V_TREADY <= yStreamIn1_V_V_0_state(1);
    yStreamOut_V_V_1_ack_in <= yStreamOut_V_V_1_state(1);
    yStreamOut_V_V_1_ack_out <= yStreamOut_V_V_TREADY;

    yStreamOut_V_V_1_data_out_assign_proc : process(yStreamOut_V_V_1_payload_A, yStreamOut_V_V_1_payload_B, yStreamOut_V_V_1_sel)
    begin
        if ((yStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_B;
        else 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut_V_V_1_load_A <= (yStreamOut_V_V_1_state_cmp_full and not(yStreamOut_V_V_1_sel_wr));
    yStreamOut_V_V_1_load_B <= (yStreamOut_V_V_1_state_cmp_full and yStreamOut_V_V_1_sel_wr);
    yStreamOut_V_V_1_sel <= yStreamOut_V_V_1_sel_rd;
    yStreamOut_V_V_1_state_cmp_full <= '0' when (yStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    yStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yStreamOut_V_V_1_vld_out <= yStreamOut_V_V_1_state(0);
    yStreamOut_V_V_TDATA <= yStreamOut_V_V_1_data_out;

    yStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, yStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            yStreamOut_V_V_TDATA_blk_n <= yStreamOut_V_V_1_state(1);
        else 
            yStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut_V_V_TVALID <= yStreamOut_V_V_1_state(0);
end behav;
