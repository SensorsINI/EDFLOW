-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SFAST_process_data is
generic (
    C_S_AXI_CONFIG_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONFIG_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_config_AWVALID : IN STD_LOGIC;
    s_axi_config_AWREADY : OUT STD_LOGIC;
    s_axi_config_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_WVALID : IN STD_LOGIC;
    s_axi_config_WREADY : OUT STD_LOGIC;
    s_axi_config_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH/8-1 downto 0);
    s_axi_config_ARVALID : IN STD_LOGIC;
    s_axi_config_ARREADY : OUT STD_LOGIC;
    s_axi_config_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_RVALID : OUT STD_LOGIC;
    s_axi_config_RREADY : IN STD_LOGIC;
    s_axi_config_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_config_BVALID : OUT STD_LOGIC;
    s_axi_config_BREADY : IN STD_LOGIC;
    s_axi_config_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    isFinalCornerStream_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamIn_V_V_TVALID : IN STD_LOGIC;
    xStreamIn_V_V_TREADY : OUT STD_LOGIC;
    yStreamIn_V_V_TVALID : IN STD_LOGIC;
    yStreamIn_V_V_TREADY : OUT STD_LOGIC;
    polStreamIn_V_V_TVALID : IN STD_LOGIC;
    polStreamIn_V_V_TREADY : OUT STD_LOGIC;
    tsStreamIn_V_V_TVALID : IN STD_LOGIC;
    tsStreamIn_V_V_TREADY : OUT STD_LOGIC;
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    polStreamOut_V_V_TVALID : OUT STD_LOGIC;
    polStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    isFinalCornerStream_V_V_TVALID : OUT STD_LOGIC;
    isFinalCornerStream_V_V_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of SFAST_process_data is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SFAST_process_data,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.723250,HLS_SYN_LAT=23,HLS_SYN_TPT=23,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=6608,HLS_SYN_LUT=10829}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal config_V : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_glConfig_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc_U0_glConfig_V_out_write : STD_LOGIC;
    signal preProcessStream_U0_ap_start : STD_LOGIC;
    signal preProcessStream_U0_start_full_n : STD_LOGIC;
    signal preProcessStream_U0_ap_done : STD_LOGIC;
    signal preProcessStream_U0_ap_continue : STD_LOGIC;
    signal preProcessStream_U0_ap_idle : STD_LOGIC;
    signal preProcessStream_U0_ap_ready : STD_LOGIC;
    signal preProcessStream_U0_start_out : STD_LOGIC;
    signal preProcessStream_U0_start_write : STD_LOGIC;
    signal preProcessStream_U0_xStreamIn_V_V_TREADY : STD_LOGIC;
    signal preProcessStream_U0_yStreamIn_V_V_TREADY : STD_LOGIC;
    signal preProcessStream_U0_polStreamIn_V_V_TREADY : STD_LOGIC;
    signal preProcessStream_U0_tsStreamIn_V_V_TREADY : STD_LOGIC;
    signal preProcessStream_U0_xStreamOut_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal preProcessStream_U0_xStreamOut_V_V_write : STD_LOGIC;
    signal preProcessStream_U0_yStreamOut_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal preProcessStream_U0_yStreamOut_V_V_write : STD_LOGIC;
    signal preProcessStream_U0_polStreamOut_V_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal preProcessStream_U0_polStreamOut_V_V_write : STD_LOGIC;
    signal preProcessStream_U0_idxStreamOut_V_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal preProcessStream_U0_idxStreamOut_V_V_write : STD_LOGIC;
    signal preProcessStream_U0_tsStreamOut_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal preProcessStream_U0_tsStreamOut_V_V_write : STD_LOGIC;
    signal preProcessStream_U0_packetEventDataStrea_din : STD_LOGIC_VECTOR (95 downto 0);
    signal preProcessStream_U0_packetEventDataStrea_write : STD_LOGIC;
    signal preProcessStream_U0_glConfig_V_read : STD_LOGIC;
    signal preProcessStream_U0_glConfig_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal preProcessStream_U0_glConfig_V_out_write : STD_LOGIC;
    signal preProcessStream_U0_glStatus_currentAreaCntThr_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal preProcessStream_U0_glStatus_currentAreaCntThr_out_write : STD_LOGIC;
    signal preProcessStream_U0_glStatus_inEventsNum_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal preProcessStream_U0_glStatus_inEventsNum_out_write : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_start : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_done : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_continue : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_idle : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_ready : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_xStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_yStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_polStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_tsStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_idxStream_V_V_read : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_outputDataStream_V_V_din : STD_LOGIC_VECTOR (47 downto 0);
    signal rwSAEPerfectLoopStre_U0_outputDataStream_V_V_write : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_sizeStreamOut2_V_out_din : STD_LOGIC_VECTOR (4 downto 0);
    signal rwSAEPerfectLoopStre_U0_sizeStreamOut2_V_out_write : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_channel_done_size1_V : STD_LOGIC;
    signal size1_V_full_n : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_ap_start : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_ap_done : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_ap_continue : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_ap_idle : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_ap_ready : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_tsStream_V_V_read : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_ap_return_0 : STD_LOGIC_VECTOR (59 downto 0);
    signal sortedIdxStreamV3_4_U0_ap_return_1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_channel_done_sortedData_V : STD_LOGIC;
    signal sortedData_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sortedData_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_sortedData_V : STD_LOGIC;
    signal ap_channel_done_idxDataWide_V : STD_LOGIC;
    signal idxDataWide_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_idxDataWide_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_idxDataWide_V : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_ap_start : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_ap_done : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_ap_continue : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_ap_idle : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_ap_ready : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_glConfig_V_read : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_size2_V_read : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_glConfig_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal checkIdxGeneralV3_4_U0_glConfig_V_out_write : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_glSFASTThrBak_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal checkIdxGeneralV3_4_U0_glSFASTThrBak_out_write : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal checkIdxGeneralV3_4_U0_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal checkIdxGeneralV3_4_U0_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_glFinalMaxOuterStrea_2 : STD_LOGIC;
    signal glFinalMaxOuterStrea_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_glFinalMaxOuterStrea_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_glFinalMaxOuterStrea_2 : STD_LOGIC;
    signal ap_channel_done_glFinalMaxOuterStrea : STD_LOGIC;
    signal glFinalMaxOuterStrea_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_glFinalMaxOuterStrea : STD_LOGIC := '0';
    signal ap_sync_channel_write_glFinalMaxOuterStrea : STD_LOGIC;
    signal ap_channel_done_isStageCorner_V : STD_LOGIC;
    signal isStageCorner_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_isStageCorner_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_isStageCorner_V : STD_LOGIC;
    signal finalCornerChecking_U0_ap_start : STD_LOGIC;
    signal finalCornerChecking_U0_ap_done : STD_LOGIC;
    signal finalCornerChecking_U0_ap_continue : STD_LOGIC;
    signal finalCornerChecking_U0_ap_idle : STD_LOGIC;
    signal finalCornerChecking_U0_ap_ready : STD_LOGIC;
    signal finalCornerChecking_U0_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_channel_done_isCorner_V : STD_LOGIC;
    signal isCorner_V_full_n : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_start : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_done : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_continue : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_idle : STD_LOGIC;
    signal feedbackInterleaveSt_U0_ap_ready : STD_LOGIC;
    signal feedbackInterleaveSt_U0_isFinalCornerStream_V_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal feedbackInterleaveSt_U0_isFinalCornerStream_V_V_write : STD_LOGIC;
    signal Block_proc125_U0_ap_start : STD_LOGIC;
    signal Block_proc125_U0_ap_done : STD_LOGIC;
    signal Block_proc125_U0_ap_continue : STD_LOGIC;
    signal Block_proc125_U0_ap_idle : STD_LOGIC;
    signal Block_proc125_U0_ap_ready : STD_LOGIC;
    signal Block_proc125_U0_pktEventDataStream_V_V_read : STD_LOGIC;
    signal Block_proc125_U0_stageCornerStream_V_V_read : STD_LOGIC;
    signal Block_proc125_U0_xStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc125_U0_xStreamOut_V_V_TVALID : STD_LOGIC;
    signal Block_proc125_U0_yStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc125_U0_yStreamOut_V_V_TVALID : STD_LOGIC;
    signal Block_proc125_U0_polStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc125_U0_polStreamOut_V_V_TVALID : STD_LOGIC;
    signal Block_proc125_U0_tsStreamOut_V_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc125_U0_tsStreamOut_V_V_TVALID : STD_LOGIC;
    signal Block_proc125_U0_isFinalCornerStream_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc125_U0_isFinalCornerStream_V_V_TVALID : STD_LOGIC;
    signal Block_proc125_U0_status_inEventsNum : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc125_U0_status_inEventsNum_ap_vld : STD_LOGIC;
    signal Block_proc125_U0_status_outEventsNum : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc125_U0_status_outEventsNum_ap_vld : STD_LOGIC;
    signal Block_proc125_U0_status_cornerEventsNum : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc125_U0_status_cornerEventsNum_ap_vld : STD_LOGIC;
    signal Block_proc125_U0_status_currentThreshold : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc125_U0_status_currentThreshold_ap_vld : STD_LOGIC;
    signal Block_proc125_U0_status_currentAreaCntThr : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc125_U0_status_currentAreaCntThr_ap_vld : STD_LOGIC;
    signal Block_proc125_U0_glConfig_V_read : STD_LOGIC;
    signal Block_proc125_U0_glSFASTThrBak_read : STD_LOGIC;
    signal Block_proc125_U0_glStatus_currentAreaCntThr_read : STD_LOGIC;
    signal Block_proc125_U0_glStatus_inEventsNum_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal glConfig_V_c_full_n : STD_LOGIC;
    signal glConfig_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal glConfig_V_c_empty_n : STD_LOGIC;
    signal xStream_V_V_full_n : STD_LOGIC;
    signal xStream_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal xStream_V_V_empty_n : STD_LOGIC;
    signal yStream_V_V_full_n : STD_LOGIC;
    signal yStream_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal yStream_V_V_empty_n : STD_LOGIC;
    signal polStream_V_V_full_n : STD_LOGIC;
    signal polStream_V_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal polStream_V_V_empty_n : STD_LOGIC;
    signal idxStream_V_V_full_n : STD_LOGIC;
    signal idxStream_V_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal idxStream_V_V_empty_n : STD_LOGIC;
    signal tsStream_V_V_full_n : STD_LOGIC;
    signal tsStream_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tsStream_V_V_empty_n : STD_LOGIC;
    signal pktEventDataStream_V_full_n : STD_LOGIC;
    signal pktEventDataStream_V_dout : STD_LOGIC_VECTOR (95 downto 0);
    signal pktEventDataStream_V_empty_n : STD_LOGIC;
    signal glConfig_V_c10_full_n : STD_LOGIC;
    signal glConfig_V_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal glConfig_V_c10_empty_n : STD_LOGIC;
    signal glStatus_currentArea_full_n : STD_LOGIC;
    signal glStatus_currentArea_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal glStatus_currentArea_empty_n : STD_LOGIC;
    signal glStatus_inEventsNum_full_n : STD_LOGIC;
    signal glStatus_inEventsNum_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal glStatus_inEventsNum_empty_n : STD_LOGIC;
    signal inStream_V_V_full_n : STD_LOGIC;
    signal inStream_V_V_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal inStream_V_V_empty_n : STD_LOGIC;
    signal size2_V_c_full_n : STD_LOGIC;
    signal size2_V_c_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal size2_V_c_empty_n : STD_LOGIC;
    signal size1_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal size1_V_empty_n : STD_LOGIC;
    signal idxDataWide_V_dout : STD_LOGIC_VECTOR (59 downto 0);
    signal idxDataWide_V_empty_n : STD_LOGIC;
    signal sortedData_V_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal sortedData_V_empty_n : STD_LOGIC;
    signal glConfig_V_c11_full_n : STD_LOGIC;
    signal glConfig_V_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal glConfig_V_c11_empty_n : STD_LOGIC;
    signal glSFASTThrBak_c_full_n : STD_LOGIC;
    signal glSFASTThrBak_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal glSFASTThrBak_c_empty_n : STD_LOGIC;
    signal isStageCorner_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal isStageCorner_V_empty_n : STD_LOGIC;
    signal glFinalMaxOuterStrea_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal glFinalMaxOuterStrea_empty_n : STD_LOGIC;
    signal glFinalMaxOuterStrea_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal glFinalMaxOuterStrea_2_empty_n : STD_LOGIC;
    signal isCorner_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal isCorner_V_empty_n : STD_LOGIC;
    signal stageCornerStream_V_s_full_n : STD_LOGIC;
    signal stageCornerStream_V_s_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal stageCornerStream_V_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_preProcessStream_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_preProcessStream_U0_ap_ready : STD_LOGIC;
    signal preProcessStream_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal start_for_rwSAEPerfectLoopStre_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rwSAEPerfectLoopStre_U0_full_n : STD_LOGIC;
    signal start_for_rwSAEPerfectLoopStre_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rwSAEPerfectLoopStre_U0_empty_n : STD_LOGIC;
    signal start_for_Block_proc125_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc125_U0_full_n : STD_LOGIC;
    signal start_for_Block_proc125_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc125_U0_empty_n : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_start_full_n : STD_LOGIC;
    signal rwSAEPerfectLoopStre_U0_start_write : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_start_full_n : STD_LOGIC;
    signal sortedIdxStreamV3_4_U0_start_write : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_start_full_n : STD_LOGIC;
    signal checkIdxGeneralV3_4_U0_start_write : STD_LOGIC;
    signal finalCornerChecking_U0_start_full_n : STD_LOGIC;
    signal finalCornerChecking_U0_start_write : STD_LOGIC;
    signal feedbackInterleaveSt_U0_start_full_n : STD_LOGIC;
    signal feedbackInterleaveSt_U0_start_write : STD_LOGIC;
    signal Block_proc125_U0_start_full_n : STD_LOGIC;
    signal Block_proc125_U0_start_write : STD_LOGIC;

    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        config_V : IN STD_LOGIC_VECTOR (31 downto 0);
        glConfig_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        glConfig_V_out_full_n : IN STD_LOGIC;
        glConfig_V_out_write : OUT STD_LOGIC );
    end component;


    component preProcessStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        xStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        xStreamIn_V_V_TVALID : IN STD_LOGIC;
        xStreamIn_V_V_TREADY : OUT STD_LOGIC;
        yStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        yStreamIn_V_V_TVALID : IN STD_LOGIC;
        yStreamIn_V_V_TREADY : OUT STD_LOGIC;
        polStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        polStreamIn_V_V_TVALID : IN STD_LOGIC;
        polStreamIn_V_V_TREADY : OUT STD_LOGIC;
        tsStreamIn_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        tsStreamIn_V_V_TVALID : IN STD_LOGIC;
        tsStreamIn_V_V_TREADY : OUT STD_LOGIC;
        xStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        xStreamOut_V_V_full_n : IN STD_LOGIC;
        xStreamOut_V_V_write : OUT STD_LOGIC;
        yStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        yStreamOut_V_V_full_n : IN STD_LOGIC;
        yStreamOut_V_V_write : OUT STD_LOGIC;
        polStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        polStreamOut_V_V_full_n : IN STD_LOGIC;
        polStreamOut_V_V_write : OUT STD_LOGIC;
        idxStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        idxStreamOut_V_V_full_n : IN STD_LOGIC;
        idxStreamOut_V_V_write : OUT STD_LOGIC;
        tsStreamOut_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tsStreamOut_V_V_full_n : IN STD_LOGIC;
        tsStreamOut_V_V_write : OUT STD_LOGIC;
        packetEventDataStrea_din : OUT STD_LOGIC_VECTOR (95 downto 0);
        packetEventDataStrea_full_n : IN STD_LOGIC;
        packetEventDataStrea_write : OUT STD_LOGIC;
        glConfig_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        glConfig_V_empty_n : IN STD_LOGIC;
        glConfig_V_read : OUT STD_LOGIC;
        glConfig_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        glConfig_V_out_full_n : IN STD_LOGIC;
        glConfig_V_out_write : OUT STD_LOGIC;
        glStatus_currentAreaCntThr_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        glStatus_currentAreaCntThr_out_full_n : IN STD_LOGIC;
        glStatus_currentAreaCntThr_out_write : OUT STD_LOGIC;
        glStatus_inEventsNum_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        glStatus_inEventsNum_out_full_n : IN STD_LOGIC;
        glStatus_inEventsNum_out_write : OUT STD_LOGIC );
    end component;


    component rwSAEPerfectLoopStre IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xStream_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        xStream_V_V_empty_n : IN STD_LOGIC;
        xStream_V_V_read : OUT STD_LOGIC;
        yStream_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        yStream_V_V_empty_n : IN STD_LOGIC;
        yStream_V_V_read : OUT STD_LOGIC;
        polStream_V_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        polStream_V_V_empty_n : IN STD_LOGIC;
        polStream_V_V_read : OUT STD_LOGIC;
        tsStream_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tsStream_V_V_empty_n : IN STD_LOGIC;
        tsStream_V_V_read : OUT STD_LOGIC;
        idxStream_V_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        idxStream_V_V_empty_n : IN STD_LOGIC;
        idxStream_V_V_read : OUT STD_LOGIC;
        outputDataStream_V_V_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        outputDataStream_V_V_full_n : IN STD_LOGIC;
        outputDataStream_V_V_write : OUT STD_LOGIC;
        sizeStreamOut2_V_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        sizeStreamOut2_V_out_full_n : IN STD_LOGIC;
        sizeStreamOut2_V_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component sortedIdxStreamV3_4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tsStream_V_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        tsStream_V_V_empty_n : IN STD_LOGIC;
        tsStream_V_V_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (59 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component checkIdxGeneralV3_4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        glConfig_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        glConfig_V_empty_n : IN STD_LOGIC;
        glConfig_V_read : OUT STD_LOGIC;
        size2_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        size2_V_empty_n : IN STD_LOGIC;
        size2_V_read : OUT STD_LOGIC;
        glConfig_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        glConfig_V_out_full_n : IN STD_LOGIC;
        glConfig_V_out_write : OUT STD_LOGIC;
        glSFASTThrBak_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        glSFASTThrBak_out_full_n : IN STD_LOGIC;
        glSFASTThrBak_out_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (59 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (47 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component finalCornerChecking IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component feedbackInterleaveSt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        isFinalCornerStream_V_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        isFinalCornerStream_V_V_full_n : IN STD_LOGIC;
        isFinalCornerStream_V_V_write : OUT STD_LOGIC );
    end component;


    component Block_proc125 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pktEventDataStream_V_V_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        pktEventDataStream_V_V_empty_n : IN STD_LOGIC;
        pktEventDataStream_V_V_read : OUT STD_LOGIC;
        stageCornerStream_V_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        stageCornerStream_V_V_empty_n : IN STD_LOGIC;
        stageCornerStream_V_V_read : OUT STD_LOGIC;
        xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        xStreamOut_V_V_TVALID : OUT STD_LOGIC;
        xStreamOut_V_V_TREADY : IN STD_LOGIC;
        yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        yStreamOut_V_V_TVALID : OUT STD_LOGIC;
        yStreamOut_V_V_TREADY : IN STD_LOGIC;
        polStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        polStreamOut_V_V_TVALID : OUT STD_LOGIC;
        polStreamOut_V_V_TREADY : IN STD_LOGIC;
        tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        tsStreamOut_V_V_TVALID : OUT STD_LOGIC;
        tsStreamOut_V_V_TREADY : IN STD_LOGIC;
        isFinalCornerStream_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        isFinalCornerStream_V_V_TVALID : OUT STD_LOGIC;
        isFinalCornerStream_V_V_TREADY : IN STD_LOGIC;
        status_inEventsNum : OUT STD_LOGIC_VECTOR (63 downto 0);
        status_inEventsNum_ap_vld : OUT STD_LOGIC;
        status_outEventsNum : OUT STD_LOGIC_VECTOR (63 downto 0);
        status_outEventsNum_ap_vld : OUT STD_LOGIC;
        status_cornerEventsNum : OUT STD_LOGIC_VECTOR (63 downto 0);
        status_cornerEventsNum_ap_vld : OUT STD_LOGIC;
        status_currentThreshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        status_currentThreshold_ap_vld : OUT STD_LOGIC;
        status_currentAreaCntThr : OUT STD_LOGIC_VECTOR (31 downto 0);
        status_currentAreaCntThr_ap_vld : OUT STD_LOGIC;
        glConfig_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        glConfig_V_empty_n : IN STD_LOGIC;
        glConfig_V_read : OUT STD_LOGIC;
        glSFASTThrBak_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        glSFASTThrBak_empty_n : IN STD_LOGIC;
        glSFASTThrBak_read : OUT STD_LOGIC;
        glStatus_currentAreaCntThr_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        glStatus_currentAreaCntThr_empty_n : IN STD_LOGIC;
        glStatus_currentAreaCntThr_read : OUT STD_LOGIC;
        glStatus_inEventsNum_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        glStatus_inEventsNum_empty_n : IN STD_LOGIC;
        glStatus_inEventsNum_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w96_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (95 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (95 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w48_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w5_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (4 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w5_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (4 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w60_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (59 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (59 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w48_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_rwSAEPeNgs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Block_pOgC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component SFAST_process_data_config_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        config_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        status_inEventsNum : IN STD_LOGIC_VECTOR (63 downto 0);
        status_inEventsNum_ap_vld : IN STD_LOGIC;
        status_outEventsNum : IN STD_LOGIC_VECTOR (63 downto 0);
        status_outEventsNum_ap_vld : IN STD_LOGIC;
        status_cornerEventsNum : IN STD_LOGIC_VECTOR (63 downto 0);
        status_cornerEventsNum_ap_vld : IN STD_LOGIC;
        status_currentThreshold : IN STD_LOGIC_VECTOR (31 downto 0);
        status_currentThreshold_ap_vld : IN STD_LOGIC;
        status_currentAreaCntThr : IN STD_LOGIC_VECTOR (31 downto 0);
        status_currentAreaCntThr_ap_vld : IN STD_LOGIC );
    end component;



begin
    SFAST_process_data_config_s_axi_U : component SFAST_process_data_config_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONFIG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONFIG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_config_AWVALID,
        AWREADY => s_axi_config_AWREADY,
        AWADDR => s_axi_config_AWADDR,
        WVALID => s_axi_config_WVALID,
        WREADY => s_axi_config_WREADY,
        WDATA => s_axi_config_WDATA,
        WSTRB => s_axi_config_WSTRB,
        ARVALID => s_axi_config_ARVALID,
        ARREADY => s_axi_config_ARREADY,
        ARADDR => s_axi_config_ARADDR,
        RVALID => s_axi_config_RVALID,
        RREADY => s_axi_config_RREADY,
        RDATA => s_axi_config_RDATA,
        RRESP => s_axi_config_RRESP,
        BVALID => s_axi_config_BVALID,
        BREADY => s_axi_config_BREADY,
        BRESP => s_axi_config_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        config_V => config_V,
        status_inEventsNum => Block_proc125_U0_status_inEventsNum,
        status_inEventsNum_ap_vld => Block_proc125_U0_status_inEventsNum_ap_vld,
        status_outEventsNum => Block_proc125_U0_status_outEventsNum,
        status_outEventsNum_ap_vld => Block_proc125_U0_status_outEventsNum_ap_vld,
        status_cornerEventsNum => Block_proc125_U0_status_cornerEventsNum,
        status_cornerEventsNum_ap_vld => Block_proc125_U0_status_cornerEventsNum_ap_vld,
        status_currentThreshold => Block_proc125_U0_status_currentThreshold,
        status_currentThreshold_ap_vld => Block_proc125_U0_status_currentThreshold_ap_vld,
        status_currentAreaCntThr => Block_proc125_U0_status_currentAreaCntThr,
        status_currentAreaCntThr_ap_vld => Block_proc125_U0_status_currentAreaCntThr_ap_vld);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        config_V => config_V,
        glConfig_V_out_din => Block_proc_U0_glConfig_V_out_din,
        glConfig_V_out_full_n => glConfig_V_c_full_n,
        glConfig_V_out_write => Block_proc_U0_glConfig_V_out_write);

    preProcessStream_U0 : component preProcessStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => preProcessStream_U0_ap_start,
        start_full_n => preProcessStream_U0_start_full_n,
        ap_done => preProcessStream_U0_ap_done,
        ap_continue => preProcessStream_U0_ap_continue,
        ap_idle => preProcessStream_U0_ap_idle,
        ap_ready => preProcessStream_U0_ap_ready,
        start_out => preProcessStream_U0_start_out,
        start_write => preProcessStream_U0_start_write,
        xStreamIn_V_V_TDATA => xStreamIn_V_V_TDATA,
        xStreamIn_V_V_TVALID => xStreamIn_V_V_TVALID,
        xStreamIn_V_V_TREADY => preProcessStream_U0_xStreamIn_V_V_TREADY,
        yStreamIn_V_V_TDATA => yStreamIn_V_V_TDATA,
        yStreamIn_V_V_TVALID => yStreamIn_V_V_TVALID,
        yStreamIn_V_V_TREADY => preProcessStream_U0_yStreamIn_V_V_TREADY,
        polStreamIn_V_V_TDATA => polStreamIn_V_V_TDATA,
        polStreamIn_V_V_TVALID => polStreamIn_V_V_TVALID,
        polStreamIn_V_V_TREADY => preProcessStream_U0_polStreamIn_V_V_TREADY,
        tsStreamIn_V_V_TDATA => tsStreamIn_V_V_TDATA,
        tsStreamIn_V_V_TVALID => tsStreamIn_V_V_TVALID,
        tsStreamIn_V_V_TREADY => preProcessStream_U0_tsStreamIn_V_V_TREADY,
        xStreamOut_V_V_din => preProcessStream_U0_xStreamOut_V_V_din,
        xStreamOut_V_V_full_n => xStream_V_V_full_n,
        xStreamOut_V_V_write => preProcessStream_U0_xStreamOut_V_V_write,
        yStreamOut_V_V_din => preProcessStream_U0_yStreamOut_V_V_din,
        yStreamOut_V_V_full_n => yStream_V_V_full_n,
        yStreamOut_V_V_write => preProcessStream_U0_yStreamOut_V_V_write,
        polStreamOut_V_V_din => preProcessStream_U0_polStreamOut_V_V_din,
        polStreamOut_V_V_full_n => polStream_V_V_full_n,
        polStreamOut_V_V_write => preProcessStream_U0_polStreamOut_V_V_write,
        idxStreamOut_V_V_din => preProcessStream_U0_idxStreamOut_V_V_din,
        idxStreamOut_V_V_full_n => idxStream_V_V_full_n,
        idxStreamOut_V_V_write => preProcessStream_U0_idxStreamOut_V_V_write,
        tsStreamOut_V_V_din => preProcessStream_U0_tsStreamOut_V_V_din,
        tsStreamOut_V_V_full_n => tsStream_V_V_full_n,
        tsStreamOut_V_V_write => preProcessStream_U0_tsStreamOut_V_V_write,
        packetEventDataStrea_din => preProcessStream_U0_packetEventDataStrea_din,
        packetEventDataStrea_full_n => pktEventDataStream_V_full_n,
        packetEventDataStrea_write => preProcessStream_U0_packetEventDataStrea_write,
        glConfig_V_dout => glConfig_V_c_dout,
        glConfig_V_empty_n => glConfig_V_c_empty_n,
        glConfig_V_read => preProcessStream_U0_glConfig_V_read,
        glConfig_V_out_din => preProcessStream_U0_glConfig_V_out_din,
        glConfig_V_out_full_n => glConfig_V_c10_full_n,
        glConfig_V_out_write => preProcessStream_U0_glConfig_V_out_write,
        glStatus_currentAreaCntThr_out_din => preProcessStream_U0_glStatus_currentAreaCntThr_out_din,
        glStatus_currentAreaCntThr_out_full_n => glStatus_currentArea_full_n,
        glStatus_currentAreaCntThr_out_write => preProcessStream_U0_glStatus_currentAreaCntThr_out_write,
        glStatus_inEventsNum_out_din => preProcessStream_U0_glStatus_inEventsNum_out_din,
        glStatus_inEventsNum_out_full_n => glStatus_inEventsNum_full_n,
        glStatus_inEventsNum_out_write => preProcessStream_U0_glStatus_inEventsNum_out_write);

    rwSAEPerfectLoopStre_U0 : component rwSAEPerfectLoopStre
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rwSAEPerfectLoopStre_U0_ap_start,
        ap_done => rwSAEPerfectLoopStre_U0_ap_done,
        ap_continue => rwSAEPerfectLoopStre_U0_ap_continue,
        ap_idle => rwSAEPerfectLoopStre_U0_ap_idle,
        ap_ready => rwSAEPerfectLoopStre_U0_ap_ready,
        xStream_V_V_dout => xStream_V_V_dout,
        xStream_V_V_empty_n => xStream_V_V_empty_n,
        xStream_V_V_read => rwSAEPerfectLoopStre_U0_xStream_V_V_read,
        yStream_V_V_dout => yStream_V_V_dout,
        yStream_V_V_empty_n => yStream_V_V_empty_n,
        yStream_V_V_read => rwSAEPerfectLoopStre_U0_yStream_V_V_read,
        polStream_V_V_dout => polStream_V_V_dout,
        polStream_V_V_empty_n => polStream_V_V_empty_n,
        polStream_V_V_read => rwSAEPerfectLoopStre_U0_polStream_V_V_read,
        tsStream_V_V_dout => tsStream_V_V_dout,
        tsStream_V_V_empty_n => tsStream_V_V_empty_n,
        tsStream_V_V_read => rwSAEPerfectLoopStre_U0_tsStream_V_V_read,
        idxStream_V_V_dout => idxStream_V_V_dout,
        idxStream_V_V_empty_n => idxStream_V_V_empty_n,
        idxStream_V_V_read => rwSAEPerfectLoopStre_U0_idxStream_V_V_read,
        outputDataStream_V_V_din => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_din,
        outputDataStream_V_V_full_n => inStream_V_V_full_n,
        outputDataStream_V_V_write => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_write,
        sizeStreamOut2_V_out_din => rwSAEPerfectLoopStre_U0_sizeStreamOut2_V_out_din,
        sizeStreamOut2_V_out_full_n => size2_V_c_full_n,
        sizeStreamOut2_V_out_write => rwSAEPerfectLoopStre_U0_sizeStreamOut2_V_out_write,
        ap_return => rwSAEPerfectLoopStre_U0_ap_return);

    sortedIdxStreamV3_4_U0 : component sortedIdxStreamV3_4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sortedIdxStreamV3_4_U0_ap_start,
        ap_done => sortedIdxStreamV3_4_U0_ap_done,
        ap_continue => sortedIdxStreamV3_4_U0_ap_continue,
        ap_idle => sortedIdxStreamV3_4_U0_ap_idle,
        ap_ready => sortedIdxStreamV3_4_U0_ap_ready,
        tsStream_V_V_dout => inStream_V_V_dout,
        tsStream_V_V_empty_n => inStream_V_V_empty_n,
        tsStream_V_V_read => sortedIdxStreamV3_4_U0_tsStream_V_V_read,
        p_read => size1_V_dout,
        ap_return_0 => sortedIdxStreamV3_4_U0_ap_return_0,
        ap_return_1 => sortedIdxStreamV3_4_U0_ap_return_1);

    checkIdxGeneralV3_4_U0 : component checkIdxGeneralV3_4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => checkIdxGeneralV3_4_U0_ap_start,
        ap_done => checkIdxGeneralV3_4_U0_ap_done,
        ap_continue => checkIdxGeneralV3_4_U0_ap_continue,
        ap_idle => checkIdxGeneralV3_4_U0_ap_idle,
        ap_ready => checkIdxGeneralV3_4_U0_ap_ready,
        glConfig_V_dout => glConfig_V_c10_dout,
        glConfig_V_empty_n => glConfig_V_c10_empty_n,
        glConfig_V_read => checkIdxGeneralV3_4_U0_glConfig_V_read,
        size2_V_dout => size2_V_c_dout,
        size2_V_empty_n => size2_V_c_empty_n,
        size2_V_read => checkIdxGeneralV3_4_U0_size2_V_read,
        glConfig_V_out_din => checkIdxGeneralV3_4_U0_glConfig_V_out_din,
        glConfig_V_out_full_n => glConfig_V_c11_full_n,
        glConfig_V_out_write => checkIdxGeneralV3_4_U0_glConfig_V_out_write,
        glSFASTThrBak_out_din => checkIdxGeneralV3_4_U0_glSFASTThrBak_out_din,
        glSFASTThrBak_out_full_n => glSFASTThrBak_c_full_n,
        glSFASTThrBak_out_write => checkIdxGeneralV3_4_U0_glSFASTThrBak_out_write,
        p_read => idxDataWide_V_dout,
        p_read1 => sortedData_V_dout,
        ap_return_0 => checkIdxGeneralV3_4_U0_ap_return_0,
        ap_return_1 => checkIdxGeneralV3_4_U0_ap_return_1,
        ap_return_2 => checkIdxGeneralV3_4_U0_ap_return_2);

    finalCornerChecking_U0 : component finalCornerChecking
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => finalCornerChecking_U0_ap_start,
        ap_done => finalCornerChecking_U0_ap_done,
        ap_continue => finalCornerChecking_U0_ap_continue,
        ap_idle => finalCornerChecking_U0_ap_idle,
        ap_ready => finalCornerChecking_U0_ap_ready,
        p_read => isStageCorner_V_dout,
        p_read2 => glFinalMaxOuterStrea_dout,
        p_read3 => glFinalMaxOuterStrea_2_dout,
        ap_return => finalCornerChecking_U0_ap_return);

    feedbackInterleaveSt_U0 : component feedbackInterleaveSt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => feedbackInterleaveSt_U0_ap_start,
        ap_done => feedbackInterleaveSt_U0_ap_done,
        ap_continue => feedbackInterleaveSt_U0_ap_continue,
        ap_idle => feedbackInterleaveSt_U0_ap_idle,
        ap_ready => feedbackInterleaveSt_U0_ap_ready,
        p_read => isCorner_V_dout,
        isFinalCornerStream_V_V_din => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_din,
        isFinalCornerStream_V_V_full_n => stageCornerStream_V_s_full_n,
        isFinalCornerStream_V_V_write => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_write);

    Block_proc125_U0 : component Block_proc125
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc125_U0_ap_start,
        ap_done => Block_proc125_U0_ap_done,
        ap_continue => Block_proc125_U0_ap_continue,
        ap_idle => Block_proc125_U0_ap_idle,
        ap_ready => Block_proc125_U0_ap_ready,
        pktEventDataStream_V_V_dout => pktEventDataStream_V_dout,
        pktEventDataStream_V_V_empty_n => pktEventDataStream_V_empty_n,
        pktEventDataStream_V_V_read => Block_proc125_U0_pktEventDataStream_V_V_read,
        stageCornerStream_V_V_dout => stageCornerStream_V_s_dout,
        stageCornerStream_V_V_empty_n => stageCornerStream_V_s_empty_n,
        stageCornerStream_V_V_read => Block_proc125_U0_stageCornerStream_V_V_read,
        xStreamOut_V_V_TDATA => Block_proc125_U0_xStreamOut_V_V_TDATA,
        xStreamOut_V_V_TVALID => Block_proc125_U0_xStreamOut_V_V_TVALID,
        xStreamOut_V_V_TREADY => xStreamOut_V_V_TREADY,
        yStreamOut_V_V_TDATA => Block_proc125_U0_yStreamOut_V_V_TDATA,
        yStreamOut_V_V_TVALID => Block_proc125_U0_yStreamOut_V_V_TVALID,
        yStreamOut_V_V_TREADY => yStreamOut_V_V_TREADY,
        polStreamOut_V_V_TDATA => Block_proc125_U0_polStreamOut_V_V_TDATA,
        polStreamOut_V_V_TVALID => Block_proc125_U0_polStreamOut_V_V_TVALID,
        polStreamOut_V_V_TREADY => polStreamOut_V_V_TREADY,
        tsStreamOut_V_V_TDATA => Block_proc125_U0_tsStreamOut_V_V_TDATA,
        tsStreamOut_V_V_TVALID => Block_proc125_U0_tsStreamOut_V_V_TVALID,
        tsStreamOut_V_V_TREADY => tsStreamOut_V_V_TREADY,
        isFinalCornerStream_V_V_TDATA => Block_proc125_U0_isFinalCornerStream_V_V_TDATA,
        isFinalCornerStream_V_V_TVALID => Block_proc125_U0_isFinalCornerStream_V_V_TVALID,
        isFinalCornerStream_V_V_TREADY => isFinalCornerStream_V_V_TREADY,
        status_inEventsNum => Block_proc125_U0_status_inEventsNum,
        status_inEventsNum_ap_vld => Block_proc125_U0_status_inEventsNum_ap_vld,
        status_outEventsNum => Block_proc125_U0_status_outEventsNum,
        status_outEventsNum_ap_vld => Block_proc125_U0_status_outEventsNum_ap_vld,
        status_cornerEventsNum => Block_proc125_U0_status_cornerEventsNum,
        status_cornerEventsNum_ap_vld => Block_proc125_U0_status_cornerEventsNum_ap_vld,
        status_currentThreshold => Block_proc125_U0_status_currentThreshold,
        status_currentThreshold_ap_vld => Block_proc125_U0_status_currentThreshold_ap_vld,
        status_currentAreaCntThr => Block_proc125_U0_status_currentAreaCntThr,
        status_currentAreaCntThr_ap_vld => Block_proc125_U0_status_currentAreaCntThr_ap_vld,
        glConfig_V_dout => glConfig_V_c11_dout,
        glConfig_V_empty_n => glConfig_V_c11_empty_n,
        glConfig_V_read => Block_proc125_U0_glConfig_V_read,
        glSFASTThrBak_dout => glSFASTThrBak_c_dout,
        glSFASTThrBak_empty_n => glSFASTThrBak_c_empty_n,
        glSFASTThrBak_read => Block_proc125_U0_glSFASTThrBak_read,
        glStatus_currentAreaCntThr_dout => glStatus_currentArea_dout,
        glStatus_currentAreaCntThr_empty_n => glStatus_currentArea_empty_n,
        glStatus_currentAreaCntThr_read => Block_proc125_U0_glStatus_currentAreaCntThr_read,
        glStatus_inEventsNum_dout => glStatus_inEventsNum_dout,
        glStatus_inEventsNum_empty_n => glStatus_inEventsNum_empty_n,
        glStatus_inEventsNum_read => Block_proc125_U0_glStatus_inEventsNum_read);

    glConfig_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_glConfig_V_out_din,
        if_full_n => glConfig_V_c_full_n,
        if_write => Block_proc_U0_glConfig_V_out_write,
        if_dout => glConfig_V_c_dout,
        if_empty_n => glConfig_V_c_empty_n,
        if_read => preProcessStream_U0_glConfig_V_read);

    xStream_V_V_U : component fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_xStreamOut_V_V_din,
        if_full_n => xStream_V_V_full_n,
        if_write => preProcessStream_U0_xStreamOut_V_V_write,
        if_dout => xStream_V_V_dout,
        if_empty_n => xStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_xStream_V_V_read);

    yStream_V_V_U : component fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_yStreamOut_V_V_din,
        if_full_n => yStream_V_V_full_n,
        if_write => preProcessStream_U0_yStreamOut_V_V_write,
        if_dout => yStream_V_V_dout,
        if_empty_n => yStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_yStream_V_V_read);

    polStream_V_V_U : component fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_polStreamOut_V_V_din,
        if_full_n => polStream_V_V_full_n,
        if_write => preProcessStream_U0_polStreamOut_V_V_write,
        if_dout => polStream_V_V_dout,
        if_empty_n => polStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_polStream_V_V_read);

    idxStream_V_V_U : component fifo_w2_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_idxStreamOut_V_V_din,
        if_full_n => idxStream_V_V_full_n,
        if_write => preProcessStream_U0_idxStreamOut_V_V_write,
        if_dout => idxStream_V_V_dout,
        if_empty_n => idxStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_idxStream_V_V_read);

    tsStream_V_V_U : component fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_tsStreamOut_V_V_din,
        if_full_n => tsStream_V_V_full_n,
        if_write => preProcessStream_U0_tsStreamOut_V_V_write,
        if_dout => tsStream_V_V_dout,
        if_empty_n => tsStream_V_V_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_tsStream_V_V_read);

    pktEventDataStream_V_U : component fifo_w96_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_packetEventDataStrea_din,
        if_full_n => pktEventDataStream_V_full_n,
        if_write => preProcessStream_U0_packetEventDataStrea_write,
        if_dout => pktEventDataStream_V_dout,
        if_empty_n => pktEventDataStream_V_empty_n,
        if_read => Block_proc125_U0_pktEventDataStream_V_V_read);

    glConfig_V_c10_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_glConfig_V_out_din,
        if_full_n => glConfig_V_c10_full_n,
        if_write => preProcessStream_U0_glConfig_V_out_write,
        if_dout => glConfig_V_c10_dout,
        if_empty_n => glConfig_V_c10_empty_n,
        if_read => checkIdxGeneralV3_4_U0_glConfig_V_read);

    glStatus_currentArea_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_glStatus_currentAreaCntThr_out_din,
        if_full_n => glStatus_currentArea_full_n,
        if_write => preProcessStream_U0_glStatus_currentAreaCntThr_out_write,
        if_dout => glStatus_currentArea_dout,
        if_empty_n => glStatus_currentArea_empty_n,
        if_read => Block_proc125_U0_glStatus_currentAreaCntThr_read);

    glStatus_inEventsNum_U : component fifo_w64_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessStream_U0_glStatus_inEventsNum_out_din,
        if_full_n => glStatus_inEventsNum_full_n,
        if_write => preProcessStream_U0_glStatus_inEventsNum_out_write,
        if_dout => glStatus_inEventsNum_dout,
        if_empty_n => glStatus_inEventsNum_empty_n,
        if_read => Block_proc125_U0_glStatus_inEventsNum_read);

    inStream_V_V_U : component fifo_w48_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_din,
        if_full_n => inStream_V_V_full_n,
        if_write => rwSAEPerfectLoopStre_U0_outputDataStream_V_V_write,
        if_dout => inStream_V_V_dout,
        if_empty_n => inStream_V_V_empty_n,
        if_read => sortedIdxStreamV3_4_U0_tsStream_V_V_read);

    size2_V_c_U : component fifo_w5_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rwSAEPerfectLoopStre_U0_sizeStreamOut2_V_out_din,
        if_full_n => size2_V_c_full_n,
        if_write => rwSAEPerfectLoopStre_U0_sizeStreamOut2_V_out_write,
        if_dout => size2_V_c_dout,
        if_empty_n => size2_V_c_empty_n,
        if_read => checkIdxGeneralV3_4_U0_size2_V_read);

    size1_V_U : component fifo_w5_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rwSAEPerfectLoopStre_U0_ap_return,
        if_full_n => size1_V_full_n,
        if_write => rwSAEPerfectLoopStre_U0_ap_done,
        if_dout => size1_V_dout,
        if_empty_n => size1_V_empty_n,
        if_read => sortedIdxStreamV3_4_U0_ap_ready);

    idxDataWide_V_U : component fifo_w60_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sortedIdxStreamV3_4_U0_ap_return_0,
        if_full_n => idxDataWide_V_full_n,
        if_write => ap_channel_done_idxDataWide_V,
        if_dout => idxDataWide_V_dout,
        if_empty_n => idxDataWide_V_empty_n,
        if_read => checkIdxGeneralV3_4_U0_ap_ready);

    sortedData_V_U : component fifo_w48_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sortedIdxStreamV3_4_U0_ap_return_1,
        if_full_n => sortedData_V_full_n,
        if_write => ap_channel_done_sortedData_V,
        if_dout => sortedData_V_dout,
        if_empty_n => sortedData_V_empty_n,
        if_read => checkIdxGeneralV3_4_U0_ap_ready);

    glConfig_V_c11_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => checkIdxGeneralV3_4_U0_glConfig_V_out_din,
        if_full_n => glConfig_V_c11_full_n,
        if_write => checkIdxGeneralV3_4_U0_glConfig_V_out_write,
        if_dout => glConfig_V_c11_dout,
        if_empty_n => glConfig_V_c11_empty_n,
        if_read => Block_proc125_U0_glConfig_V_read);

    glSFASTThrBak_c_U : component fifo_w8_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => checkIdxGeneralV3_4_U0_glSFASTThrBak_out_din,
        if_full_n => glSFASTThrBak_c_full_n,
        if_write => checkIdxGeneralV3_4_U0_glSFASTThrBak_out_write,
        if_dout => glSFASTThrBak_c_dout,
        if_empty_n => glSFASTThrBak_c_empty_n,
        if_read => Block_proc125_U0_glSFASTThrBak_read);

    isStageCorner_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => checkIdxGeneralV3_4_U0_ap_return_0,
        if_full_n => isStageCorner_V_full_n,
        if_write => ap_channel_done_isStageCorner_V,
        if_dout => isStageCorner_V_dout,
        if_empty_n => isStageCorner_V_empty_n,
        if_read => finalCornerChecking_U0_ap_ready);

    glFinalMaxOuterStrea_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => checkIdxGeneralV3_4_U0_ap_return_1,
        if_full_n => glFinalMaxOuterStrea_full_n,
        if_write => ap_channel_done_glFinalMaxOuterStrea,
        if_dout => glFinalMaxOuterStrea_dout,
        if_empty_n => glFinalMaxOuterStrea_empty_n,
        if_read => finalCornerChecking_U0_ap_ready);

    glFinalMaxOuterStrea_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => checkIdxGeneralV3_4_U0_ap_return_2,
        if_full_n => glFinalMaxOuterStrea_2_full_n,
        if_write => ap_channel_done_glFinalMaxOuterStrea_2,
        if_dout => glFinalMaxOuterStrea_2_dout,
        if_empty_n => glFinalMaxOuterStrea_2_empty_n,
        if_read => finalCornerChecking_U0_ap_ready);

    isCorner_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => finalCornerChecking_U0_ap_return,
        if_full_n => isCorner_V_full_n,
        if_write => finalCornerChecking_U0_ap_done,
        if_dout => isCorner_V_dout,
        if_empty_n => isCorner_V_empty_n,
        if_read => feedbackInterleaveSt_U0_ap_ready);

    stageCornerStream_V_s_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_din,
        if_full_n => stageCornerStream_V_s_full_n,
        if_write => feedbackInterleaveSt_U0_isFinalCornerStream_V_V_write,
        if_dout => stageCornerStream_V_s_dout,
        if_empty_n => stageCornerStream_V_s_empty_n,
        if_read => Block_proc125_U0_stageCornerStream_V_V_read);

    start_for_rwSAEPeNgs_U : component start_for_rwSAEPeNgs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_rwSAEPerfectLoopStre_U0_din,
        if_full_n => start_for_rwSAEPerfectLoopStre_U0_full_n,
        if_write => preProcessStream_U0_start_write,
        if_dout => start_for_rwSAEPerfectLoopStre_U0_dout,
        if_empty_n => start_for_rwSAEPerfectLoopStre_U0_empty_n,
        if_read => rwSAEPerfectLoopStre_U0_ap_ready);

    start_for_Block_pOgC_U : component start_for_Block_pOgC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_proc125_U0_din,
        if_full_n => start_for_Block_proc125_U0_full_n,
        if_write => preProcessStream_U0_start_write,
        if_dout => start_for_Block_proc125_U0_dout,
        if_empty_n => start_for_Block_proc125_U0_empty_n,
        if_read => Block_proc125_U0_ap_ready);





    ap_sync_reg_Block_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_proc_U0_ap_ready <= ap_sync_Block_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_glFinalMaxOuterStrea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_glFinalMaxOuterStrea <= ap_const_logic_0;
            else
                if (((checkIdxGeneralV3_4_U0_ap_done and checkIdxGeneralV3_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_glFinalMaxOuterStrea <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_glFinalMaxOuterStrea <= ap_sync_channel_write_glFinalMaxOuterStrea;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_glFinalMaxOuterStrea_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_glFinalMaxOuterStrea_2 <= ap_const_logic_0;
            else
                if (((checkIdxGeneralV3_4_U0_ap_done and checkIdxGeneralV3_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_glFinalMaxOuterStrea_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_glFinalMaxOuterStrea_2 <= ap_sync_channel_write_glFinalMaxOuterStrea_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_idxDataWide_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_idxDataWide_V <= ap_const_logic_0;
            else
                if (((sortedIdxStreamV3_4_U0_ap_done and sortedIdxStreamV3_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_idxDataWide_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_idxDataWide_V <= ap_sync_channel_write_idxDataWide_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_isStageCorner_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_isStageCorner_V <= ap_const_logic_0;
            else
                if (((checkIdxGeneralV3_4_U0_ap_done and checkIdxGeneralV3_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_isStageCorner_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_isStageCorner_V <= ap_sync_channel_write_isStageCorner_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sortedData_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_sortedData_V <= ap_const_logic_0;
            else
                if (((sortedIdxStreamV3_4_U0_ap_done and sortedIdxStreamV3_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sortedData_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sortedData_V <= ap_sync_channel_write_sortedData_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_preProcessStream_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_preProcessStream_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_preProcessStream_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_preProcessStream_U0_ap_ready <= ap_sync_preProcessStream_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Block_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    preProcessStream_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((preProcessStream_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                preProcessStream_U0_ap_ready_count <= std_logic_vector(unsigned(preProcessStream_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((preProcessStream_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                preProcessStream_U0_ap_ready_count <= std_logic_vector(unsigned(preProcessStream_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_proc125_U0_ap_continue <= ap_const_logic_1;
    Block_proc125_U0_ap_start <= start_for_Block_proc125_U0_empty_n;
    Block_proc125_U0_start_full_n <= ap_const_logic_1;
    Block_proc125_U0_start_write <= ap_const_logic_0;
    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= ((ap_sync_reg_Block_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_glFinalMaxOuterStrea <= ((ap_sync_reg_channel_write_glFinalMaxOuterStrea xor ap_const_logic_1) and checkIdxGeneralV3_4_U0_ap_done);
    ap_channel_done_glFinalMaxOuterStrea_2 <= ((ap_sync_reg_channel_write_glFinalMaxOuterStrea_2 xor ap_const_logic_1) and checkIdxGeneralV3_4_U0_ap_done);
    ap_channel_done_idxDataWide_V <= (sortedIdxStreamV3_4_U0_ap_done and (ap_sync_reg_channel_write_idxDataWide_V xor ap_const_logic_1));
    ap_channel_done_isCorner_V <= finalCornerChecking_U0_ap_done;
    ap_channel_done_isStageCorner_V <= ((ap_sync_reg_channel_write_isStageCorner_V xor ap_const_logic_1) and checkIdxGeneralV3_4_U0_ap_done);
    ap_channel_done_size1_V <= rwSAEPerfectLoopStre_U0_ap_done;
    ap_channel_done_sortedData_V <= (sortedIdxStreamV3_4_U0_ap_done and (ap_sync_reg_channel_write_sortedData_V xor ap_const_logic_1));
    ap_done <= Block_proc125_U0_ap_done;
    ap_idle <= (sortedIdxStreamV3_4_U0_ap_idle and rwSAEPerfectLoopStre_U0_ap_idle and preProcessStream_U0_ap_idle and finalCornerChecking_U0_ap_idle and feedbackInterleaveSt_U0_ap_idle and (isCorner_V_empty_n xor ap_const_logic_1) and (glFinalMaxOuterStrea_2_empty_n xor ap_const_logic_1) and (glFinalMaxOuterStrea_empty_n xor ap_const_logic_1) and (isStageCorner_V_empty_n xor ap_const_logic_1) and (sortedData_V_empty_n xor ap_const_logic_1) and (idxDataWide_V_empty_n xor ap_const_logic_1) and (size1_V_empty_n xor ap_const_logic_1) and checkIdxGeneralV3_4_U0_ap_idle and Block_proc_U0_ap_idle and Block_proc125_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_proc_U0_ap_ready <= (ap_sync_reg_Block_proc_U0_ap_ready or Block_proc_U0_ap_ready);
    ap_sync_channel_write_glFinalMaxOuterStrea <= ((glFinalMaxOuterStrea_full_n and ap_channel_done_glFinalMaxOuterStrea) or ap_sync_reg_channel_write_glFinalMaxOuterStrea);
    ap_sync_channel_write_glFinalMaxOuterStrea_2 <= ((glFinalMaxOuterStrea_2_full_n and ap_channel_done_glFinalMaxOuterStrea_2) or ap_sync_reg_channel_write_glFinalMaxOuterStrea_2);
    ap_sync_channel_write_idxDataWide_V <= ((idxDataWide_V_full_n and ap_channel_done_idxDataWide_V) or ap_sync_reg_channel_write_idxDataWide_V);
    ap_sync_channel_write_isStageCorner_V <= ((isStageCorner_V_full_n and ap_channel_done_isStageCorner_V) or ap_sync_reg_channel_write_isStageCorner_V);
    ap_sync_channel_write_sortedData_V <= ((sortedData_V_full_n and ap_channel_done_sortedData_V) or ap_sync_reg_channel_write_sortedData_V);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Block_proc125_U0_ap_done;
    ap_sync_preProcessStream_U0_ap_ready <= (preProcessStream_U0_ap_ready or ap_sync_reg_preProcessStream_U0_ap_ready);
    ap_sync_ready <= (ap_sync_preProcessStream_U0_ap_ready and ap_sync_Block_proc_U0_ap_ready);
    checkIdxGeneralV3_4_U0_ap_continue <= (ap_sync_channel_write_isStageCorner_V and ap_sync_channel_write_glFinalMaxOuterStrea_2 and ap_sync_channel_write_glFinalMaxOuterStrea);
    checkIdxGeneralV3_4_U0_ap_start <= (sortedData_V_empty_n and idxDataWide_V_empty_n);
    checkIdxGeneralV3_4_U0_start_full_n <= ap_const_logic_1;
    checkIdxGeneralV3_4_U0_start_write <= ap_const_logic_0;
    feedbackInterleaveSt_U0_ap_continue <= ap_const_logic_1;
    feedbackInterleaveSt_U0_ap_start <= isCorner_V_empty_n;
    feedbackInterleaveSt_U0_start_full_n <= ap_const_logic_1;
    feedbackInterleaveSt_U0_start_write <= ap_const_logic_0;
    finalCornerChecking_U0_ap_continue <= isCorner_V_full_n;
    finalCornerChecking_U0_ap_start <= (isStageCorner_V_empty_n and glFinalMaxOuterStrea_empty_n and glFinalMaxOuterStrea_2_empty_n);
    finalCornerChecking_U0_start_full_n <= ap_const_logic_1;
    finalCornerChecking_U0_start_write <= ap_const_logic_0;
    isFinalCornerStream_V_V_TDATA <= Block_proc125_U0_isFinalCornerStream_V_V_TDATA;
    isFinalCornerStream_V_V_TVALID <= Block_proc125_U0_isFinalCornerStream_V_V_TVALID;
    polStreamIn_V_V_TREADY <= preProcessStream_U0_polStreamIn_V_V_TREADY;
    polStreamOut_V_V_TDATA <= Block_proc125_U0_polStreamOut_V_V_TDATA;
    polStreamOut_V_V_TVALID <= Block_proc125_U0_polStreamOut_V_V_TVALID;
    preProcessStream_U0_ap_continue <= ap_const_logic_1;
    preProcessStream_U0_ap_start <= ((ap_sync_reg_preProcessStream_U0_ap_ready xor ap_const_logic_1) and ap_start);
    preProcessStream_U0_start_full_n <= (start_for_rwSAEPerfectLoopStre_U0_full_n and start_for_Block_proc125_U0_full_n);
    rwSAEPerfectLoopStre_U0_ap_continue <= size1_V_full_n;
    rwSAEPerfectLoopStre_U0_ap_start <= start_for_rwSAEPerfectLoopStre_U0_empty_n;
    rwSAEPerfectLoopStre_U0_start_full_n <= ap_const_logic_1;
    rwSAEPerfectLoopStre_U0_start_write <= ap_const_logic_0;
    sortedIdxStreamV3_4_U0_ap_continue <= (ap_sync_channel_write_sortedData_V and ap_sync_channel_write_idxDataWide_V);
    sortedIdxStreamV3_4_U0_ap_start <= size1_V_empty_n;
    sortedIdxStreamV3_4_U0_start_full_n <= ap_const_logic_1;
    sortedIdxStreamV3_4_U0_start_write <= ap_const_logic_0;
    start_for_Block_proc125_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_rwSAEPerfectLoopStre_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tsStreamIn_V_V_TREADY <= preProcessStream_U0_tsStreamIn_V_V_TREADY;
    tsStreamOut_V_V_TDATA <= Block_proc125_U0_tsStreamOut_V_V_TDATA;
    tsStreamOut_V_V_TVALID <= Block_proc125_U0_tsStreamOut_V_V_TVALID;
    xStreamIn_V_V_TREADY <= preProcessStream_U0_xStreamIn_V_V_TREADY;
    xStreamOut_V_V_TDATA <= Block_proc125_U0_xStreamOut_V_V_TDATA;
    xStreamOut_V_V_TVALID <= Block_proc125_U0_xStreamOut_V_V_TVALID;
    yStreamIn_V_V_TREADY <= preProcessStream_U0_yStreamIn_V_V_TREADY;
    yStreamOut_V_V_TDATA <= Block_proc125_U0_yStreamOut_V_V_TDATA;
    yStreamOut_V_V_TVALID <= Block_proc125_U0_yStreamOut_V_V_TVALID;
end behav;
